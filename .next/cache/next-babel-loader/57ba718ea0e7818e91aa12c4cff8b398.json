{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class OriginalPerspectiveSquareDrawer {\n  constructor(ctx, config = {}) {\n    _defineProperty(this, \"_ctx\", void 0);\n\n    _defineProperty(this, \"_lineWidth\", void 0);\n\n    _defineProperty(this, \"_lineColor\", void 0);\n\n    _defineProperty(this, \"_includeDashes\", void 0);\n\n    _defineProperty(this, \"_mapper\", void 0);\n\n    this._ctx = ctx;\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n\n    this._mapper = config.mapper || (v => v);\n\n    this._includeDashes = typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  setup() {// Do nothing.\n  }\n\n  draw(squares, focusPoint) {\n    this._ctx.strokeStyle = this._lineColor;\n    this._ctx.lineWidth = this._lineWidth;\n    const [squareOne, squareTwo] = squares;\n    const squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n    const squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper); // Draw dashed lines from vanish point to second square.\n\n    if (this._includeDashes) {\n      this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n\n      squareTwoPoints.forEach(point => {\n        this._ctx.beginPath();\n\n        this._ctx.moveTo(focusPoint.x, focusPoint.y);\n\n        this._ctx.lineTo(point.x, point.y);\n\n        this._ctx.stroke();\n\n        this._ctx.closePath();\n      });\n\n      this._ctx.setLineDash([]);\n    } // Draw second square.\n\n\n    this._drawSquare(squareTwo); // Draw lines between second square and first square\n\n\n    squareOnePoints.forEach((pointOne, index) => {\n      this._ctx.beginPath();\n\n      this._ctx.moveTo(pointOne.x, pointOne.y);\n\n      this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n\n      this._ctx.stroke();\n\n      this._ctx.closePath();\n    }); // Draw first square.\n\n    this._drawSquare(squareOne);\n  }\n\n  _drawSquare(square) {\n    const points = square.pointsAsArray.map(this._mapper);\n\n    this._ctx.beginPath();\n\n    const lastPoint = points[points.length - 1];\n\n    this._ctx.moveTo(lastPoint.x, lastPoint.y);\n\n    points.forEach(point => this._ctx.lineTo(point.x, point.y));\n\n    this._ctx.stroke();\n\n    this._ctx.closePath();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}