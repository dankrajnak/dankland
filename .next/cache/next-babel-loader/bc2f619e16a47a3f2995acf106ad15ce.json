{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n// Private statics\nvar calcMagnitude = function calcMagnitude(v) {\n  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n};\n\nvar INVERSE_SQUARE_ROOT_TWO = 1 / Math.sqrt(2);\n\nvar Vector2d =\n/*#__PURE__*/\nfunction () {\n  function Vector2d(x, y) {\n    _classCallCheck(this, Vector2d);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Vector2d, [{\n    key: \"plus\",\n    value: function plus(b) {\n      return new Vector2d(b.x + this.x, b.y + this.y);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(b) {\n      return new Vector2d(this.x - b.x, this.y - b.y);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(b) {\n      return this.x * b.x + this.y * b.y;\n    }\n  }, {\n    key: \"times\",\n    value: function times(scalar) {\n      return new Vector2d(this.x * scalar, this.y * scalar);\n    }\n  }, {\n    key: \"scaleTo\",\n    value: function scaleTo(magnitude) {\n      return this.normalized.times(magnitude);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix) {\n      return new Vector2d(this.x * matrix[0] + this.y * matrix[1], this.x * matrix[2] + this.y * matrix[3]);\n    }\n  }, {\n    key: \"squaredDistanceTo\",\n    value: function squaredDistanceTo(b) {\n      return Math.pow(this.x - b.x, 2) + Math.pow(this.y - b.y, 2);\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(b) {\n      return Math.sqrt(this.squaredDistanceTo(b));\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vector2d(this.x, this.y);\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    get: function get() {\n      return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n  }, {\n    key: \"magnitude\",\n    get: function get() {\n      return calcMagnitude(this);\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      var magnitude = calcMagnitude(this);\n      return new Vector2d(this.x / magnitude, this.y / magnitude);\n    }\n  }, {\n    key: \"abs\",\n    get: function get() {\n      return new Vector2d(Math.abs(this.x), Math.abs(this.y));\n    }\n    /**\n     * More info here: https://www.h3xed.com/programming/fast-unit-vector-calculation-for-2d-games\n     */\n\n  }, {\n    key: \"approxUnit\",\n    get: function get() {\n      if (!this.x) {\n        if (!this.y) {\n          return new Vector2d(0, 0);\n        } else {\n          return new Vector2d(0, 1);\n        }\n      } else if (!this.y) {\n        return new Vector2d(1, 0);\n      }\n\n      var absVector = this.abs;\n      var ratio = 1 / Math.max(absVector.x, absVector.y);\n      ratio *= (1 - INVERSE_SQUARE_ROOT_TWO) * 10 - (absVector.x + absVector.y) * ratio * (1 - INVERSE_SQUARE_ROOT_TWO);\n      return new Vector2d(this.x * ratio, this.y * ratio);\n    }\n  }]);\n\n  return Vector2d;\n}();\n\nexport { Vector2d as default };","map":null,"metadata":{},"sourceType":"module"}