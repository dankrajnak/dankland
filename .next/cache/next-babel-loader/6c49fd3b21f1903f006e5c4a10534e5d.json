{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport useSafeWindow from \"./useSafeWindow\";\n/**\n * Returns how far the window is currently scrolled in either the vertical\n * or horizontal direction.\n * @param {boolean} [vertical=true]\n */\n\nvar useScrollAmount = function useScrollAmount() {\n  var vertical = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  var _useSafeWindow = useSafeWindow(),\n      _useSafeWindow2 = _slicedToArray(_useSafeWindow, 1),\n      window = _useSafeWindow2[0];\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollAmount = _React$useState2[0],\n      setScrollAmount = _React$useState2[1];\n\n  React.useEffect(function () {\n    var throttledFunc = throttle(function () {\n      return window && setScrollAmount(vertical ? window.scrollY : window.scrollX);\n    }, 30);\n    var wheelListener = window && window.addEventListener(\"scroll\", throttledFunc);\n    return function () {\n      window && wheelListener && window.removeEventListener(\"scroll\", wheelListener);\n    };\n  }, [vertical, window]);\n  return scrollAmount;\n};\n\nexport default useScrollAmount;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/Hooks/useScrollAmount.ts"],"names":["React","throttle","useSafeWindow","useScrollAmount","vertical","window","useState","scrollAmount","setScrollAmount","useEffect","throttledFunc","scrollY","scrollX","wheelListener","addEventListener","removeEventListener"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,0CAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;;;;;;AAKA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAsC;AAAA,MAArCC,QAAqC,uEAAjB,IAAiB;;AAAA,uBAC3CF,aAAa,EAD8B;AAAA;AAAA,MACrDG,MADqD;;AAAA,wBAEpBL,KAAK,CAACM,QAAN,CAAe,CAAf,CAFoB;AAAA;AAAA,MAErDC,YAFqD;AAAA,MAEvCC,eAFuC;;AAG5DR,EAAAA,KAAK,CAACS,SAAN,CAAgB,YAAM;AACpB,QAAMC,aAAa,GAAGT,QAAQ,CAC5B;AAAA,aACEI,MAAM,IAAIG,eAAe,CAACJ,QAAQ,GAAGC,MAAM,CAACM,OAAV,GAAoBN,MAAM,CAACO,OAApC,CAD3B;AAAA,KAD4B,EAG5B,EAH4B,CAA9B;AAKA,QAAMC,aAAa,GACjBR,MAAM,IAAIA,MAAM,CAACS,gBAAP,CAAwB,QAAxB,EAAkCJ,aAAlC,CADZ;AAGA,WAAO,YAAM;AACXL,MAAAA,MAAM,IACJQ,aADF,IAEER,MAAM,CAACU,mBAAP,CAA2B,QAA3B,EAAqCF,aAArC,CAFF;AAGD,KAJD;AAKD,GAdD,EAcG,CAACT,QAAD,EAAWC,MAAX,CAdH;AAeA,SAAOE,YAAP;AACD,CAnBD;;AAqBA,eAAeJ,eAAf","sourcesContent":["import * as React from \"react\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport useSafeWindow from \"./useSafeWindow\";\n\n/**\n * Returns how far the window is currently scrolled in either the vertical\n * or horizontal direction.\n * @param {boolean} [vertical=true]\n */\nconst useScrollAmount = (vertical: boolean = true): number => {\n  const [window] = useSafeWindow();\n  const [scrollAmount, setScrollAmount] = React.useState(0);\n  React.useEffect(() => {\n    const throttledFunc = throttle(\n      () =>\n        window && setScrollAmount(vertical ? window.scrollY : window.scrollX),\n      30\n    );\n    const wheelListener =\n      window && window.addEventListener(\"scroll\", throttledFunc);\n\n    return () => {\n      window &&\n        wheelListener &&\n        window.removeEventListener(\"scroll\", wheelListener);\n    };\n  }, [vertical, window]);\n  return scrollAmount;\n};\n\nexport default useScrollAmount;\n"]},"metadata":{},"sourceType":"module"}