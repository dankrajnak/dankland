{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Homepage/Lorenz.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport ColorInterpolate from \"color-interpolate\";\nimport getNextPosition from \"../../../Services/StrangeAttractor/StrangeAttractor.service\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\nimport { Map } from \"immutable\";\n\nconst mapper = (fromLow, fromHigh, toLow, toHigh) => mapValue => (mapValue - fromLow) / (fromHigh - fromLow) * (toHigh - toLow) + toLow;\n\nconst colorInterpolator = ColorInterpolate([\"#F58B73\", \"#F26A7C\", \"#BD4EB2\", \"#894EAB\", \"#554396\"]);\nlet position = Map({\n  x: 10,\n  y: 10,\n  z: 25 + Math.random() * 10 - 5\n});\n\nconst Lorenz = props => {\n  const xMapper = mapper(-20, 20, 0, props.width);\n  const yMapper = mapper(0, 50, 0, props.height);\n  const colorMapper = mapper(0, 40, 0, 1); // Start the animation!\n\n  const artist = context => {\n    // Draw the thing\n    context.fillStyle = props.colorful ? colorInterpolator(colorMapper( // @ts-ignore\n    position.get(\"z\"))) : \"#2f3030\";\n    context.fillRect(0, 0, props.width, props.height);\n    context.fillStyle = \"#EEE\";\n    context.beginPath();\n    context.ellipse(xMapper( // @ts-ignore\n    position.get(\"x\")), yMapper( // @ts-ignore\n    position.get(\"z\")), 5, 5, 0, 0, Math.PI * 2);\n    context.fill();\n    context.closePath(); // Figure out the next position of this.\n\n    position = getNextPosition(position);\n  };\n\n  const initializeCanvas = context => {\n    context.fillStyle = \"#2f3030\";\n    context.strokeStyle = \"#EEE\";\n    context.lineWidth = 0.5;\n  };\n\n  return __jsx(CanvasDrawer, {\n    artist: artist,\n    initializeCanvas: initializeCanvas,\n    width: props.width,\n    height: props.height,\n    fps: 50,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  });\n};\n\nexport default React.memo(Lorenz);","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Homepage/Lorenz.tsx"],"names":["React","ColorInterpolate","getNextPosition","CanvasDrawer","Map","mapper","fromLow","fromHigh","toLow","toHigh","mapValue","colorInterpolator","position","x","y","z","Math","random","Lorenz","props","xMapper","width","yMapper","height","colorMapper","artist","context","fillStyle","colorful","get","fillRect","beginPath","ellipse","PI","fill","closePath","initializeCanvas","strokeStyle","lineWidth","memo"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,gBAAP,MAA6B,mBAA7B;AACA,OAAOC,eAAP,MAEO,6DAFP;AAGA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,SAASC,GAAT,QAAoB,WAApB;;AASA,MAAMC,MAAM,GAAG,CACbC,OADa,EAEbC,QAFa,EAGbC,KAHa,EAIbC,MAJa,KAKTC,QAAD,IACF,CAACA,QAAQ,GAAGJ,OAAZ,KAAwBC,QAAQ,GAAGD,OAAnC,CAAD,IAAiDG,MAAM,GAAGD,KAA1D,IAAmEA,KANrE;;AAQA,MAAMG,iBAAiB,GAAGV,gBAAgB,CAAC,CACzC,SADyC,EAEzC,SAFyC,EAGzC,SAHyC,EAIzC,SAJyC,EAKzC,SALyC,CAAD,CAA1C;AAQA,IAAIW,QAAQ,GAAGR,GAAG,CAAC;AACjBS,EAAAA,CAAC,EAAE,EADc;AAEjBC,EAAAA,CAAC,EAAE,EAFc;AAGjBC,EAAAA,CAAC,EAAE,KAAKC,IAAI,CAACC,MAAL,KAAgB,EAArB,GAA0B;AAHZ,CAAD,CAAlB;;AAMA,MAAMC,MAAM,GAAIC,KAAD,IAAkB;AAC/B,QAAMC,OAAO,GAAGf,MAAM,CAAC,CAAC,EAAF,EAAM,EAAN,EAAU,CAAV,EAAac,KAAK,CAACE,KAAnB,CAAtB;AACA,QAAMC,OAAO,GAAGjB,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAWc,KAAK,CAACI,MAAjB,CAAtB;AACA,QAAMC,WAAW,GAAGnB,MAAM,CAAC,CAAD,EAAI,EAAJ,EAAQ,CAAR,EAAW,CAAX,CAA1B,CAH+B,CAK/B;;AACA,QAAMoB,MAAM,GAAIC,OAAD,IAAuC;AACpD;AACAA,IAAAA,OAAO,CAACC,SAAR,GAAoBR,KAAK,CAACS,QAAN,GAChBjB,iBAAiB,CACfa,WAAW,EACT;AACAZ,IAAAA,QAAQ,CAACiB,GAAT,CAAa,GAAb,CAFS,CADI,CADD,GAOhB,SAPJ;AAQAH,IAAAA,OAAO,CAACI,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuBX,KAAK,CAACE,KAA7B,EAAoCF,KAAK,CAACI,MAA1C;AAEAG,IAAAA,OAAO,CAACC,SAAR,GAAoB,MAApB;AACAD,IAAAA,OAAO,CAACK,SAAR;AACAL,IAAAA,OAAO,CAACM,OAAR,CACEZ,OAAO,EACL;AACAR,IAAAA,QAAQ,CAACiB,GAAT,CAAa,GAAb,CAFK,CADT,EAKEP,OAAO,EACL;AACAV,IAAAA,QAAQ,CAACiB,GAAT,CAAa,GAAb,CAFK,CALT,EASE,CATF,EAUE,CAVF,EAWE,CAXF,EAYE,CAZF,EAaEb,IAAI,CAACiB,EAAL,GAAU,CAbZ;AAeAP,IAAAA,OAAO,CAACQ,IAAR;AACAR,IAAAA,OAAO,CAACS,SAAR,GA9BoD,CA+BpD;;AACAvB,IAAAA,QAAQ,GAAGV,eAAe,CAACU,QAAD,CAA1B;AACD,GAjCD;;AAmCA,QAAMwB,gBAAgB,GAAIV,OAAD,IAAuC;AAC9DA,IAAAA,OAAO,CAACC,SAAR,GAAoB,SAApB;AACAD,IAAAA,OAAO,CAACW,WAAR,GAAsB,MAAtB;AACAX,IAAAA,OAAO,CAACY,SAAR,GAAoB,GAApB;AACD,GAJD;;AAKA,SACE,MAAC,YAAD;AACE,IAAA,MAAM,EAAEb,MADV;AAEE,IAAA,gBAAgB,EAAEW,gBAFpB;AAGE,IAAA,KAAK,EAAEjB,KAAK,CAACE,KAHf;AAIE,IAAA,MAAM,EAAEF,KAAK,CAACI,MAJhB;AAKE,IAAA,GAAG,EAAE,EALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AASD,CAvDD;;AAyDA,eAAevB,KAAK,CAACuC,IAAN,CAAWrB,MAAX,CAAf","sourcesContent":["import * as React from \"react\";\nimport ColorInterpolate from \"color-interpolate\";\nimport getNextPosition, {\n  Position,\n} from \"../../../Services/StrangeAttractor/StrangeAttractor.service\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\nimport { Map } from \"immutable\";\n\ninterface Props {\n  width: number;\n  height: number;\n  getXandY?: () => [number, number];\n  colorful?: boolean | null;\n}\n\nconst mapper = (\n  fromLow: number,\n  fromHigh: number,\n  toLow: number,\n  toHigh: number\n) => (mapValue: number) =>\n  ((mapValue - fromLow) / (fromHigh - fromLow)) * (toHigh - toLow) + toLow;\n\nconst colorInterpolator = ColorInterpolate([\n  \"#F58B73\",\n  \"#F26A7C\",\n  \"#BD4EB2\",\n  \"#894EAB\",\n  \"#554396\",\n]);\n\nlet position = Map({\n  x: 10,\n  y: 10,\n  z: 25 + Math.random() * 10 - 5,\n}) as Position;\n\nconst Lorenz = (props: Props) => {\n  const xMapper = mapper(-20, 20, 0, props.width);\n  const yMapper = mapper(0, 50, 0, props.height);\n  const colorMapper = mapper(0, 40, 0, 1);\n\n  // Start the animation!\n  const artist = (context: CanvasRenderingContext2D) => {\n    // Draw the thing\n    context.fillStyle = props.colorful\n      ? colorInterpolator(\n          colorMapper(\n            // @ts-ignore\n            position.get(\"z\")\n          )\n        )\n      : \"#2f3030\";\n    context.fillRect(0, 0, props.width, props.height);\n\n    context.fillStyle = \"#EEE\";\n    context.beginPath();\n    context.ellipse(\n      xMapper(\n        // @ts-ignore\n        position.get(\"x\")\n      ),\n      yMapper(\n        // @ts-ignore\n        position.get(\"z\")\n      ),\n      5,\n      5,\n      0,\n      0,\n      Math.PI * 2\n    );\n    context.fill();\n    context.closePath();\n    // Figure out the next position of this.\n    position = getNextPosition(position);\n  };\n\n  const initializeCanvas = (context: CanvasRenderingContext2D) => {\n    context.fillStyle = \"#2f3030\";\n    context.strokeStyle = \"#EEE\";\n    context.lineWidth = 0.5;\n  };\n  return (\n    <CanvasDrawer\n      artist={artist}\n      initializeCanvas={initializeCanvas}\n      width={props.width}\n      height={props.height}\n      fps={50}\n    />\n  );\n};\n\nexport default React.memo(Lorenz);\n"]},"metadata":{},"sourceType":"module"}