{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\nimport MetaSphere from \"../../../Services/MetaSphere/MetaSphere\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nconst MetaSpherePreview = props => {\n  const metaDrawer = React.useRef(null);\n  const [focusPoint, mouseProps] = useClickHoverWander(props.width, props.height);\n  React.useEffect(() => {\n    metaDrawer.current = new MetaSphere(props.width, props.height, {\n      dotSize: 2,\n      p: 0.002,\n      numberOfColumns: 20,\n      numberOfRows: 20,\n      shouldSlideDots: false\n    });\n  }, [props.height, props.width]);\n  const artist = React.useMemo(() => ctx => {\n    metaDrawer.current && metaDrawer.current.draw(ctx, focusPoint);\n  }, [focusPoint]);\n  return __jsx(CanvasDrawer, _extends({\n    width: props.width,\n    height: props.height,\n    artist: artist\n  }, mouseProps));\n};\n\nexport default MetaSpherePreview;","map":null,"metadata":{},"sourceType":"module"}