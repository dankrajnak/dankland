{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport useSafeWindow from \"../Hooks/useSafeWindow\";\n\n/**\n * A wrapper around the canvas element which prevents the canvas from\n * unmounting unless the width or height changes and provides a method\n * to get a rendering context.\n * @param {*} props\n * @param {*} ref\n */\nvar Canvas = function Canvas(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      getContext = _ref.getContext,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"getContext\"]);\n\n  var canvasRef = React.useRef(null);\n\n  var _useSafeWindow = useSafeWindow(),\n      _useSafeWindow2 = _slicedToArray(_useSafeWindow, 1),\n      window = _useSafeWindow2[0];\n\n  React.useEffect(function () {\n    var context = canvasRef.current && canvasRef.current.getContext(\"2d\");\n\n    if (context) {\n      getContext(context);\n    }\n  }, [getContext, window]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, otherProps));\n}; // @ts-ignore\n\n\nexport default React.memo(Canvas);","map":null,"metadata":{},"sourceType":"module"}