{"ast":null,"code":"var EasingFunctions = {\n  // no easing, no acceleration\n  linear: function linear(t) {\n    return t;\n  },\n  // accelerating from zero velocity\n  easeInQuad: function easeInQuad(t) {\n    return t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuad: function easeOutQuad(t) {\n    return t * (2 - t);\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuad: function easeInOutQuad(t) {\n    return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;\n  },\n  // accelerating from zero velocity\n  easeInCubic: function easeInCubic(t) {\n    return t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutCubic: function easeOutCubic(t) {\n    return --t * t * t + 1;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutCubic: function easeInOutCubic(t) {\n    return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1;\n  },\n  // accelerating from zero velocity\n  easeInQuart: function easeInQuart(t) {\n    return t * t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuart: function easeOutQuart(t) {\n    return 1 - --t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: function easeInOutQuart(t) {\n    return t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t;\n  },\n  // accelerating from zero velocity\n  easeInQuint: function easeInQuint(t) {\n    return t * t * t * t * t;\n  },\n  // decelerating to zero velocity\n  easeOutQuint: function easeOutQuint(t) {\n    return 1 + --t * t * t * t * t;\n  },\n  // acceleration until halfway, then deceleration\n  easeInOutQuint: function easeInOutQuint(t) {\n    return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t;\n  }\n};\nexport default EasingFunctions;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/Ease/Ease.service.ts"],"names":["EasingFunctions","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"AAAA,IAAMA,eAAe,GAAG;AACtB;AACAC,EAAAA,MAAM,EAAE,gBAACC,CAAD;AAAA,WAAeA,CAAf;AAAA,GAFc;AAGtB;AACAC,EAAAA,UAAU,EAAE,oBAACD,CAAD;AAAA,WAAeA,CAAC,GAAGA,CAAnB;AAAA,GAJU;AAKtB;AACAE,EAAAA,WAAW,EAAE,qBAACF,CAAD;AAAA,WAAeA,CAAC,IAAI,IAAIA,CAAR,CAAhB;AAAA,GANS;AAOtB;AACAG,EAAAA,aAAa,EAAE,uBAACH,CAAD;AAAA,WAAgBA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAlB,GAAsB,CAAC,CAAD,GAAK,CAAC,IAAI,IAAIA,CAAT,IAAcA,CAAzD;AAAA,GARO;AAStB;AACAI,EAAAA,WAAW,EAAE,qBAACJ,CAAD;AAAA,WAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAAvB;AAAA,GAVS;AAWtB;AACAK,EAAAA,YAAY,EAAE,sBAACL,CAAD;AAAA,WAAe,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAc,CAA7B;AAAA,GAZQ;AAatB;AACAM,EAAAA,cAAc,EAAE,wBAACN,CAAD;AAAA,WACdA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAR,GAAYA,CAAtB,GAA0B,CAACA,CAAC,GAAG,CAAL,KAAW,IAAIA,CAAJ,GAAQ,CAAnB,KAAyB,IAAIA,CAAJ,GAAQ,CAAjC,IAAsC,CADlD;AAAA,GAdM;AAgBtB;AACAO,EAAAA,WAAW,EAAE,qBAACP,CAAD;AAAA,WAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYA,CAA3B;AAAA,GAjBS;AAkBtB;AACAQ,EAAAA,YAAY,EAAE,sBAACR,CAAD;AAAA,WAAe,IAAI,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAcA,CAAjC;AAAA,GAnBQ;AAoBtB;AACAS,EAAAA,cAAc,EAAE,wBAACT,CAAD;AAAA,WACdA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAR,GAAYA,CAAZ,GAAgBA,CAA1B,GAA8B,IAAI,IAAI,EAAEA,CAAN,GAAUA,CAAV,GAAcA,CAAd,GAAkBA,CADtC;AAAA,GArBM;AAuBtB;AACAU,EAAAA,WAAW,EAAE,qBAACV,CAAD;AAAA,WAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYA,CAAZ,GAAgBA,CAA/B;AAAA,GAxBS;AAyBtB;AACAW,EAAAA,YAAY,EAAE,sBAACX,CAAD;AAAA,WAAe,IAAI,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAcA,CAAd,GAAkBA,CAArC;AAAA,GA1BQ;AA2BtB;AACAY,EAAAA,cAAc,EAAE,wBAACZ,CAAD;AAAA,WACdA,CAAC,GAAG,GAAJ,GAAU,KAAKA,CAAL,GAASA,CAAT,GAAaA,CAAb,GAAiBA,CAAjB,GAAqBA,CAA/B,GAAmC,IAAI,KAAK,EAAEA,CAAP,GAAWA,CAAX,GAAeA,CAAf,GAAmBA,CAAnB,GAAuBA,CADhD;AAAA;AA5BM,CAAxB;AAgCA,eAAeF,eAAf","sourcesContent":["const EasingFunctions = {\n  // no easing, no acceleration\n  linear: (t: number) => t,\n  // accelerating from zero velocity\n  easeInQuad: (t: number) => t * t,\n  // decelerating to zero velocity\n  easeOutQuad: (t: number) => t * (2 - t),\n  // acceleration until halfway, then deceleration\n  easeInOutQuad: (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n  // accelerating from zero velocity\n  easeInCubic: (t: number) => t * t * t,\n  // decelerating to zero velocity\n  easeOutCubic: (t: number) => --t * t * t + 1,\n  // acceleration until halfway, then deceleration\n  easeInOutCubic: (t: number) =>\n    t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  // accelerating from zero velocity\n  easeInQuart: (t: number) => t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuart: (t: number) => 1 - --t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: (t: number) =>\n    t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  // accelerating from zero velocity\n  easeInQuint: (t: number) => t * t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuint: (t: number) => 1 + --t * t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuint: (t: number) =>\n    t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t,\n};\n\nexport default EasingFunctions;\n"]},"metadata":{},"sourceType":"module"}