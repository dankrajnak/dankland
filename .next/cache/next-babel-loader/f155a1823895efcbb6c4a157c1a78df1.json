{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/MetaSpherePreview.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\nimport MetaSphere from \"../../../Services/MetaSphere/MetaSphere\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nconst MetaSpherePreview = props => {\n  const metaDrawer = React.useRef(null);\n  const [focusPoint, mouseProps] = useClickHoverWander(props.width, props.height);\n  React.useEffect(() => {\n    metaDrawer.current = new MetaSphere(props.width, props.height, {\n      dotSize: 2,\n      p: 0.002,\n      numberOfColumns: 20,\n      numberOfRows: 20,\n      shouldSlideDots: false\n    });\n  }, [props.height, props.width]);\n  const artist = React.useMemo(() => ctx => {\n    metaDrawer.current && metaDrawer.current.draw(ctx, focusPoint);\n  }, [focusPoint]);\n  return __jsx(CanvasDrawer, _extends({\n    width: props.width,\n    height: props.height,\n    artist: artist\n  }, mouseProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n\nexport default MetaSpherePreview;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/MetaSpherePreview.tsx"],"names":["React","MetaSphere","useClickHoverWander","CanvasDrawer","MetaSpherePreview","props","metaDrawer","useRef","focusPoint","mouseProps","width","height","useEffect","current","dotSize","p","numberOfColumns","numberOfRows","shouldSlideDots","artist","useMemo","ctx","draw"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAA8C;AACtE,QAAMC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAgC,IAAhC,CAAnB;AACA,QAAM,CAACC,UAAD,EAAaC,UAAb,IAA2BP,mBAAmB,CAClDG,KAAK,CAACK,KAD4C,EAElDL,KAAK,CAACM,MAF4C,CAApD;AAIAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACpBN,IAAAA,UAAU,CAACO,OAAX,GAAqB,IAAIZ,UAAJ,CAAeI,KAAK,CAACK,KAArB,EAA4BL,KAAK,CAACM,MAAlC,EAA0C;AAC7DG,MAAAA,OAAO,EAAE,CADoD;AAE7DC,MAAAA,CAAC,EAAE,KAF0D;AAG7DC,MAAAA,eAAe,EAAE,EAH4C;AAI7DC,MAAAA,YAAY,EAAE,EAJ+C;AAK7DC,MAAAA,eAAe,EAAE;AAL4C,KAA1C,CAArB;AAOD,GARD,EAQG,CAACb,KAAK,CAACM,MAAP,EAAeN,KAAK,CAACK,KAArB,CARH;AAUA,QAAMS,MAAM,GAAGnB,KAAK,CAACoB,OAAN,CACb,MAAOC,GAAD,IAAmC;AACvCf,IAAAA,UAAU,CAACO,OAAX,IAAsBP,UAAU,CAACO,OAAX,CAAmBS,IAAnB,CAAwBD,GAAxB,EAA6Bb,UAA7B,CAAtB;AACD,GAHY,EAIb,CAACA,UAAD,CAJa,CAAf;AAMA,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEH,KAAK,CAACK,KADf;AAEE,IAAA,MAAM,EAAEL,KAAK,CAACM,MAFhB;AAGE,IAAA,MAAM,EAAEQ;AAHV,KAIMV,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD,CA9BD;;AAgCA,eAAeL,iBAAf","sourcesContent":["import * as React from \"react\";\nimport MetaSphere from \"../../../Services/MetaSphere/MetaSphere\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nconst MetaSpherePreview = (props: { width: number; height: number }) => {\n  const metaDrawer = React.useRef<MetaSphere | null>(null);\n  const [focusPoint, mouseProps] = useClickHoverWander(\n    props.width,\n    props.height\n  );\n  React.useEffect(() => {\n    metaDrawer.current = new MetaSphere(props.width, props.height, {\n      dotSize: 2,\n      p: 0.002,\n      numberOfColumns: 20,\n      numberOfRows: 20,\n      shouldSlideDots: false,\n    });\n  }, [props.height, props.width]);\n\n  const artist = React.useMemo(\n    () => (ctx: CanvasRenderingContext2D) => {\n      metaDrawer.current && metaDrawer.current.draw(ctx, focusPoint);\n    },\n    [focusPoint]\n  );\n  return (\n    <CanvasDrawer\n      width={props.width}\n      height={props.height}\n      artist={artist}\n      {...mouseProps}\n    />\n  );\n};\n\nexport default MetaSpherePreview;\n"]},"metadata":{},"sourceType":"module"}