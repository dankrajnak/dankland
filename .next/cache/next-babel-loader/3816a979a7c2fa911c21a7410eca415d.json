{"ast":null,"code":"// Decided to implement this because why not.\n\n/**\n * Returns a new function that can only be called once within the given time.\n * @param {Function} func - the function to throttle\n * @param {*} time - the amount of time in which this function can only be called once\n */\nexport default function thottle(func, time) {\n  var cooledDown = true;\n  return function () {\n    if (cooledDown) {\n      func.apply(void 0, arguments);\n      cooledDown = false;\n      setTimeout(function () {\n        return cooledDown = true;\n      }, time);\n    }\n  };\n}","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/Throttle/Throttle.service.ts"],"names":["thottle","func","time","cooledDown","setTimeout"],"mappings":"AAAA;;AAEA;;;;;AAKA,eAAe,SAASA,OAAT,CAAiBC,IAAjB,EAAiCC,IAAjC,EAA+C;AAC5D,MAAIC,UAAU,GAAG,IAAjB;AACA,SAAO,YAAsB;AAC3B,QAAIA,UAAJ,EAAgB;AACdF,MAAAA,IAAI,MAAJ;AACAE,MAAAA,UAAU,GAAG,KAAb;AACAC,MAAAA,UAAU,CAAC;AAAA,eAAOD,UAAU,GAAG,IAApB;AAAA,OAAD,EAA4BD,IAA5B,CAAV;AACD;AACF,GAND;AAOD","sourcesContent":["// Decided to implement this because why not.\n\n/**\n * Returns a new function that can only be called once within the given time.\n * @param {Function} func - the function to throttle\n * @param {*} time - the amount of time in which this function can only be called once\n */\nexport default function thottle(func: Function, time: number) {\n  let cooledDown = true;\n  return function(...args: []) {\n    if (cooledDown) {\n      func(...args);\n      cooledDown = false;\n      setTimeout(() => (cooledDown = true), time);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}