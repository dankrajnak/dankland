{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar OriginalPerspectiveSquareDrawer =\n/*#__PURE__*/\nfunction () {\n  function OriginalPerspectiveSquareDrawer(ctx) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, OriginalPerspectiveSquareDrawer);\n\n    _defineProperty(this, \"_ctx\", void 0);\n\n    _defineProperty(this, \"_lineWidth\", void 0);\n\n    _defineProperty(this, \"_lineColor\", void 0);\n\n    _defineProperty(this, \"_includeDashes\", void 0);\n\n    _defineProperty(this, \"_mapper\", void 0);\n\n    this._ctx = ctx;\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n\n    this._mapper = config.mapper || function (v) {\n      return v;\n    };\n\n    this._includeDashes = typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  _createClass(OriginalPerspectiveSquareDrawer, [{\n    key: \"setup\",\n    value: function setup() {// Do nothing.\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(squares, focusPoint) {\n      var _this = this;\n\n      this._ctx.strokeStyle = this._lineColor;\n      this._ctx.lineWidth = this._lineWidth;\n\n      var _squares = _slicedToArray(squares, 2),\n          squareOne = _squares[0],\n          squareTwo = _squares[1];\n\n      var squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n      var squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper); // Draw dashed lines from vanish point to second square.\n\n      if (this._includeDashes) {\n        this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n\n        squareTwoPoints.forEach(function (point) {\n          _this._ctx.beginPath();\n\n          _this._ctx.moveTo(focusPoint.x, focusPoint.y);\n\n          _this._ctx.lineTo(point.x, point.y);\n\n          _this._ctx.stroke();\n\n          _this._ctx.closePath();\n        });\n\n        this._ctx.setLineDash([]);\n      } // Draw second square.\n\n\n      this._drawSquare(squareTwo); // Draw lines between second square and first square\n\n\n      squareOnePoints.forEach(function (pointOne, index) {\n        _this._ctx.beginPath();\n\n        _this._ctx.moveTo(pointOne.x, pointOne.y);\n\n        _this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n\n        _this._ctx.stroke();\n\n        _this._ctx.closePath();\n      }); // Draw first square.\n\n      this._drawSquare(squareOne);\n    }\n  }, {\n    key: \"_drawSquare\",\n    value: function _drawSquare(square) {\n      var _this2 = this;\n\n      var points = square.pointsAsArray.map(this._mapper);\n\n      this._ctx.beginPath();\n\n      var lastPoint = points[points.length - 1];\n\n      this._ctx.moveTo(lastPoint.x, lastPoint.y);\n\n      points.forEach(function (point) {\n        return _this2._ctx.lineTo(point.x, point.y);\n      });\n\n      this._ctx.stroke();\n\n      this._ctx.closePath();\n    }\n  }]);\n\n  return OriginalPerspectiveSquareDrawer;\n}();\n\nexport { OriginalPerspectiveSquareDrawer as default };","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/PerspectiveSquare/Drawers/Original.service.ts"],"names":["OriginalPerspectiveSquareDrawer","ctx","config","_ctx","_lineColor","lineColor","_lineWidth","lineWidth","_mapper","mapper","v","_includeDashes","includeDashes","squares","focusPoint","strokeStyle","squareOne","squareTwo","squareOnePoints","pointsAsArray","map","squareTwoPoints","setLineDash","forEach","point","beginPath","moveTo","x","y","lineTo","stroke","closePath","_drawSquare","pointOne","index","square","points","lastPoint","length"],"mappings":"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","sourcesContent":["import PersepctiveSquareDrawer from \"./Drawer.interface\";\nimport Vector2d from \"../../../Domain/Vector/Vector2d\";\nimport Square from \"../../../Domain/Square/Square\";\n\ninterface Config {\n  lineWidth?: number;\n  lineColor?: string;\n  includeDashes?: boolean;\n  mapper?: (v: Vector2d) => Vector2d;\n}\nexport default class OriginalPerspectiveSquareDrawer\n  implements PersepctiveSquareDrawer {\n  private _ctx: CanvasRenderingContext2D;\n  private _lineWidth: number;\n  private _lineColor: string;\n  private _includeDashes: boolean;\n  private _mapper: (v: Vector2d) => Vector2d;\n  public constructor(ctx: CanvasRenderingContext2D, config: Config = {}) {\n    this._ctx = ctx;\n\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n    this._mapper = config.mapper || ((v: Vector2d) => v);\n    this._includeDashes =\n      typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  public setup() {\n    // Do nothing.\n  }\n\n  public draw(squares: [Square, Square], focusPoint: Vector2d) {\n    this._ctx.strokeStyle = this._lineColor;\n    this._ctx.lineWidth = this._lineWidth;\n    const [squareOne, squareTwo] = squares;\n    const squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n    const squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper);\n\n    // Draw dashed lines from vanish point to second square.\n    if (this._includeDashes) {\n      this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n      squareTwoPoints.forEach((point: Vector2d) => {\n        this._ctx.beginPath();\n        this._ctx.moveTo(focusPoint.x, focusPoint.y);\n        this._ctx.lineTo(point.x, point.y);\n        this._ctx.stroke();\n        this._ctx.closePath();\n      });\n      this._ctx.setLineDash([]);\n    }\n\n    // Draw second square.\n    this._drawSquare(squareTwo);\n\n    // Draw lines between second square and first square\n    squareOnePoints.forEach((pointOne, index) => {\n      this._ctx.beginPath();\n      this._ctx.moveTo(pointOne.x, pointOne.y);\n      this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n      this._ctx.stroke();\n      this._ctx.closePath();\n    });\n\n    // Draw first square.\n    this._drawSquare(squareOne);\n  }\n\n  private _drawSquare(square: Square) {\n    const points = square.pointsAsArray.map(this._mapper);\n    this._ctx.beginPath();\n    const lastPoint = points[points.length - 1];\n    this._ctx.moveTo(lastPoint.x, lastPoint.y);\n    points.forEach(point => this._ctx.lineTo(point.x, point.y));\n    this._ctx.stroke();\n    this._ctx.closePath();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}