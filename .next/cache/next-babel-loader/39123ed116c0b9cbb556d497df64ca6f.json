{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Homepage/DoublePendulums.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport getNextPendulum from \"../../../Services/DoublePendulum/DoublePendulum.service\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nvar getPendulumCoordinates = function getPendulumCoordinates(pendulum) {\n  // Get coordinates of lower mass.\n  var aAngle = pendulum.get(\"aAngle\") || 0;\n  var aLength = pendulum.get(\"aLength\") || 0;\n  var bAngle = pendulum.get(\"bAngle\") || 0;\n  var bLength = pendulum.get(\"bLength\") || 0;\n  var x1 = Math.sin(aAngle) * aLength;\n  var y1 = Math.cos(aAngle) * aLength;\n  var x2 = x1 + Math.sin(bAngle) * bLength;\n  var y2 = y1 + Math.cos(bAngle) * bLength;\n  return {\n    x1: x1,\n    y1: y1,\n    x2: x2,\n    y2: y2\n  };\n};\n/**\n * Simulates chaotic pendulums utilizing the Runge-Katta algorithm\n */\n\n\nexport default React.memo(function DoublePendulums(props) {\n  var pendulums = props.pendulumsInitialState;\n\n  var drawPendulums = function drawPendulums(context) {\n    props.renderPendulums(pendulums.map(function (pendulum) {\n      return getPendulumCoordinates(pendulum);\n    }), context, {\n      width: props.width,\n      height: props.height\n    });\n    pendulums = pendulums.map(getNextPendulum);\n  };\n\n  return __jsx(CanvasDrawer, {\n    width: props.width,\n    height: props.height,\n    artist: drawPendulums,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  });\n});","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Homepage/DoublePendulums.tsx"],"names":["React","getNextPendulum","CanvasDrawer","getPendulumCoordinates","pendulum","aAngle","get","aLength","bAngle","bLength","x1","Math","sin","y1","cos","x2","y2","memo","DoublePendulums","props","pendulums","pendulumsInitialState","drawPendulums","context","renderPendulums","map","width","height"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,eAAP,MAEO,yDAFP;AAGA,OAAOC,YAAP,MAAyB,oCAAzB;;AAkCA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAgD;AAC7E;AAEA,MAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,CAAa,QAAb,KAA0B,CAAzC;AACA,MAAMC,OAAO,GAAGH,QAAQ,CAACE,GAAT,CAAa,SAAb,KAA2B,CAA3C;AACA,MAAME,MAAM,GAAGJ,QAAQ,CAACE,GAAT,CAAa,QAAb,KAA0B,CAAzC;AACA,MAAMG,OAAO,GAAGL,QAAQ,CAACE,GAAT,CAAa,SAAb,KAA2B,CAA3C;AAEA,MAAMI,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASP,MAAT,IAAmBE,OAA9B;AACA,MAAMM,EAAE,GAAGF,IAAI,CAACG,GAAL,CAAST,MAAT,IAAmBE,OAA9B;AAEA,MAAMQ,EAAE,GAAGL,EAAE,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAT,IAAmBC,OAAnC;AACA,MAAMO,EAAE,GAAGH,EAAE,GAAGF,IAAI,CAACG,GAAL,CAASN,MAAT,IAAmBC,OAAnC;AAEA,SAAO;AAAEC,IAAAA,EAAE,EAAFA,EAAF;AAAMG,IAAAA,EAAE,EAAFA,EAAN;AAAUE,IAAAA,EAAE,EAAFA,EAAV;AAAcC,IAAAA,EAAE,EAAFA;AAAd,GAAP;AACD,CAfD;AAiBA;;;;;AAGA,eAAehB,KAAK,CAACiB,IAAN,CAAW,SAASC,eAAT,CAAyBC,KAAzB,EAAuC;AAC/D,MAAIC,SAAS,GAAGD,KAAK,CAACE,qBAAtB;;AACA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,OAAD,EAAuC;AAC3DJ,IAAAA,KAAK,CAACK,eAAN,CACEJ,SAAS,CAACK,GAAV,CAAc,UAAArB,QAAQ;AAAA,aAAID,sBAAsB,CAACC,QAAD,CAA1B;AAAA,KAAtB,CADF,EAEEmB,OAFF,EAGE;AAAEG,MAAAA,KAAK,EAAEP,KAAK,CAACO,KAAf;AAAsBC,MAAAA,MAAM,EAAER,KAAK,CAACQ;AAApC,KAHF;AAKAP,IAAAA,SAAS,GAAGA,SAAS,CAACK,GAAV,CAAcxB,eAAd,CAAZ;AACD,GAPD;;AAQA,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEkB,KAAK,CAACO,KADf;AAEE,IAAA,MAAM,EAAEP,KAAK,CAACQ,MAFhB;AAGE,IAAA,MAAM,EAAEL,aAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAOD,CAjBc,CAAf","sourcesContent":["import * as React from \"react\";\nimport getNextPendulum, {\n  PendulumVector,\n} from \"../../../Services/DoublePendulum/DoublePendulum.service\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nexport interface PendulumPosition {\n  x1: number;\n  y1: number;\n  x2: number;\n  y2: number;\n}\n\nexport interface CanvasInfo {\n  width: number;\n  height: number;\n}\n\ninterface Props {\n  pendulumsInitialState: PendulumVector[];\n  /**\n   * Width of the canvas\n   */\n  width: number;\n  /**\n   * Height of the canvas\n   */\n  height: number;\n  /**\n   * Function which draws the pendulums onto the canvas\n   */\n  renderPendulums: (\n    pendulums: PendulumPosition[],\n    ctx: CanvasRenderingContext2D,\n    canvasInfo: CanvasInfo\n  ) => any;\n}\n\nconst getPendulumCoordinates = (pendulum: PendulumVector): PendulumPosition => {\n  // Get coordinates of lower mass.\n\n  const aAngle = pendulum.get(\"aAngle\") || 0;\n  const aLength = pendulum.get(\"aLength\") || 0;\n  const bAngle = pendulum.get(\"bAngle\") || 0;\n  const bLength = pendulum.get(\"bLength\") || 0;\n\n  const x1 = Math.sin(aAngle) * aLength;\n  const y1 = Math.cos(aAngle) * aLength;\n\n  const x2 = x1 + Math.sin(bAngle) * bLength;\n  const y2 = y1 + Math.cos(bAngle) * bLength;\n\n  return { x1, y1, x2, y2 };\n};\n\n/**\n * Simulates chaotic pendulums utilizing the Runge-Katta algorithm\n */\nexport default React.memo(function DoublePendulums(props: Props) {\n  let pendulums = props.pendulumsInitialState;\n  const drawPendulums = (context: CanvasRenderingContext2D) => {\n    props.renderPendulums(\n      pendulums.map(pendulum => getPendulumCoordinates(pendulum)),\n      context,\n      { width: props.width, height: props.height }\n    );\n    pendulums = pendulums.map(getNextPendulum);\n  };\n  return (\n    <CanvasDrawer\n      width={props.width}\n      height={props.height}\n      artist={drawPendulums}\n    />\n  );\n});\n"]},"metadata":{},"sourceType":"module"}