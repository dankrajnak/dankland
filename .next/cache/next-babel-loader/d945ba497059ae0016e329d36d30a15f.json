{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport { makePendulum } from \"../../../Services/DoublePendulum/DoublePendulum.service\";\nimport DoublePendulums from \"./DoublePendulums\";\nconst pendulums = [];\n\nfor (let i = 0; i < 10; i++) {\n  pendulums.push(makePendulum());\n}\n\nconst renderPendulums = (pendulums, ctx, info) => {\n  ctx.clearRect(0, 0, info.width, info.height);\n  pendulums = pendulums.map(p => _objectSpread({}, p, {\n    x1: p.x1 + info.width / 2,\n    y1: p.y1 + info.height / 2,\n    x2: p.x2 + info.width / 2,\n    y2: p.y2 + info.height / 2\n  }));\n  pendulums.forEach(p => {\n    ctx.beginPath();\n    ctx.strokeStyle = \"#AAA\";\n    ctx.ellipse(p.x2, p.y2, 1, 1, 0, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.closePath();\n  }); // Draw lines between pendulums\n\n  ctx.beginPath();\n  ctx.strokeStyle = \"#333\";\n  ctx.moveTo(pendulums[0].x1, pendulums[0].y1);\n\n  for (let i = 1; i < pendulums.length; i++) {\n    ctx.lineTo(pendulums[i].x1, pendulums[i].y1);\n  }\n\n  ctx.lineTo(pendulums[0].x1, pendulums[0].y1);\n  ctx.stroke();\n};\n\nconst TheCoolestOne = props => __jsx(DoublePendulums, {\n  width: props.width,\n  height: props.height,\n  pendulumsInitialState: pendulums,\n  renderPendulums: renderPendulums\n});\n\nexport default TheCoolestOne;","map":null,"metadata":{},"sourceType":"module"}