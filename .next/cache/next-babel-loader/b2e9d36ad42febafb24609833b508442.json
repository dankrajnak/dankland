{"ast":null,"code":"export default class TypeWriterService {\n  static getMistakeCharacter(character) {\n    const keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n    const uppercase = character.toUpperCase() === character;\n    const isLetter = \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n    if (isLetter) {\n      /*With a 90% chance, if the character is uppercase, make the\n        mistake character the lowercase version of the uppercase.\n        If it's lowercase, reverse the probability.*/\n      const chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n\n      if (Math.random() <= chanceOfCaseMistake) {\n        return uppercase ? character.toLowerCase() : character.toUpperCase();\n      } //Otherwise make a big finger mistake\n\n\n      keyboard.forEach(keyRow => {\n        const index = keyRow.indexOf(character.toLowerCase());\n\n        if (index !== -1) {\n          switch (index) {\n            case 0:\n              return keyRow[1];\n\n            case keyRow.length - 1:\n              return keyRow.length - 2;\n\n            default:\n              return Math.random() <= 0.5 ? keyRow[index - 1] : keyRow[index + 1];\n          }\n        }\n      });\n    } //Handle special characters\n    //TODO: this doesn't handle ' ' (space) very well... or at all.\n\n\n    const specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n    const specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n    for (let i = 0; i < specialCharactersShift.length; i++) {\n      const shiftedIndex = specialCharactersShift[i].indexOf(character);\n\n      if (shiftedIndex !== -1) {\n        //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.9) {\n          return specialCharacters[i][shiftedIndex];\n        }\n\n        switch (shiftedIndex) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n          default:\n            return Math.random() <= 0.5 ? specialCharactersShift[i][shiftedIndex - 1] : specialCharactersShift[i][shiftedIndex + 1];\n        }\n      }\n    }\n\n    for (let i = 0; i < specialCharacters.length; i++) {\n      const index = specialCharactersShift[i].indexOf(character);\n\n      if (index !== -1) {\n        //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.1) {\n          return specialCharactersShift[i][index];\n        }\n\n        switch (index) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n          default:\n            return Math.random() <= 0.5 ? specialCharactersShift[i][index - 1] : specialCharactersShift[i][index + 1];\n        }\n      }\n    } //As a default, just return the given character.\n\n\n    return character;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}