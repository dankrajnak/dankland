{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport useSafeWindow from \"./useSafeWindow\";\n/**\n * Returns how far the window is currently scrolled in either the vertical\n * or horizontal direction.\n * @param {boolean} [vertical=true]\n */\n\nvar useScrollAmount = function useScrollAmount() {\n  var vertical = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n  var _useSafeWindow = useSafeWindow(),\n      _useSafeWindow2 = _slicedToArray(_useSafeWindow, 1),\n      window = _useSafeWindow2[0];\n\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      scrollAmount = _React$useState2[0],\n      setScrollAmount = _React$useState2[1];\n\n  React.useEffect(function () {\n    var throttledFunc = throttle(function () {\n      return window && setScrollAmount(vertical ? window.scrollY : window.scrollX);\n    }, 30);\n    var wheelListener = window && window.addEventListener(\"scroll\", throttledFunc);\n    return function () {\n      window && wheelListener && window.removeEventListener(\"scroll\", wheelListener);\n    };\n  }, [vertical, window]);\n  return scrollAmount;\n};\n\nexport default useScrollAmount;","map":null,"metadata":{},"sourceType":"module"}