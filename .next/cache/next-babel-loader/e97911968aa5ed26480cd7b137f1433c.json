{"ast":null,"code":"import { RungeKutta } from \"../RungeKutta/RungeKutta.service\";\nvar sigma = 10;\nvar rho = 28;\nvar beta = -8 / 3;\nvar deltaTime = 0.005;\n\nvar rungeKuttaFunction = function rungeKuttaFunction(p) {\n  var x = p.get(\"x\") || 0;\n  var y = p.get(\"y\") || 0;\n  var z = p.get(\"z\") || 0;\n  return p.set(\"x\", sigma * (y - x)).set(\"y\", rho * x - y - x * z).set(\"z\", beta * z + x * y);\n};\n\nvar rungeKuttaCalculator = RungeKutta(rungeKuttaFunction);\n/**\n * Calculates the next value in a lorenz strange attractor using\n * Runge Katta approximation given sigma of 10, rho of 28,\n * beta of -8/3 with a delta time of .005.\n * @param {Position} p previous position\n */\n\nvar getNextPosition = function getNextPosition(p) {\n  return rungeKuttaCalculator(p, deltaTime);\n};\n\nexport default getNextPosition;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/StrangeAttractor/StrangeAttractor.service.ts"],"names":["RungeKutta","sigma","rho","beta","deltaTime","rungeKuttaFunction","p","x","get","y","z","set","rungeKuttaCalculator","getNextPosition"],"mappings":"AACA,SAASA,UAAT,QAA2B,kCAA3B;AAIA,IAAMC,KAAK,GAAG,EAAd;AACA,IAAMC,GAAG,GAAG,EAAZ;AACA,IAAMC,IAAI,GAAG,CAAC,CAAD,GAAK,CAAlB;AAEA,IAAMC,SAAS,GAAG,KAAlB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,CAAD,EAA2B;AACpD,MAAMC,CAAC,GAAGD,CAAC,CAACE,GAAF,CAAM,GAAN,KAAc,CAAxB;AACA,MAAMC,CAAC,GAAGH,CAAC,CAACE,GAAF,CAAM,GAAN,KAAc,CAAxB;AACA,MAAME,CAAC,GAAGJ,CAAC,CAACE,GAAF,CAAM,GAAN,KAAc,CAAxB;AACA,SAAOF,CAAC,CACLK,GADI,CACA,GADA,EACKV,KAAK,IAAIQ,CAAC,GAAGF,CAAR,CADV,EAEJI,GAFI,CAEA,GAFA,EAEKT,GAAG,GAAGK,CAAN,GAAUE,CAAV,GAAcF,CAAC,GAAGG,CAFvB,EAGJC,GAHI,CAGA,GAHA,EAGKR,IAAI,GAAGO,CAAP,GAAWH,CAAC,GAAGE,CAHpB,CAAP;AAID,CARD;;AAUA,IAAMG,oBAAoB,GAAGZ,UAAU,CAACK,kBAAD,CAAvC;AAEA;;;;;;;AAMA,IAAMQ,eAAe,GAAG,SAAlBA,eAAkB,CAACP,CAAD;AAAA,SACtBM,oBAAoB,CAACN,CAAD,EAAIF,SAAJ,CADE;AAAA,CAAxB;;AAGA,eAAeS,eAAf","sourcesContent":["import { Map } from \"immutable\";\nimport { RungeKutta } from \"../RungeKutta/RungeKutta.service\";\n\nexport type Position = Map<\"x\" | \"y\" | \"z\", number>;\n\nconst sigma = 10;\nconst rho = 28;\nconst beta = -8 / 3;\n\nconst deltaTime = 0.005;\n\nconst rungeKuttaFunction = (p: Position): Position => {\n  const x = p.get(\"x\") || 0;\n  const y = p.get(\"y\") || 0;\n  const z = p.get(\"z\") || 0;\n  return p\n    .set(\"x\", sigma * (y - x))\n    .set(\"y\", rho * x - y - x * z)\n    .set(\"z\", beta * z + x * y);\n};\n\nconst rungeKuttaCalculator = RungeKutta(rungeKuttaFunction);\n\n/**\n * Calculates the next value in a lorenz strange attractor using\n * Runge Katta approximation given sigma of 10, rho of 28,\n * beta of -8/3 with a delta time of .005.\n * @param {Position} p previous position\n */\nconst getNextPosition = (p: Position): Position =>\n  rungeKuttaCalculator(p, deltaTime);\n\nexport default getNextPosition;\n"]},"metadata":{},"sourceType":"module"}