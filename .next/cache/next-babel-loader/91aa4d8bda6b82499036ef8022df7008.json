{"ast":null,"code":"const EasingFunctions = {\n  // no easing, no acceleration\n  linear: t => t,\n  // accelerating from zero velocity\n  easeInQuad: t => t * t,\n  // decelerating to zero velocity\n  easeOutQuad: t => t * (2 - t),\n  // acceleration until halfway, then deceleration\n  easeInOutQuad: t => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t,\n  // accelerating from zero velocity\n  easeInCubic: t => t * t * t,\n  // decelerating to zero velocity\n  easeOutCubic: t => --t * t * t + 1,\n  // acceleration until halfway, then deceleration\n  easeInOutCubic: t => t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  // accelerating from zero velocity\n  easeInQuart: t => t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuart: t => 1 - --t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: t => t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  // accelerating from zero velocity\n  easeInQuint: t => t * t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuint: t => 1 + --t * t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuint: t => t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t\n};\nexport default EasingFunctions;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/Ease/Ease.service.ts"],"names":["EasingFunctions","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint"],"mappings":"AAAA,MAAMA,eAAe,GAAG;AACtB;AACAC,EAAAA,MAAM,EAAGC,CAAD,IAAeA,CAFD;AAGtB;AACAC,EAAAA,UAAU,EAAGD,CAAD,IAAeA,CAAC,GAAGA,CAJT;AAKtB;AACAE,EAAAA,WAAW,EAAGF,CAAD,IAAeA,CAAC,IAAI,IAAIA,CAAR,CANP;AAOtB;AACAG,EAAAA,aAAa,EAAGH,CAAD,IAAgBA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAlB,GAAsB,CAAC,CAAD,GAAK,CAAC,IAAI,IAAIA,CAAT,IAAcA,CARlD;AAStB;AACAI,EAAAA,WAAW,EAAGJ,CAAD,IAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAVd;AAWtB;AACAK,EAAAA,YAAY,EAAGL,CAAD,IAAe,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAc,CAZrB;AAatB;AACAM,EAAAA,cAAc,EAAGN,CAAD,IACdA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAR,GAAYA,CAAtB,GAA0B,CAACA,CAAC,GAAG,CAAL,KAAW,IAAIA,CAAJ,GAAQ,CAAnB,KAAyB,IAAIA,CAAJ,GAAQ,CAAjC,IAAsC,CAf5C;AAgBtB;AACAO,EAAAA,WAAW,EAAGP,CAAD,IAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYA,CAjBlB;AAkBtB;AACAQ,EAAAA,YAAY,EAAGR,CAAD,IAAe,IAAI,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAcA,CAnBzB;AAoBtB;AACAS,EAAAA,cAAc,EAAGT,CAAD,IACdA,CAAC,GAAG,GAAJ,GAAU,IAAIA,CAAJ,GAAQA,CAAR,GAAYA,CAAZ,GAAgBA,CAA1B,GAA8B,IAAI,IAAI,EAAEA,CAAN,GAAUA,CAAV,GAAcA,CAAd,GAAkBA,CAtBhC;AAuBtB;AACAU,EAAAA,WAAW,EAAGV,CAAD,IAAeA,CAAC,GAAGA,CAAJ,GAAQA,CAAR,GAAYA,CAAZ,GAAgBA,CAxBtB;AAyBtB;AACAW,EAAAA,YAAY,EAAGX,CAAD,IAAe,IAAI,EAAEA,CAAF,GAAMA,CAAN,GAAUA,CAAV,GAAcA,CAAd,GAAkBA,CA1B7B;AA2BtB;AACAY,EAAAA,cAAc,EAAGZ,CAAD,IACdA,CAAC,GAAG,GAAJ,GAAU,KAAKA,CAAL,GAASA,CAAT,GAAaA,CAAb,GAAiBA,CAAjB,GAAqBA,CAA/B,GAAmC,IAAI,KAAK,EAAEA,CAAP,GAAWA,CAAX,GAAeA,CAAf,GAAmBA,CAAnB,GAAuBA;AA7B1C,CAAxB;AAgCA,eAAeF,eAAf","sourcesContent":["const EasingFunctions = {\n  // no easing, no acceleration\n  linear: (t: number) => t,\n  // accelerating from zero velocity\n  easeInQuad: (t: number) => t * t,\n  // decelerating to zero velocity\n  easeOutQuad: (t: number) => t * (2 - t),\n  // acceleration until halfway, then deceleration\n  easeInOutQuad: (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n  // accelerating from zero velocity\n  easeInCubic: (t: number) => t * t * t,\n  // decelerating to zero velocity\n  easeOutCubic: (t: number) => --t * t * t + 1,\n  // acceleration until halfway, then deceleration\n  easeInOutCubic: (t: number) =>\n    t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n  // accelerating from zero velocity\n  easeInQuart: (t: number) => t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuart: (t: number) => 1 - --t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuart: (t: number) =>\n    t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t,\n  // accelerating from zero velocity\n  easeInQuint: (t: number) => t * t * t * t * t,\n  // decelerating to zero velocity\n  easeOutQuint: (t: number) => 1 + --t * t * t * t * t,\n  // acceleration until halfway, then deceleration\n  easeInOutQuint: (t: number) =>\n    t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t,\n};\n\nexport default EasingFunctions;\n"]},"metadata":{},"sourceType":"module"}