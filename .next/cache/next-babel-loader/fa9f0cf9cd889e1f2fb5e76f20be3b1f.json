{"ast":null,"code":"import * as THREE from \"three\";\nvar renderer;\nvar canvas;\nvar eventListener; //eslint-disable-line\n\nvar animationFrame;\n\nfunction render(pointLights, scene, camera) {\n  var time = performance.now() * 0.001;\n  pointLights.forEach(function (light) {\n    light.position.x = Math.sin(time * 0.6) * 9;\n    light.position.y = Math.sin(time * 0.7) * 9 + 8;\n    light.position.z = light.position.z * 1.002 - 0.01;\n    light.rotation.x = time;\n    light.rotation.z = time;\n    time += 100;\n  });\n\n  if (pointLights[0] && pointLights[0].position.z < -1000) {\n    //@ts-ignore\n    scene.remove(pointLights.shift());\n  }\n\n  renderer.render(scene, camera);\n}\n\nvar generateTexture = function generateTexture() {\n  var c = document.createElement(\"canvas\");\n  c.width = 2;\n  c.height = 2;\n  var context = c.getContext(\"2d\");\n\n  if (context) {\n    context.fillStyle = \"white\";\n    context.fillRect(0, 1, 2, 1);\n  }\n\n  return c;\n};\n\nfunction animate(pointLights, scene, camera) {\n  animationFrame = requestAnimationFrame(function () {\n    return animate(pointLights, scene, camera);\n  });\n  render(pointLights, scene, camera);\n}\n/**\n * Creates a Light sphere with the given color\n * @param {number} color - hex value of the light color\n */\n\n\nvar createLight = function createLight(color) {\n  var intensity = 1.5; // Set up point light\n\n  var pointLight = new THREE.PointLight(color, intensity, 20);\n  pointLight.castShadow = true;\n  pointLight.shadow.camera.near = 1;\n  pointLight.shadow.camera.far = 60;\n  pointLight.shadow.bias = -0.005; // reduces self-shadowing on double-sided objects\n  //Create sphere to represent the pointlight\n\n  var lightSphereGeometry = new THREE.SphereBufferGeometry(0.3, 12, 6);\n  var lightSpherematerial = new THREE.MeshBasicMaterial({\n    color: color\n  });\n  lightSpherematerial.color.multiplyScalar(intensity);\n  var lightSphere = new THREE.Mesh(lightSphereGeometry, lightSpherematerial);\n  pointLight.add(lightSphere); //Create sphere wrapper for pointlight\n\n  var texture = new THREE.CanvasTexture(generateTexture());\n  texture.magFilter = THREE.NearestFilter;\n  texture.wrapT = THREE.RepeatWrapping;\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.repeat.set(0.5, 3.5);\n  var wrapperGeometry = new THREE.SphereBufferGeometry(2, 32, 8);\n  var wrapperMaterial = new THREE.MeshPhongMaterial({\n    side: THREE.DoubleSide,\n    alphaMap: texture,\n    alphaTest: 0.5\n  });\n  var sphere = new THREE.Mesh(wrapperGeometry, wrapperMaterial);\n  sphere.castShadow = true;\n  sphere.receiveShadow = true;\n  pointLight.add(sphere); // custom distance material\n\n  var distanceMaterial = new THREE.MeshDistanceMaterial({\n    // @ts-ignore\n    alphaMap: wrapperMaterial.alphaMap,\n    alphaTest: wrapperMaterial.alphaTest\n  }); // @ts-ignore\n\n  sphere.customDistanceMaterial = distanceMaterial;\n  return pointLight;\n};\n\nexport function start(container) {\n  var camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 1, 1000);\n  camera.position.set(0, 10, 40);\n  var scene = new THREE.Scene();\n  scene.add(new THREE.AmbientLight(0x111122));\n  var pointLights = [];\n  [0xee6666, 0x333388].forEach(function (color) {\n    var newLight = createLight(color);\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n  var geometry = new THREE.BoxBufferGeometry(30, 30, 1000);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xa0adaf,\n    shininess: 10,\n    specular: 0x111111,\n    side: THREE.BackSide\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.position.y = 10;\n  mesh.receiveShadow = true;\n  scene.add(mesh);\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(container.clientWidth, container.clientHeight);\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.BasicShadowMap;\n  canvas = container.appendChild(renderer.domElement);\n  eventListener = window.addEventListener(\"click\", function () {\n    var newLight = createLight([0xee6666, 0x333388][Math.floor(Math.random() * 2)]);\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n  window.addEventListener(\"mousemove\", function (event) {\n    camera.position.x = (1 - event.clientX / window.innerWidth) * 20 - 10;\n    camera.position.y = event.clientY / window.innerHeight * 20;\n    camera.lookAt(0, 10, -30);\n  });\n  animate(pointLights, scene, camera);\n}\nexport function stop() {\n  cancelAnimationFrame(animationFrame);\n  canvas.remove();\n  window.removeEventListener(\"click\", eventListener);\n}","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/Hallway/Hallway.service.ts"],"names":["THREE","renderer","canvas","eventListener","animationFrame","render","pointLights","scene","camera","time","performance","now","forEach","light","position","x","Math","sin","y","z","rotation","remove","shift","generateTexture","c","document","createElement","width","height","context","getContext","fillStyle","fillRect","animate","requestAnimationFrame","createLight","color","intensity","pointLight","PointLight","castShadow","shadow","near","far","bias","lightSphereGeometry","SphereBufferGeometry","lightSpherematerial","MeshBasicMaterial","multiplyScalar","lightSphere","Mesh","add","texture","CanvasTexture","magFilter","NearestFilter","wrapT","RepeatWrapping","wrapS","repeat","set","wrapperGeometry","wrapperMaterial","MeshPhongMaterial","side","DoubleSide","alphaMap","alphaTest","sphere","receiveShadow","distanceMaterial","MeshDistanceMaterial","customDistanceMaterial","start","container","PerspectiveCamera","clientWidth","clientHeight","Scene","AmbientLight","newLight","push","geometry","BoxBufferGeometry","material","shininess","specular","BackSide","mesh","WebGLRenderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","shadowMap","enabled","type","BasicShadowMap","appendChild","domElement","addEventListener","floor","random","event","clientX","innerWidth","clientY","innerHeight","lookAt","stop","cancelAnimationFrame","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,IAAIC,QAAJ;AACA,IAAIC,MAAJ;AAEA,IAAIC,aAAJ,C,CAAwB;;AACxB,IAAIC,cAAJ;;AAEA,SAASC,MAAT,CACEC,WADF,EAEEC,KAFF,EAGEC,MAHF,EAIE;AACA,MAAIC,IAAI,GAAGC,WAAW,CAACC,GAAZ,KAAoB,KAA/B;AACAL,EAAAA,WAAW,CAACM,OAAZ,CAAoB,UAAAC,KAAK,EAAI;AAC3BA,IAAAA,KAAK,CAACC,QAAN,CAAeC,CAAf,GAAmBC,IAAI,CAACC,GAAL,CAASR,IAAI,GAAG,GAAhB,IAAuB,CAA1C;AACAI,IAAAA,KAAK,CAACC,QAAN,CAAeI,CAAf,GAAmBF,IAAI,CAACC,GAAL,CAASR,IAAI,GAAG,GAAhB,IAAuB,CAAvB,GAA2B,CAA9C;AACAI,IAAAA,KAAK,CAACC,QAAN,CAAeK,CAAf,GAAmBN,KAAK,CAACC,QAAN,CAAeK,CAAf,GAAmB,KAAnB,GAA2B,IAA9C;AACAN,IAAAA,KAAK,CAACO,QAAN,CAAeL,CAAf,GAAmBN,IAAnB;AACAI,IAAAA,KAAK,CAACO,QAAN,CAAeD,CAAf,GAAmBV,IAAnB;AACAA,IAAAA,IAAI,IAAI,GAAR;AACD,GAPD;;AAQA,MAAIH,WAAW,CAAC,CAAD,CAAX,IAAkBA,WAAW,CAAC,CAAD,CAAX,CAAeQ,QAAf,CAAwBK,CAAxB,GAA4B,CAAC,IAAnD,EAAyD;AACvD;AACAZ,IAAAA,KAAK,CAACc,MAAN,CAAaf,WAAW,CAACgB,KAAZ,EAAb;AACD;;AACDrB,EAAAA,QAAQ,CAACI,MAAT,CAAgBE,KAAhB,EAAuBC,MAAvB;AACD;;AAED,IAAMe,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B,MAAIC,CAAC,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAR;AACAF,EAAAA,CAAC,CAACG,KAAF,GAAU,CAAV;AACAH,EAAAA,CAAC,CAACI,MAAF,GAAW,CAAX;AACA,MAAIC,OAAO,GAAGL,CAAC,CAACM,UAAF,CAAa,IAAb,CAAd;;AACA,MAAID,OAAJ,EAAa;AACXA,IAAAA,OAAO,CAACE,SAAR,GAAoB,OAApB;AACAF,IAAAA,OAAO,CAACG,QAAR,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACD;;AACD,SAAOR,CAAP;AACD,CAVD;;AAYA,SAASS,OAAT,CACE3B,WADF,EAEEC,KAFF,EAGEC,MAHF,EAIE;AACAJ,EAAAA,cAAc,GAAG8B,qBAAqB,CAAC;AAAA,WACrCD,OAAO,CAAC3B,WAAD,EAAcC,KAAd,EAAqBC,MAArB,CAD8B;AAAA,GAAD,CAAtC;AAGAH,EAAAA,MAAM,CAACC,WAAD,EAAcC,KAAd,EAAqBC,MAArB,CAAN;AACD;AAED;;;;;;AAIA,IAAM2B,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAqC;AACvD,MAAMC,SAAS,GAAG,GAAlB,CADuD,CAGvD;;AACA,MAAMC,UAAU,GAAG,IAAItC,KAAK,CAACuC,UAAV,CAAqBH,KAArB,EAA4BC,SAA5B,EAAuC,EAAvC,CAAnB;AACAC,EAAAA,UAAU,CAACE,UAAX,GAAwB,IAAxB;AACAF,EAAAA,UAAU,CAACG,MAAX,CAAkBjC,MAAlB,CAAyBkC,IAAzB,GAAgC,CAAhC;AACAJ,EAAAA,UAAU,CAACG,MAAX,CAAkBjC,MAAlB,CAAyBmC,GAAzB,GAA+B,EAA/B;AACAL,EAAAA,UAAU,CAACG,MAAX,CAAkBG,IAAlB,GAAyB,CAAC,KAA1B,CARuD,CAQtB;AAEjC;;AACA,MAAMC,mBAAmB,GAAG,IAAI7C,KAAK,CAAC8C,oBAAV,CAA+B,GAA/B,EAAoC,EAApC,EAAwC,CAAxC,CAA5B;AACA,MAAMC,mBAAmB,GAAG,IAAI/C,KAAK,CAACgD,iBAAV,CAA4B;AAAEZ,IAAAA,KAAK,EAAEA;AAAT,GAA5B,CAA5B;AACAW,EAAAA,mBAAmB,CAACX,KAApB,CAA0Ba,cAA1B,CAAyCZ,SAAzC;AACA,MAAMa,WAAW,GAAG,IAAIlD,KAAK,CAACmD,IAAV,CAAeN,mBAAf,EAAoCE,mBAApC,CAApB;AACAT,EAAAA,UAAU,CAACc,GAAX,CAAeF,WAAf,EAfuD,CAiBvD;;AACA,MAAMG,OAAO,GAAG,IAAIrD,KAAK,CAACsD,aAAV,CAAwB/B,eAAe,EAAvC,CAAhB;AACA8B,EAAAA,OAAO,CAACE,SAAR,GAAoBvD,KAAK,CAACwD,aAA1B;AACAH,EAAAA,OAAO,CAACI,KAAR,GAAgBzD,KAAK,CAAC0D,cAAtB;AACAL,EAAAA,OAAO,CAACM,KAAR,GAAgB3D,KAAK,CAAC0D,cAAtB;AACAL,EAAAA,OAAO,CAACO,MAAR,CAAeC,GAAf,CAAmB,GAAnB,EAAwB,GAAxB;AACA,MAAMC,eAAe,GAAG,IAAI9D,KAAK,CAAC8C,oBAAV,CAA+B,CAA/B,EAAkC,EAAlC,EAAsC,CAAtC,CAAxB;AACA,MAAMiB,eAAe,GAAG,IAAI/D,KAAK,CAACgE,iBAAV,CAA4B;AAClDC,IAAAA,IAAI,EAAEjE,KAAK,CAACkE,UADsC;AAElDC,IAAAA,QAAQ,EAAEd,OAFwC;AAGlDe,IAAAA,SAAS,EAAE;AAHuC,GAA5B,CAAxB;AAMA,MAAMC,MAAM,GAAG,IAAIrE,KAAK,CAACmD,IAAV,CAAeW,eAAf,EAAgCC,eAAhC,CAAf;AACAM,EAAAA,MAAM,CAAC7B,UAAP,GAAoB,IAApB;AACA6B,EAAAA,MAAM,CAACC,aAAP,GAAuB,IAAvB;AACAhC,EAAAA,UAAU,CAACc,GAAX,CAAeiB,MAAf,EAjCuD,CAkCvD;;AAEA,MAAIE,gBAAgB,GAAG,IAAIvE,KAAK,CAACwE,oBAAV,CAA+B;AACpD;AACAL,IAAAA,QAAQ,EAAEJ,eAAe,CAACI,QAF0B;AAGpDC,IAAAA,SAAS,EAAEL,eAAe,CAACK;AAHyB,GAA/B,CAAvB,CApCuD,CAyCvD;;AACAC,EAAAA,MAAM,CAACI,sBAAP,GAAgCF,gBAAhC;AACA,SAAOjC,UAAP;AACD,CA5CD;;AA8CA,OAAO,SAASoC,KAAT,CAAeC,SAAf,EAA0C;AAC/C,MAAMnE,MAAM,GAAG,IAAIR,KAAK,CAAC4E,iBAAV,CACb,EADa,EAEbD,SAAS,CAACE,WAAV,GAAwBF,SAAS,CAACG,YAFrB,EAGb,CAHa,EAIb,IAJa,CAAf;AAMAtE,EAAAA,MAAM,CAACM,QAAP,CAAgB+C,GAAhB,CAAoB,CAApB,EAAuB,EAAvB,EAA2B,EAA3B;AACA,MAAMtD,KAAK,GAAG,IAAIP,KAAK,CAAC+E,KAAV,EAAd;AACAxE,EAAAA,KAAK,CAAC6C,GAAN,CAAU,IAAIpD,KAAK,CAACgF,YAAV,CAAuB,QAAvB,CAAV;AAEA,MAAM1E,WAA+B,GAAG,EAAxC;AACA,GAAC,QAAD,EAAW,QAAX,EAAqBM,OAArB,CAA6B,UAAAwB,KAAK,EAAI;AACpC,QAAM6C,QAAQ,GAAG9C,WAAW,CAACC,KAAD,CAA5B;AACA9B,IAAAA,WAAW,CAAC4E,IAAZ,CAAiBD,QAAjB;AACA1E,IAAAA,KAAK,CAAC6C,GAAN,CAAU6B,QAAV;AACD,GAJD;AAMA,MAAIE,QAAQ,GAAG,IAAInF,KAAK,CAACoF,iBAAV,CAA4B,EAA5B,EAAgC,EAAhC,EAAoC,IAApC,CAAf;AACA,MAAIC,QAAQ,GAAG,IAAIrF,KAAK,CAACgE,iBAAV,CAA4B;AACzC5B,IAAAA,KAAK,EAAE,QADkC;AAEzCkD,IAAAA,SAAS,EAAE,EAF8B;AAGzCC,IAAAA,QAAQ,EAAE,QAH+B;AAIzCtB,IAAAA,IAAI,EAAEjE,KAAK,CAACwF;AAJ6B,GAA5B,CAAf;AAMA,MAAIC,IAAI,GAAG,IAAIzF,KAAK,CAACmD,IAAV,CAAegC,QAAf,EAAyBE,QAAzB,CAAX;AACAI,EAAAA,IAAI,CAAC3E,QAAL,CAAcI,CAAd,GAAkB,EAAlB;AACAuE,EAAAA,IAAI,CAACnB,aAAL,GAAqB,IAArB;AACA/D,EAAAA,KAAK,CAAC6C,GAAN,CAAUqC,IAAV;AAEAxF,EAAAA,QAAQ,GAAG,IAAID,KAAK,CAAC0F,aAAV,CAAwB;AAAEC,IAAAA,SAAS,EAAE;AAAb,GAAxB,CAAX;AACA1F,EAAAA,QAAQ,CAAC2F,aAAT,CAAuBC,MAAM,CAACC,gBAA9B;AACA7F,EAAAA,QAAQ,CAAC8F,OAAT,CAAiBpB,SAAS,CAACE,WAA3B,EAAwCF,SAAS,CAACG,YAAlD;AACA7E,EAAAA,QAAQ,CAAC+F,SAAT,CAAmBC,OAAnB,GAA6B,IAA7B;AACAhG,EAAAA,QAAQ,CAAC+F,SAAT,CAAmBE,IAAnB,GAA0BlG,KAAK,CAACmG,cAAhC;AACAjG,EAAAA,MAAM,GAAGyE,SAAS,CAACyB,WAAV,CAAsBnG,QAAQ,CAACoG,UAA/B,CAAT;AAEAlG,EAAAA,aAAa,GAAG0F,MAAM,CAACS,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACrD,QAAMrB,QAAQ,GAAG9C,WAAW,CAC1B,CAAC,QAAD,EAAW,QAAX,EAAqBnB,IAAI,CAACuF,KAAL,CAAWvF,IAAI,CAACwF,MAAL,KAAgB,CAA3B,CAArB,CAD0B,CAA5B;AAGAlG,IAAAA,WAAW,CAAC4E,IAAZ,CAAiBD,QAAjB;AACA1E,IAAAA,KAAK,CAAC6C,GAAN,CAAU6B,QAAV;AACD,GANe,CAAhB;AAOAY,EAAAA,MAAM,CAACS,gBAAP,CAAwB,WAAxB,EAAqC,UAAAG,KAAK,EAAI;AAC5CjG,IAAAA,MAAM,CAACM,QAAP,CAAgBC,CAAhB,GAAoB,CAAC,IAAI0F,KAAK,CAACC,OAAN,GAAgBb,MAAM,CAACc,UAA5B,IAA0C,EAA1C,GAA+C,EAAnE;AACAnG,IAAAA,MAAM,CAACM,QAAP,CAAgBI,CAAhB,GAAqBuF,KAAK,CAACG,OAAN,GAAgBf,MAAM,CAACgB,WAAxB,GAAuC,EAA3D;AACArG,IAAAA,MAAM,CAACsG,MAAP,CAAc,CAAd,EAAiB,EAAjB,EAAqB,CAAC,EAAtB;AACD,GAJD;AAMA7E,EAAAA,OAAO,CAAC3B,WAAD,EAAcC,KAAd,EAAqBC,MAArB,CAAP;AACD;AAED,OAAO,SAASuG,IAAT,GAAgB;AACrBC,EAAAA,oBAAoB,CAAC5G,cAAD,CAApB;AACAF,EAAAA,MAAM,CAACmB,MAAP;AACAwE,EAAAA,MAAM,CAACoB,mBAAP,CAA2B,OAA3B,EAAoC9G,aAApC;AACD","sourcesContent":["import * as THREE from \"three\";\n\nlet renderer: THREE.WebGLRenderer;\nlet canvas: HTMLCanvasElement;\n\nlet eventListener: any; //eslint-disable-line\nlet animationFrame: number;\n\nfunction render(\n  pointLights: THREE.PointLight[],\n  scene: THREE.Scene,\n  camera: THREE.Camera\n) {\n  let time = performance.now() * 0.001;\n  pointLights.forEach(light => {\n    light.position.x = Math.sin(time * 0.6) * 9;\n    light.position.y = Math.sin(time * 0.7) * 9 + 8;\n    light.position.z = light.position.z * 1.002 - 0.01;\n    light.rotation.x = time;\n    light.rotation.z = time;\n    time += 100;\n  });\n  if (pointLights[0] && pointLights[0].position.z < -1000) {\n    //@ts-ignore\n    scene.remove(pointLights.shift());\n  }\n  renderer.render(scene, camera);\n}\n\nconst generateTexture = () => {\n  let c = document.createElement(\"canvas\");\n  c.width = 2;\n  c.height = 2;\n  var context = c.getContext(\"2d\");\n  if (context) {\n    context.fillStyle = \"white\";\n    context.fillRect(0, 1, 2, 1);\n  }\n  return c;\n};\n\nfunction animate(\n  pointLights: THREE.PointLight[],\n  scene: THREE.Scene,\n  camera: THREE.Camera\n) {\n  animationFrame = requestAnimationFrame(() =>\n    animate(pointLights, scene, camera)\n  );\n  render(pointLights, scene, camera);\n}\n\n/**\n * Creates a Light sphere with the given color\n * @param {number} color - hex value of the light color\n */\nconst createLight = (color: number): THREE.PointLight => {\n  const intensity = 1.5;\n\n  // Set up point light\n  const pointLight = new THREE.PointLight(color, intensity, 20);\n  pointLight.castShadow = true;\n  pointLight.shadow.camera.near = 1;\n  pointLight.shadow.camera.far = 60;\n  pointLight.shadow.bias = -0.005; // reduces self-shadowing on double-sided objects\n\n  //Create sphere to represent the pointlight\n  const lightSphereGeometry = new THREE.SphereBufferGeometry(0.3, 12, 6);\n  const lightSpherematerial = new THREE.MeshBasicMaterial({ color: color });\n  lightSpherematerial.color.multiplyScalar(intensity);\n  const lightSphere = new THREE.Mesh(lightSphereGeometry, lightSpherematerial);\n  pointLight.add(lightSphere);\n\n  //Create sphere wrapper for pointlight\n  const texture = new THREE.CanvasTexture(generateTexture());\n  texture.magFilter = THREE.NearestFilter;\n  texture.wrapT = THREE.RepeatWrapping;\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.repeat.set(0.5, 3.5);\n  const wrapperGeometry = new THREE.SphereBufferGeometry(2, 32, 8);\n  const wrapperMaterial = new THREE.MeshPhongMaterial({\n    side: THREE.DoubleSide,\n    alphaMap: texture,\n    alphaTest: 0.5,\n  });\n\n  const sphere = new THREE.Mesh(wrapperGeometry, wrapperMaterial);\n  sphere.castShadow = true;\n  sphere.receiveShadow = true;\n  pointLight.add(sphere);\n  // custom distance material\n\n  var distanceMaterial = new THREE.MeshDistanceMaterial({\n    // @ts-ignore\n    alphaMap: wrapperMaterial.alphaMap,\n    alphaTest: wrapperMaterial.alphaTest,\n  });\n  // @ts-ignore\n  sphere.customDistanceMaterial = distanceMaterial;\n  return pointLight;\n};\n\nexport function start(container: HTMLDivElement) {\n  const camera = new THREE.PerspectiveCamera(\n    45,\n    container.clientWidth / container.clientHeight,\n    1,\n    1000\n  );\n  camera.position.set(0, 10, 40);\n  const scene = new THREE.Scene();\n  scene.add(new THREE.AmbientLight(0x111122));\n\n  const pointLights: THREE.PointLight[] = [];\n  [0xee6666, 0x333388].forEach(color => {\n    const newLight = createLight(color);\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n\n  var geometry = new THREE.BoxBufferGeometry(30, 30, 1000);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xa0adaf,\n    shininess: 10,\n    specular: 0x111111,\n    side: THREE.BackSide,\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.position.y = 10;\n  mesh.receiveShadow = true;\n  scene.add(mesh);\n\n  renderer = new THREE.WebGLRenderer({ antialias: true });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(container.clientWidth, container.clientHeight);\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.BasicShadowMap;\n  canvas = container.appendChild(renderer.domElement);\n\n  eventListener = window.addEventListener(\"click\", () => {\n    const newLight = createLight(\n      [0xee6666, 0x333388][Math.floor(Math.random() * 2)]\n    );\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n  window.addEventListener(\"mousemove\", event => {\n    camera.position.x = (1 - event.clientX / window.innerWidth) * 20 - 10;\n    camera.position.y = (event.clientY / window.innerHeight) * 20;\n    camera.lookAt(0, 10, -30);\n  });\n\n  animate(pointLights, scene, camera);\n}\n\nexport function stop() {\n  cancelAnimationFrame(animationFrame);\n  canvas.remove();\n  window.removeEventListener(\"click\", eventListener);\n}\n"]},"metadata":{},"sourceType":"module"}