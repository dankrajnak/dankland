{"ast":null,"code":"import * as THREE from \"three\";\nvar renderer;\nvar canvas;\nvar eventListener; //eslint-disable-line\n\nvar animationFrame;\n\nfunction render(pointLights, scene, camera) {\n  var time = performance.now() * 0.001;\n  pointLights.forEach(function (light) {\n    light.position.x = Math.sin(time * 0.6) * 9;\n    light.position.y = Math.sin(time * 0.7) * 9 + 8;\n    light.position.z = light.position.z * 1.002 - 0.01;\n    light.rotation.x = time;\n    light.rotation.z = time;\n    time += 100;\n  });\n\n  if (pointLights[0] && pointLights[0].position.z < -1000) {\n    //@ts-ignore\n    scene.remove(pointLights.shift());\n  }\n\n  renderer.render(scene, camera);\n}\n\nvar generateTexture = function generateTexture() {\n  var c = document.createElement(\"canvas\");\n  c.width = 2;\n  c.height = 2;\n  var context = c.getContext(\"2d\");\n\n  if (context) {\n    context.fillStyle = \"white\";\n    context.fillRect(0, 1, 2, 1);\n  }\n\n  return c;\n};\n\nfunction animate(pointLights, scene, camera) {\n  animationFrame = requestAnimationFrame(function () {\n    return animate(pointLights, scene, camera);\n  });\n  render(pointLights, scene, camera);\n}\n/**\n * Creates a Light sphere with the given color\n * @param {number} color - hex value of the light color\n */\n\n\nvar createLight = function createLight(color) {\n  var intensity = 1.5; // Set up point light\n\n  var pointLight = new THREE.PointLight(color, intensity, 20);\n  pointLight.castShadow = true;\n  pointLight.shadow.camera.near = 1;\n  pointLight.shadow.camera.far = 60;\n  pointLight.shadow.bias = -0.005; // reduces self-shadowing on double-sided objects\n  //Create sphere to represent the pointlight\n\n  var lightSphereGeometry = new THREE.SphereBufferGeometry(0.3, 12, 6);\n  var lightSpherematerial = new THREE.MeshBasicMaterial({\n    color: color\n  });\n  lightSpherematerial.color.multiplyScalar(intensity);\n  var lightSphere = new THREE.Mesh(lightSphereGeometry, lightSpherematerial);\n  pointLight.add(lightSphere); //Create sphere wrapper for pointlight\n\n  var texture = new THREE.CanvasTexture(generateTexture());\n  texture.magFilter = THREE.NearestFilter;\n  texture.wrapT = THREE.RepeatWrapping;\n  texture.wrapS = THREE.RepeatWrapping;\n  texture.repeat.set(0.5, 3.5);\n  var wrapperGeometry = new THREE.SphereBufferGeometry(2, 32, 8);\n  var wrapperMaterial = new THREE.MeshPhongMaterial({\n    side: THREE.DoubleSide,\n    alphaMap: texture,\n    alphaTest: 0.5\n  });\n  var sphere = new THREE.Mesh(wrapperGeometry, wrapperMaterial);\n  sphere.castShadow = true;\n  sphere.receiveShadow = true;\n  pointLight.add(sphere); // custom distance material\n\n  var distanceMaterial = new THREE.MeshDistanceMaterial({\n    // @ts-ignore\n    alphaMap: wrapperMaterial.alphaMap,\n    alphaTest: wrapperMaterial.alphaTest\n  }); // @ts-ignore\n\n  sphere.customDistanceMaterial = distanceMaterial;\n  return pointLight;\n};\n\nexport function start(container) {\n  var camera = new THREE.PerspectiveCamera(45, container.clientWidth / container.clientHeight, 1, 1000);\n  camera.position.set(0, 10, 40);\n  var scene = new THREE.Scene();\n  scene.add(new THREE.AmbientLight(0x111122));\n  var pointLights = [];\n  [0xee6666, 0x333388].forEach(function (color) {\n    var newLight = createLight(color);\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n  var geometry = new THREE.BoxBufferGeometry(30, 30, 1000);\n  var material = new THREE.MeshPhongMaterial({\n    color: 0xa0adaf,\n    shininess: 10,\n    specular: 0x111111,\n    side: THREE.BackSide\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.position.y = 10;\n  mesh.receiveShadow = true;\n  scene.add(mesh);\n  renderer = new THREE.WebGLRenderer({\n    antialias: true\n  });\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.setSize(container.clientWidth, container.clientHeight);\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.BasicShadowMap;\n  canvas = container.appendChild(renderer.domElement);\n  eventListener = window.addEventListener(\"click\", function () {\n    var newLight = createLight([0xee6666, 0x333388][Math.floor(Math.random() * 2)]);\n    pointLights.push(newLight);\n    scene.add(newLight);\n  });\n  window.addEventListener(\"mousemove\", function (event) {\n    camera.position.x = (1 - event.clientX / window.innerWidth) * 20 - 10;\n    camera.position.y = event.clientY / window.innerHeight * 20;\n    camera.lookAt(0, 10, -30);\n  });\n  animate(pointLights, scene, camera);\n}\nexport function stop() {\n  cancelAnimationFrame(animationFrame);\n  canvas.remove();\n  window.removeEventListener(\"click\", eventListener);\n}","map":null,"metadata":{},"sourceType":"module"}