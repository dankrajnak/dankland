{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/PerspectivePreview.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport PerspectiveSquare from \"../../../Services/PerspectiveSquare/PerspectiveSquare.service\";\nimport OriginalPerspectiveSquareDrawer from \"../../../Services/PerspectiveSquare/Drawers/Original.service\";\nimport Vector2d from \"../../../Domain/Vector/Vector2d\";\nimport Square from \"../../../Domain/Square/Square\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nvar PerspectivePreview = function PerspectivePreview(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  var squares = React.useRef(null);\n  var squareDrawer = React.useRef(null);\n\n  var _useClickHoverWander = useClickHoverWander(width, height),\n      _useClickHoverWander2 = _slicedToArray(_useClickHoverWander, 2),\n      focusPoint = _useClickHoverWander2[0],\n      mouseProps = _useClickHoverWander2[1];\n\n  var initializeCanvas = function initializeCanvas(ctx) {\n    var SQUARE_WIDTH = width / 4; // Create squares\n\n    squares.current = [new PerspectiveSquare(new Square(SQUARE_WIDTH, new Vector2d((width - SQUARE_WIDTH) / 2, (height + SQUARE_WIDTH) / 4)), 50), new PerspectiveSquare(new Square(SQUARE_WIDTH, new Vector2d((width - SQUARE_WIDTH) / 2, 3 * (height + SQUARE_WIDTH) / 4)), 50)]; // Create drawer\n\n    squareDrawer.current = new OriginalPerspectiveSquareDrawer(ctx, {\n      mapper: function mapper(v) {\n        return new Vector2d(v.x, height - v.y);\n      },\n      lineColor: \"#04D9C4\",\n      includeDashes: false\n    });\n  };\n\n  var artist = React.useMemo(function () {\n    return function (ctx) {\n      if (!squareDrawer.current || !squares.current) {\n        return null;\n      }\n\n      ctx.fillStyle = \"#0D0D0D\";\n      ctx.fillRect(0, 0, width, height);\n      squareDrawer.current.draw(squares.current[0].getSquares(new Vector2d(focusPoint.x, height - focusPoint.y)), focusPoint);\n      squareDrawer.current.draw(squares.current[1].getSquares(new Vector2d(focusPoint.x, height - focusPoint.y)), focusPoint);\n    };\n  }, [focusPoint, height, width]);\n  return __jsx(CanvasDrawer, _extends({\n    width: width,\n    height: height,\n    initializeCanvas: initializeCanvas,\n    artist: artist\n  }, mouseProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n};\n\nexport default PerspectivePreview;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/PerspectivePreview.tsx"],"names":["React","PerspectiveSquare","OriginalPerspectiveSquareDrawer","Vector2d","Square","useClickHoverWander","CanvasDrawer","PerspectivePreview","width","height","squares","useRef","squareDrawer","focusPoint","mouseProps","initializeCanvas","ctx","SQUARE_WIDTH","current","mapper","v","x","y","lineColor","includeDashes","artist","useMemo","fillStyle","fillRect","draw","getSquares"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,iBAAP,MAA8B,+DAA9B;AACA,OAAOC,+BAAP,MAA4C,8DAA5C;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAQA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAA8B;AAAA,MAA3BC,KAA2B,QAA3BA,KAA2B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AACvD,MAAMC,OAAO,GAAGV,KAAK,CAACW,MAAN,CACd,IADc,CAAhB;AAGA,MAAMC,YAAY,GAAGZ,KAAK,CAACW,MAAN,CAA6C,IAA7C,CAArB;;AAJuD,6BAMtBN,mBAAmB,CAACG,KAAD,EAAQC,MAAR,CANG;AAAA;AAAA,MAMhDI,UANgD;AAAA,MAMpCC,UANoC;;AAQvD,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAmC;AAC1D,QAAMC,YAAY,GAAGT,KAAK,GAAG,CAA7B,CAD0D,CAG1D;;AACAE,IAAAA,OAAO,CAACQ,OAAR,GAAkB,CAChB,IAAIjB,iBAAJ,CACE,IAAIG,MAAJ,CACEa,YADF,EAEE,IAAId,QAAJ,CAAa,CAACK,KAAK,GAAGS,YAAT,IAAyB,CAAtC,EAAyC,CAACR,MAAM,GAAGQ,YAAV,IAA0B,CAAnE,CAFF,CADF,EAKE,EALF,CADgB,EAQhB,IAAIhB,iBAAJ,CACE,IAAIG,MAAJ,CACEa,YADF,EAEE,IAAId,QAAJ,CACE,CAACK,KAAK,GAAGS,YAAT,IAAyB,CAD3B,EAEG,KAAKR,MAAM,GAAGQ,YAAd,CAAD,GAAgC,CAFlC,CAFF,CADF,EAQE,EARF,CARgB,CAAlB,CAJ0D,CAwB1D;;AACAL,IAAAA,YAAY,CAACM,OAAb,GAAuB,IAAIhB,+BAAJ,CAAoCc,GAApC,EAAyC;AAC9DG,MAAAA,MAAM,EAAE,gBAACC,CAAD;AAAA,eAAiB,IAAIjB,QAAJ,CAAaiB,CAAC,CAACC,CAAf,EAAkBZ,MAAM,GAAGW,CAAC,CAACE,CAA7B,CAAjB;AAAA,OADsD;AAE9DC,MAAAA,SAAS,EAAE,SAFmD;AAG9DC,MAAAA,aAAa,EAAE;AAH+C,KAAzC,CAAvB;AAKD,GA9BD;;AA+BA,MAAMC,MAAM,GAAGzB,KAAK,CAAC0B,OAAN,CACb;AAAA,WAAM,UAACV,GAAD,EAAmC;AACvC,UAAI,CAACJ,YAAY,CAACM,OAAd,IAAyB,CAACR,OAAO,CAACQ,OAAtC,EAA+C;AAC7C,eAAO,IAAP;AACD;;AACDF,MAAAA,GAAG,CAACW,SAAJ,GAAgB,SAAhB;AACAX,MAAAA,GAAG,CAACY,QAAJ,CAAa,CAAb,EAAgB,CAAhB,EAAmBpB,KAAnB,EAA0BC,MAA1B;AACAG,MAAAA,YAAY,CAACM,OAAb,CAAqBW,IAArB,CACEnB,OAAO,CAACQ,OAAR,CAAgB,CAAhB,EAAmBY,UAAnB,CACE,IAAI3B,QAAJ,CAAaU,UAAU,CAACQ,CAAxB,EAA2BZ,MAAM,GAAGI,UAAU,CAACS,CAA/C,CADF,CADF,EAIET,UAJF;AAMAD,MAAAA,YAAY,CAACM,OAAb,CAAqBW,IAArB,CACEnB,OAAO,CAACQ,OAAR,CAAgB,CAAhB,EAAmBY,UAAnB,CACE,IAAI3B,QAAJ,CAAaU,UAAU,CAACQ,CAAxB,EAA2BZ,MAAM,GAAGI,UAAU,CAACS,CAA/C,CADF,CADF,EAIET,UAJF;AAMD,KAlBD;AAAA,GADa,EAoBb,CAACA,UAAD,EAAaJ,MAAb,EAAqBD,KAArB,CApBa,CAAf;AAuBA,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KADT;AAEE,IAAA,MAAM,EAAEC,MAFV;AAGE,IAAA,gBAAgB,EAAEM,gBAHpB;AAIE,IAAA,MAAM,EAAEU;AAJV,KAKMX,UALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CAvED;;AAyEA,eAAeP,kBAAf","sourcesContent":["import * as React from \"react\";\nimport PerspectiveSquare from \"../../../Services/PerspectiveSquare/PerspectiveSquare.service\";\nimport OriginalPerspectiveSquareDrawer from \"../../../Services/PerspectiveSquare/Drawers/Original.service\";\nimport Vector2d from \"../../../Domain/Vector/Vector2d\";\nimport Square from \"../../../Domain/Square/Square\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\nimport PersepctiveSquareDrawer from \"../../../Services/PerspectiveSquare/Drawers/Drawer.interface\";\n\ninterface Props {\n  width: number;\n  height: number;\n}\n\nconst PerspectivePreview = ({ width, height }: Props) => {\n  const squares = React.useRef<[PerspectiveSquare, PerspectiveSquare] | null>(\n    null\n  );\n  const squareDrawer = React.useRef<PersepctiveSquareDrawer | null>(null);\n\n  const [focusPoint, mouseProps] = useClickHoverWander(width, height);\n\n  const initializeCanvas = (ctx: CanvasRenderingContext2D) => {\n    const SQUARE_WIDTH = width / 4;\n\n    // Create squares\n    squares.current = [\n      new PerspectiveSquare(\n        new Square(\n          SQUARE_WIDTH,\n          new Vector2d((width - SQUARE_WIDTH) / 2, (height + SQUARE_WIDTH) / 4)\n        ),\n        50\n      ),\n      new PerspectiveSquare(\n        new Square(\n          SQUARE_WIDTH,\n          new Vector2d(\n            (width - SQUARE_WIDTH) / 2,\n            (3 * (height + SQUARE_WIDTH)) / 4\n          )\n        ),\n        50\n      ),\n    ];\n\n    // Create drawer\n    squareDrawer.current = new OriginalPerspectiveSquareDrawer(ctx, {\n      mapper: (v: Vector2d) => new Vector2d(v.x, height - v.y),\n      lineColor: \"#04D9C4\",\n      includeDashes: false,\n    });\n  };\n  const artist = React.useMemo(\n    () => (ctx: CanvasRenderingContext2D) => {\n      if (!squareDrawer.current || !squares.current) {\n        return null;\n      }\n      ctx.fillStyle = \"#0D0D0D\";\n      ctx.fillRect(0, 0, width, height);\n      squareDrawer.current.draw(\n        squares.current[0].getSquares(\n          new Vector2d(focusPoint.x, height - focusPoint.y)\n        ),\n        focusPoint\n      );\n      squareDrawer.current.draw(\n        squares.current[1].getSquares(\n          new Vector2d(focusPoint.x, height - focusPoint.y)\n        ),\n        focusPoint\n      );\n    },\n    [focusPoint, height, width]\n  );\n\n  return (\n    <CanvasDrawer\n      width={width}\n      height={height}\n      initializeCanvas={initializeCanvas}\n      artist={artist}\n      {...mouseProps}\n    />\n  );\n};\n\nexport default PerspectivePreview;\n"]},"metadata":{},"sourceType":"module"}