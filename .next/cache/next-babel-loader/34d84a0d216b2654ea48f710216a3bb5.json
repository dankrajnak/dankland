{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Vector2d from \"../Vector/Vector2d\";\n\n/**\n * Represents a square in two dimensional space.\n *\n */\nvar Square =\n/*#__PURE__*/\nfunction () {\n  /**\n   *\n   * @param width the width of the square\n   * @param position the coordinates of the top-left point of the square\n   */\n  function Square(width, position) {\n    _classCallCheck(this, Square);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_position\", void 0);\n\n    _defineProperty(this, \"_points\", void 0);\n\n    this._width = width;\n    this._position = this._copyPosition(position);\n    this._points = this._calcPoints();\n  }\n\n  _createClass(Square, [{\n    key: \"clone\",\n    value: function clone() {\n      return new Square(this._width, this._position);\n    }\n  }, {\n    key: \"_calcPoints\",\n    value: function _calcPoints() {\n      return {\n        a: this._position,\n        b: new Vector2d(this._position.x + this._width, this._position.y),\n        c: new Vector2d(this._position.x, this.position.y - this._width),\n        d: new Vector2d(this._position.x + this._width, this._position.y - this._width)\n      };\n    }\n  }, {\n    key: \"_copyPosition\",\n    value: function _copyPosition(pos) {\n      return pos.clone();\n    }\n  }, {\n    key: \"_copyPoints\",\n    value: function _copyPoints(points) {\n      return {\n        a: this._copyPosition(points.a),\n        b: this._copyPosition(points.b),\n        c: this._copyPosition(points.c),\n        d: this._copyPosition(points.d)\n      };\n    }\n  }, {\n    key: \"center\",\n    get: function get() {\n      return new Vector2d(this._position.x + this._width / 2, this._position.y - this._width / 2);\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this._width;\n    },\n    set: function set(width) {\n      this._width = width;\n      this._points = this._calcPoints();\n    }\n    /**\n     * Point a is the top left corner\n     * Point b is the top right corner\n     * Point c is the bottom left corner\n     * Point d is the bottom right corner\n     */\n\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this._copyPoints(this._points);\n    }\n  }, {\n    key: \"pointsAsArray\",\n    get: function get() {\n      return [this._copyPosition(this._points.a), this._copyPosition(this._points.b), this._copyPosition(this._points.d), this._copyPosition(this._points.c)];\n    }\n  }, {\n    key: \"position\",\n    get: function get() {\n      return this._copyPosition(this._position);\n    },\n    set: function set(position) {\n      this._position = position;\n      this._points = this._calcPoints();\n    }\n  }]);\n\n  return Square;\n}();\n\nexport { Square as default };","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Domain/Square/Square.ts"],"names":["Vector2d","Square","width","position","_width","_position","_copyPosition","_points","_calcPoints","a","b","x","y","c","d","pos","clone","points","_copyPoints"],"mappings":";;;AAAA,OAAOA,QAAP,MAAqB,oBAArB;;AASA;;;;IAIqBC,M;;;AAInB;;;;;AAKA,kBAAmBC,KAAnB,EAAkCC,QAAlC,EAAsD;AAAA;;AAAA;;AAAA;;AAAA;;AACpD,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,SAAL,GAAiB,KAAKC,aAAL,CAAmBH,QAAnB,CAAjB;AACA,SAAKI,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;;;4BAEsB;AACrB,aAAO,IAAIP,MAAJ,CAAW,KAAKG,MAAhB,EAAwB,KAAKC,SAA7B,CAAP;AACD;;;kCA6C6B;AAC5B,aAAO;AACLI,QAAAA,CAAC,EAAE,KAAKJ,SADH;AAELK,QAAAA,CAAC,EAAE,IAAIV,QAAJ,CAAa,KAAKK,SAAL,CAAeM,CAAf,GAAmB,KAAKP,MAArC,EAA6C,KAAKC,SAAL,CAAeO,CAA5D,CAFE;AAGLC,QAAAA,CAAC,EAAE,IAAIb,QAAJ,CAAa,KAAKK,SAAL,CAAeM,CAA5B,EAA+B,KAAKR,QAAL,CAAcS,CAAd,GAAkB,KAAKR,MAAtD,CAHE;AAILU,QAAAA,CAAC,EAAE,IAAId,QAAJ,CACD,KAAKK,SAAL,CAAeM,CAAf,GAAmB,KAAKP,MADvB,EAED,KAAKC,SAAL,CAAeO,CAAf,GAAmB,KAAKR,MAFvB;AAJE,OAAP;AASD;;;kCAEqBW,G,EAAyB;AAC7C,aAAOA,GAAG,CAACC,KAAJ,EAAP;AACD;;;gCAEmBC,M,EAAwB;AAC1C,aAAO;AACLR,QAAAA,CAAC,EAAE,KAAKH,aAAL,CAAmBW,MAAM,CAACR,CAA1B,CADE;AAELC,QAAAA,CAAC,EAAE,KAAKJ,aAAL,CAAmBW,MAAM,CAACP,CAA1B,CAFE;AAGLG,QAAAA,CAAC,EAAE,KAAKP,aAAL,CAAmBW,MAAM,CAACJ,CAA1B,CAHE;AAILC,QAAAA,CAAC,EAAE,KAAKR,aAAL,CAAmBW,MAAM,CAACH,CAA1B;AAJE,OAAP;AAMD;;;wBAlE6B;AAC5B,aAAO,IAAId,QAAJ,CACL,KAAKK,SAAL,CAAeM,CAAf,GAAmB,KAAKP,MAAL,GAAc,CAD5B,EAEL,KAAKC,SAAL,CAAeO,CAAf,GAAmB,KAAKR,MAAL,GAAc,CAF5B,CAAP;AAID;;;wBAE0B;AACzB,aAAO,KAAKA,MAAZ;AACD,K;sBAEgBF,K,EAAe;AAC9B,WAAKE,MAAL,GAAcF,KAAd;AACA,WAAKK,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;AAED;;;;;;;;;wBAM4B;AAC1B,aAAO,KAAKU,WAAL,CAAiB,KAAKX,OAAtB,CAAP;AACD;;;wBAEoE;AACnE,aAAO,CACL,KAAKD,aAAL,CAAmB,KAAKC,OAAL,CAAaE,CAAhC,CADK,EAEL,KAAKH,aAAL,CAAmB,KAAKC,OAAL,CAAaG,CAAhC,CAFK,EAGL,KAAKJ,aAAL,CAAmB,KAAKC,OAAL,CAAaO,CAAhC,CAHK,EAIL,KAAKR,aAAL,CAAmB,KAAKC,OAAL,CAAaM,CAAhC,CAJK,CAAP;AAMD;;;wBAE+B;AAC9B,aAAO,KAAKP,aAAL,CAAmB,KAAKD,SAAxB,CAAP;AACD,K;sBACmBF,Q,EAAoB;AACtC,WAAKE,SAAL,GAAiBF,QAAjB;AACA,WAAKI,OAAL,GAAe,KAAKC,WAAL,EAAf;AACD;;;;;;SA5DkBP,M","sourcesContent":["import Vector2d from \"../Vector/Vector2d\";\n\ninterface Points {\n  a: Vector2d;\n  b: Vector2d;\n  c: Vector2d;\n  d: Vector2d;\n}\n\n/**\n * Represents a square in two dimensional space.\n *\n */\nexport default class Square {\n  private _width: number;\n  private _position: Vector2d;\n  private _points: Points;\n  /**\n   *\n   * @param width the width of the square\n   * @param position the coordinates of the top-left point of the square\n   */\n  public constructor(width: number, position: Vector2d) {\n    this._width = width;\n    this._position = this._copyPosition(position);\n    this._points = this._calcPoints();\n  }\n\n  public clone(): Square {\n    return new Square(this._width, this._position);\n  }\n\n  public get center(): Vector2d {\n    return new Vector2d(\n      this._position.x + this._width / 2,\n      this._position.y - this._width / 2\n    );\n  }\n\n  public get width(): number {\n    return this._width;\n  }\n\n  public set width(width: number) {\n    this._width = width;\n    this._points = this._calcPoints();\n  }\n\n  /**\n   * Point a is the top left corner\n   * Point b is the top right corner\n   * Point c is the bottom left corner\n   * Point d is the bottom right corner\n   */\n  public get points(): Points {\n    return this._copyPoints(this._points);\n  }\n\n  public get pointsAsArray(): [Vector2d, Vector2d, Vector2d, Vector2d] {\n    return [\n      this._copyPosition(this._points.a),\n      this._copyPosition(this._points.b),\n      this._copyPosition(this._points.d),\n      this._copyPosition(this._points.c),\n    ];\n  }\n\n  public get position(): Vector2d {\n    return this._copyPosition(this._position);\n  }\n  public set position(position: Vector2d) {\n    this._position = position;\n    this._points = this._calcPoints();\n  }\n\n  private _calcPoints(): Points {\n    return {\n      a: this._position,\n      b: new Vector2d(this._position.x + this._width, this._position.y),\n      c: new Vector2d(this._position.x, this.position.y - this._width),\n      d: new Vector2d(\n        this._position.x + this._width,\n        this._position.y - this._width\n      ),\n    };\n  }\n\n  private _copyPosition(pos: Vector2d): Vector2d {\n    return pos.clone();\n  }\n\n  private _copyPoints(points: Points): Points {\n    return {\n      a: this._copyPosition(points.a),\n      b: this._copyPosition(points.b),\n      c: this._copyPosition(points.c),\n      d: this._copyPosition(points.d),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}