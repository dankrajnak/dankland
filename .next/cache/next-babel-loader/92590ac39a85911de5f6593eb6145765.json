{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/CardMenu/CardDeck/CardDeck.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport useScrollAmount from \"../../../../Hooks/useScrollAmount\";\nimport Card from \"../Card/Card\";\nimport useFullScreen from \"../../../../Hooks/useFullScreen\";\nimport { mappedStepEaser } from \"../../../../../Services/EaseStep/EaseStep.service\";\nimport EasingFunctions from \"../../../../../Services/Ease/Ease.service\";\nimport Link from \"next/link\";\nimport useSafeWindow from \"../../../../Hooks/useSafeWindow\"; // TODO find a better way to do this.\n// @ts-ignore\n\nconst _ref = {},\n      {\n  width,\n  height\n} = _ref,\n      CardPropsSubset = _objectWithoutProperties(_ref, [\"width\", \"height\"]);\n\nconst CardDeckHolder = styled.div`\n  height: ${props => props.height}px;\n  width: 100%;\n`;\nconst CardHolder = styled.div.attrs(props => ({\n  style: {\n    transform: `translate(${props.dx}px, ${props.dy}px)`,\n    zIndex: 2000 - props.order\n  }\n}))`\n  position: fixed;\n`;\nconst PERIOD = 0.4;\nconst EASING_FUNCTION = EasingFunctions.easeInOutQuart;\n/**\n * Creates a scrollable Card Deck.\n * @param {Props} props\n */\n\nconst CardDeck = props => {\n  const scroll = useScrollAmount(true);\n  const [window] = useSafeWindow();\n  const [windowWidth, windowHeight, flash] = useFullScreen(); // This is the position on the screen the deck sits.  It's a computed value based on the windowWidth.\n\n  const deckPosition = React.useMemo(() => (windowWidth - props.cardsWidth) / 2, [props.cardsWidth, windowWidth]);\n  const scrollDemap = React.useMemo(() => val => deckPosition - windowWidth * val, [deckPosition, windowWidth]);\n  const scrollLength = windowHeight * 5;\n  const cardPositionStart = deckPosition;\n  const cardPositionEnd = -props.cardsWidth; // Memoize stepEaser to only generate range and getPosition when the cards length changes.\n\n  const [getPosition, getEaseStart] = React.useMemo(() => mappedStepEaser(0, scrollLength, cardPositionStart, cardPositionEnd)(props.cards.length - 1, PERIOD, EASING_FUNCTION), [cardPositionEnd, cardPositionStart, props.cards.length, scrollLength]); // Move to the saved scroll position when this component renders\n\n  React.useLayoutEffect(() => {\n    let timeout;\n\n    if (window) {\n      if (props.scrollToCard) {\n        //Ok, this is hacky, but unless we wait a few milliseconds,\n        // the screen doesn't have time to render and we don't scroll anywhere.\n        // As far as I can tell for now, there's no way to listen for when all the cards have been rendered\n        setTimeout(() => {\n          if (props.scrollToCard) {\n            window.scrollTo(0, // Add a little to the index to give make sure the card on top has moved off of the card below\n            // TODO this should take the easing function into account.\n            getEaseStart(props.scrollToCard + 2 / props.cards.length));\n          }\n        }, 15);\n      }\n    }\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [getEaseStart, props.cards.length, props.scrollToCard, window]);\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(CardDeckHolder, {\n    height: scrollLength + windowHeight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, props.cards.map((card, i) => {\n    // Only draw cards when the card above it has moved and it's on screen.\n    const nextCardPosition = i !== props.cards.length - 1 ? getPosition(scroll, i + 1) : cardPositionStart;\n    const currentCardPosition = getPosition(scroll, i);\n    const prevCardPosition = i !== 0 ? getPosition(scroll, i - 1) : cardPositionEnd;\n    const shouldNotDrawCard = currentCardPosition === nextCardPosition && currentCardPosition !== deckPosition || prevCardPosition === cardPositionStart;\n    return __jsx(Link, {\n      href: card.link,\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"card-deck-card-link\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, __jsx(CardHolder, {\n      dx: i === props.cards.length - 1 ? cardPositionStart : currentCardPosition,\n      dy: (windowHeight - props.cardsHeight) / 2,\n      order: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, !shouldNotDrawCard && __jsx(Card, _extends({}, card, {\n      width: props.cardsWidth,\n      height: props.cardsHeight,\n      shadowAmount: i === props.cards.length - 1 ? 0 : scrollDemap(getPosition(scroll, i)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    })))));\n  }));\n};\n\nexport default CardDeck;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/CardMenu/CardDeck/CardDeck.tsx"],"names":["React","styled","useScrollAmount","Card","useFullScreen","mappedStepEaser","EasingFunctions","Link","useSafeWindow","width","height","CardPropsSubset","CardDeckHolder","div","props","CardHolder","attrs","style","transform","dx","dy","zIndex","order","PERIOD","EASING_FUNCTION","easeInOutQuart","CardDeck","scroll","window","windowWidth","windowHeight","flash","deckPosition","useMemo","cardsWidth","scrollDemap","val","scrollLength","cardPositionStart","cardPositionEnd","getPosition","getEaseStart","cards","length","useLayoutEffect","timeout","scrollToCard","setTimeout","scrollTo","clearTimeout","map","card","i","nextCardPosition","currentCardPosition","prevCardPosition","shouldNotDrawCard","link","cardsHeight"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport styled, { StyledComponent } from \"styled-components\";\nimport useScrollAmount from \"../../../../Hooks/useScrollAmount\";\nimport Card, { Props as CardProps } from \"../Card/Card\";\nimport useFullScreen from \"../../../../Hooks/useFullScreen\";\nimport { mappedStepEaser } from \"../../../../../Services/EaseStep/EaseStep.service\";\nimport EasingFunctions from \"../../../../../Services/Ease/Ease.service\";\nimport Link from \"next/link\";\nimport useSafeWindow from \"../../../../Hooks/useSafeWindow\";\n\n// TODO find a better way to do this.\n// @ts-ignore\nconst { width, height, ...CardPropsSubset }: CardProps = {};\ninterface Props {\n  cards: ({\n    link: string;\n  } & typeof CardPropsSubset)[];\n  width: number;\n  cardsWidth: number;\n  cardsHeight: number;\n  scrollToCard?: number | null;\n}\nconst CardDeckHolder = styled.div<{ height: number }>`\n  height: ${props => props.height}px;\n  width: 100%;\n`;\n\nconst CardHolder = styled.div.attrs<{ dx: number; dy: number; order: number }>(\n  props => ({\n    style: {\n      transform: `translate(${props.dx}px, ${props.dy}px)`,\n      zIndex: 2000 - props.order,\n    },\n  })\n)`\n  position: fixed;\n` as StyledComponent<\n  \"div\",\n  any,\n  { dx: number; dy: number; order: number },\n  never\n>;\n\nconst PERIOD = 0.4;\nconst EASING_FUNCTION = EasingFunctions.easeInOutQuart;\n\n/**\n * Creates a scrollable Card Deck.\n * @param {Props} props\n */\nconst CardDeck = (props: Props) => {\n  const scroll = useScrollAmount(true);\n  const [window] = useSafeWindow();\n\n  const [windowWidth, windowHeight, flash] = useFullScreen();\n\n  // This is the position on the screen the deck sits.  It's a computed value based on the windowWidth.\n  const deckPosition = React.useMemo(\n    () => (windowWidth - props.cardsWidth) / 2,\n    [props.cardsWidth, windowWidth]\n  );\n\n  const scrollDemap = React.useMemo(\n    () => (val: number) => deckPosition - windowWidth * val,\n    [deckPosition, windowWidth]\n  );\n\n  const scrollLength = windowHeight * 5;\n  const cardPositionStart = deckPosition;\n  const cardPositionEnd = -props.cardsWidth;\n  // Memoize stepEaser to only generate range and getPosition when the cards length changes.\n  const [getPosition, getEaseStart] = React.useMemo(\n    () =>\n      mappedStepEaser(0, scrollLength, cardPositionStart, cardPositionEnd)(\n        props.cards.length - 1,\n        PERIOD,\n        EASING_FUNCTION\n      ),\n    [cardPositionEnd, cardPositionStart, props.cards.length, scrollLength]\n  );\n\n  // Move to the saved scroll position when this component renders\n  React.useLayoutEffect(() => {\n    let timeout: number;\n    if (window) {\n      if (props.scrollToCard) {\n        //Ok, this is hacky, but unless we wait a few milliseconds,\n        // the screen doesn't have time to render and we don't scroll anywhere.\n        // As far as I can tell for now, there's no way to listen for when all the cards have been rendered\n        setTimeout(() => {\n          if (props.scrollToCard) {\n            window.scrollTo(\n              0,\n              // Add a little to the index to give make sure the card on top has moved off of the card below\n              // TODO this should take the easing function into account.\n              getEaseStart(props.scrollToCard + 2 / props.cards.length)\n            );\n          }\n        }, 15);\n      }\n    }\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [getEaseStart, props.cards.length, props.scrollToCard, window]);\n\n  if (flash) {\n    return flash;\n  }\n  return (\n    <CardDeckHolder height={scrollLength + windowHeight}>\n      {props.cards.map((card, i) => {\n        // Only draw cards when the card above it has moved and it's on screen.\n        const nextCardPosition =\n          i !== props.cards.length - 1\n            ? getPosition(scroll, i + 1)\n            : cardPositionStart;\n        const currentCardPosition = getPosition(scroll, i);\n        const prevCardPosition =\n          i !== 0 ? getPosition(scroll, i - 1) : cardPositionEnd;\n\n        const shouldNotDrawCard =\n          (currentCardPosition === nextCardPosition &&\n            currentCardPosition !== deckPosition) ||\n          prevCardPosition === cardPositionStart;\n\n        return (\n          <Link href={card.link} key={i}>\n            <div className=\"card-deck-card-link\">\n              <CardHolder\n                dx={\n                  i === props.cards.length - 1\n                    ? cardPositionStart\n                    : currentCardPosition\n                }\n                dy={(windowHeight - props.cardsHeight) / 2}\n                order={i}\n              >\n                {!shouldNotDrawCard && (\n                  <Card\n                    {...card}\n                    width={props.cardsWidth}\n                    height={props.cardsHeight}\n                    shadowAmount={\n                      i === props.cards.length - 1\n                        ? 0\n                        : scrollDemap(getPosition(scroll, i))\n                    }\n                  />\n                )}\n              </CardHolder>\n            </div>\n          </Link>\n        );\n      })}\n    </CardDeckHolder>\n  );\n};\nexport default CardDeck;\n"]},"metadata":{},"sourceType":"module"}