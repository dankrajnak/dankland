{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\nimport PerspectiveSquare from \"../../../Services/PerspectiveSquare/PerspectiveSquare.service\";\nimport OriginalPerspectiveSquareDrawer from \"../../../Services/PerspectiveSquare/Drawers/Original.service\";\nimport Vector2d from \"../../../Domain/Vector/Vector2d\";\nimport Square from \"../../../Domain/Square/Square\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nconst PerspectivePreview = ({\n  width,\n  height\n}) => {\n  const squares = React.useRef(null);\n  const squareDrawer = React.useRef(null);\n  const [focusPoint, mouseProps] = useClickHoverWander(width, height);\n\n  const initializeCanvas = ctx => {\n    const SQUARE_WIDTH = width / 4; // Create squares\n\n    squares.current = [new PerspectiveSquare(new Square(SQUARE_WIDTH, new Vector2d((width - SQUARE_WIDTH) / 2, (height + SQUARE_WIDTH) / 4)), 50), new PerspectiveSquare(new Square(SQUARE_WIDTH, new Vector2d((width - SQUARE_WIDTH) / 2, 3 * (height + SQUARE_WIDTH) / 4)), 50)]; // Create drawer\n\n    squareDrawer.current = new OriginalPerspectiveSquareDrawer(ctx, {\n      mapper: v => new Vector2d(v.x, height - v.y),\n      lineColor: \"#04D9C4\",\n      includeDashes: false\n    });\n  };\n\n  const artist = React.useMemo(() => ctx => {\n    if (!squareDrawer.current || !squares.current) {\n      return null;\n    }\n\n    ctx.fillStyle = \"#0D0D0D\";\n    ctx.fillRect(0, 0, width, height);\n    squareDrawer.current.draw(squares.current[0].getSquares(new Vector2d(focusPoint.x, height - focusPoint.y)), focusPoint);\n    squareDrawer.current.draw(squares.current[1].getSquares(new Vector2d(focusPoint.x, height - focusPoint.y)), focusPoint);\n  }, [focusPoint, height, width]);\n  return __jsx(CanvasDrawer, _extends({\n    width: width,\n    height: height,\n    initializeCanvas: initializeCanvas,\n    artist: artist\n  }, mouseProps));\n};\n\nexport default PerspectivePreview;","map":null,"metadata":{},"sourceType":"module"}