{"ast":null,"code":"export default class TypeWriterService {\n  static getMistakeCharacter(character) {\n    const keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n    const uppercase = character.toUpperCase() === character;\n    const isLetter = \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n    if (isLetter) {\n      /*With a 90% chance, if the character is uppercase, make the\n        mistake character the lowercase version of the uppercase.\n        If it's lowercase, reverse the probability.*/\n      const chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n\n      if (Math.random() <= chanceOfCaseMistake) {\n        return uppercase ? character.toLowerCase() : character.toUpperCase();\n      } //Otherwise make a big finger mistake\n\n\n      keyboard.forEach(keyRow => {\n        const index = keyRow.indexOf(character.toLowerCase());\n\n        if (index !== -1) {\n          switch (index) {\n            case 0:\n              return keyRow[1];\n\n            case keyRow.length - 1:\n              return keyRow.length - 2;\n\n            default:\n              return Math.random() <= 0.5 ? keyRow[index - 1] : keyRow[index + 1];\n          }\n        }\n      });\n    } //Handle special characters\n    //TODO: this doesn't handle ' ' (space) very well... or at all.\n\n\n    const specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n    const specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n    for (let i = 0; i < specialCharactersShift.length; i++) {\n      const shiftedIndex = specialCharactersShift[i].indexOf(character);\n\n      if (shiftedIndex !== -1) {\n        //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.9) {\n          return specialCharacters[i][shiftedIndex];\n        }\n\n        switch (shiftedIndex) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n          default:\n            return Math.random() <= 0.5 ? specialCharactersShift[i][shiftedIndex - 1] : specialCharactersShift[i][shiftedIndex + 1];\n        }\n      }\n    }\n\n    for (let i = 0; i < specialCharacters.length; i++) {\n      const index = specialCharactersShift[i].indexOf(character);\n\n      if (index !== -1) {\n        //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.1) {\n          return specialCharactersShift[i][index];\n        }\n\n        switch (index) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n          default:\n            return Math.random() <= 0.5 ? specialCharactersShift[i][index - 1] : specialCharactersShift[i][index + 1];\n        }\n      }\n    } //As a default, just return the given character.\n\n\n    return character;\n  }\n\n}","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/TypeWriter/TypeWriter.service.ts"],"names":["TypeWriterService","getMistakeCharacter","character","keyboard","uppercase","toUpperCase","isLetter","indexOf","toLowerCase","chanceOfCaseMistake","Math","random","forEach","keyRow","index","length","specialCharacters","specialCharactersShift","i","shiftedIndex"],"mappings":"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","sourcesContent":["export default class TypeWriterService {\n  public static getMistakeCharacter(character: string): string {\n    const keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n    const uppercase = character.toUpperCase() === character;\n    const isLetter =\n      \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n    if (isLetter) {\n      /*With a 90% chance, if the character is uppercase, make the\n        mistake character the lowercase version of the uppercase.\n        If it's lowercase, reverse the probability.*/\n      const chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n      if (Math.random() <= chanceOfCaseMistake) {\n        return uppercase ? character.toLowerCase() : character.toUpperCase();\n      }\n      //Otherwise make a big finger mistake\n      keyboard.forEach(keyRow => {\n        const index = keyRow.indexOf(character.toLowerCase());\n        if (index !== -1) {\n          switch (index) {\n            case 0:\n              return keyRow[1];\n\n            case keyRow.length - 1:\n              return keyRow.length - 2;\n\n            default:\n              return Math.random() <= 0.5\n                ? keyRow[index - 1]\n                : keyRow[index + 1];\n          }\n        }\n      });\n    }\n\n    //Handle special characters\n    //TODO: this doesn't handle ' ' (space) very well... or at all.\n    const specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n    const specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n    for (let i = 0; i < specialCharactersShift.length; i++) {\n      const shiftedIndex = specialCharactersShift[i].indexOf(character);\n      if (shiftedIndex !== -1) {\n        //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.9) {\n          return specialCharacters[i][shiftedIndex];\n        }\n        switch (shiftedIndex) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][\n              specialCharactersShift[i].length - 2\n            ];\n\n          default:\n            return Math.random() <= 0.5\n              ? specialCharactersShift[i][shiftedIndex - 1]\n              : specialCharactersShift[i][shiftedIndex + 1];\n        }\n      }\n    }\n\n    for (let i = 0; i < specialCharacters.length; i++) {\n      const index = specialCharactersShift[i].indexOf(character);\n      if (index !== -1) {\n        //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.1) {\n          return specialCharactersShift[i][index];\n        }\n        switch (index) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][\n              specialCharactersShift[i].length - 2\n            ];\n\n          default:\n            return Math.random() <= 0.5\n              ? specialCharactersShift[i][index - 1]\n              : specialCharactersShift[i][index + 1];\n        }\n      }\n    }\n    //As a default, just return the given character.\n    return character;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}