{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport useFullScreen from \"../View/Hooks/useFullScreen\";\nimport PerspectiveSquare from \"../Services/PerspectiveSquare/PerspectiveSquare.service\";\nimport Square from \"../Domain/Square/Square\";\nimport Vector2d from \"../Domain/Vector/Vector2d\";\nimport OriginalPerspectiveSquareDrawer from \"../Services/PerspectiveSquare/Drawers/Original.service\";\nimport MenuLayout from \"../View/Layout/MenuLayout\";\nimport SEO from \"../View/Utility/seo\";\nimport useClickHoverWander from \"../View/Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../View/UI/CavnasDrawer/CanvasDrawer\";\nconst SQUARE_WIDTH = 300;\nconst FullScreen = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Perspective = () => {\n  const [width, height, flash] = useFullScreen();\n  const [focusPoint, mouseProps] = useClickHoverWander(width, height);\n  const perspectiveSquare = React.useRef(null);\n  const squareDrawer = React.useRef(null);\n\n  const initializeCanvas = ctx => {\n    //Create the squares.\n    perspectiveSquare.current = new PerspectiveSquare(new Square(SQUARE_WIDTH, new Vector2d((width - SQUARE_WIDTH) / 2, (height + SQUARE_WIDTH) / 2)), 100);\n    squareDrawer.current = new OriginalPerspectiveSquareDrawer(ctx, {\n      mapper: v => new Vector2d(v.x, height - v.y),\n      lineColor: \"#04D9C4\"\n    });\n  };\n\n  const artist = ctx => {\n    if (!squareDrawer.current || !perspectiveSquare.current) {\n      return;\n    }\n\n    ctx.fillStyle = \"#0D0D0D\";\n    ctx.fillRect(0, 0, width, height);\n    squareDrawer.current.draw(perspectiveSquare.current.getSquares(new Vector2d(focusPoint.x, height - focusPoint.y)), focusPoint.clone());\n  };\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(MenuLayout, {\n    color: \"white\"\n  }, __jsx(SEO, {\n    title: \"Perspective\"\n  }), __jsx(FullScreen, null, __jsx(CanvasDrawer, _extends({\n    width: width,\n    height: height,\n    initializeCanvas: initializeCanvas,\n    artist: artist\n  }, mouseProps))));\n};\n\nexport default Perspective;","map":null,"metadata":{},"sourceType":"module"}