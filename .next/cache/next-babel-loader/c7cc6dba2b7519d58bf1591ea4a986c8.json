{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from \"react\";\nimport { makePendulum } from \"../../../Services/DoublePendulum/DoublePendulum.service\";\nimport DoublePendulums from \"./DoublePendulums\";\nvar pendulums = [];\n\nfor (var i = 0; i < 10; i++) {\n  pendulums.push(makePendulum());\n}\n\nvar renderPendulums = function renderPendulums(pendulums, ctx, info) {\n  ctx.clearRect(0, 0, info.width, info.height);\n  pendulums = pendulums.map(function (p) {\n    return _objectSpread({}, p, {\n      x1: p.x1 + info.width / 2,\n      y1: p.y1 + info.height / 2,\n      x2: p.x2 + info.width / 2,\n      y2: p.y2 + info.height / 2\n    });\n  });\n  pendulums.forEach(function (p) {\n    ctx.beginPath();\n    ctx.strokeStyle = \"#AAA\";\n    ctx.ellipse(p.x2, p.y2, 1, 1, 0, 0, Math.PI * 2);\n    ctx.stroke();\n    ctx.closePath();\n  }); // Draw lines between pendulums\n\n  ctx.beginPath();\n  ctx.strokeStyle = \"#333\";\n  ctx.moveTo(pendulums[0].x1, pendulums[0].y1);\n\n  for (var _i = 1; _i < pendulums.length; _i++) {\n    ctx.lineTo(pendulums[_i].x1, pendulums[_i].y1);\n  }\n\n  ctx.lineTo(pendulums[0].x1, pendulums[0].y1);\n  ctx.stroke();\n};\n\nvar TheCoolestOne = function TheCoolestOne(props) {\n  return __jsx(DoublePendulums, {\n    width: props.width,\n    height: props.height,\n    pendulumsInitialState: pendulums,\n    renderPendulums: renderPendulums\n  });\n};\n\nexport default TheCoolestOne;","map":null,"metadata":{},"sourceType":"module"}