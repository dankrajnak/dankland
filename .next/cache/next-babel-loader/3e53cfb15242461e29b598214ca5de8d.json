{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\nimport Color from \"color\";\nvar defaultConfig = {\n  numberOfColumns: 40,\n  numberOfRows: 40,\n  p: 0.0008,\n  shouldSlideDots: true,\n  dotSize: 3\n};\n\nvar constrain = function constrain(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n};\n\nvar MetaSphere =\n/*#__PURE__*/\nfunction () {\n  function MetaSphere(width, height) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultConfig;\n\n    _classCallCheck(this, MetaSphere);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"_dots\", void 0);\n\n    _defineProperty(this, \"p\", void 0);\n\n    _defineProperty(this, \"shouldSlideDots\", void 0);\n\n    _defineProperty(this, \"dotSize\", void 0);\n\n    this._width = width;\n    this._height = height;\n    this._dots = [];\n    this.p = typeof config.p !== \"undefined\" ? config.p : defaultConfig.p;\n    this.shouldSlideDots = typeof config.shouldSlideDots !== \"undefined\" ? config.shouldSlideDots : defaultConfig.shouldSlideDots;\n    this.dotSize = typeof config.dotSize !== \"undefined\" ? config.dotSize : defaultConfig.dotSize;\n    var numberOfColumns = config.numberOfColumns || defaultConfig.numberOfColumns;\n    var numberOfRows = config.numberOfRows || defaultConfig.numberOfRows;\n\n    for (var i = 0; i < numberOfRows * numberOfColumns; i++) {\n      this._dots[i] = new Vector2d(width / numberOfRows * (i % numberOfRows), height / numberOfColumns * Math.floor(i / numberOfColumns));\n    }\n  }\n\n  _createClass(MetaSphere, [{\n    key: \"setup\",\n    value: function setup() {}\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, focusPoint) {\n      var _this = this;\n\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, this._width, this._height); // Draw each of the dots.\n\n      this._dots.forEach(function (dot) {\n        // Figure out the color of the dot.\n        var color = Color.hsl(Math.sqrt(Math.pow(_this._width / 2 - dot.x, 2) + Math.pow(_this._height / 2 - dot.y, 2)), 50, 50);\n        ctx.fillStyle = color.hex(); //Move the dots across the page\n\n        if (_this.shouldSlideDots) {\n          if (focusPoint.x <= _this._width / 2) {\n            dot.x = (dot.x + 1) % _this._width;\n          } else {\n            dot.x -= 1;\n\n            if (dot.x <= 0) {\n              dot.x = _this._width;\n            }\n          }\n        } //Ok, I'm going to be honest with you, this was one of the first programs\n        //I made, and I coded it poorly and as a result.  I could fix most of it, but\n        //I have no idea how this part actually works.\n\n\n        ctx.beginPath();\n        ctx.ellipse(constrain(dot.x + (constrain(focusPoint.x, 100, _this._width - 100) - dot.x) * Math.sqrt(Math.pow(constrain(focusPoint.x, 300, 900) - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * _this.p, dot.x - 200, dot.x + 200), dot.y + (focusPoint.y - dot.y) * Math.sqrt(Math.pow(focusPoint.x - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * _this.p, _this.dotSize, _this.dotSize, 0, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    }\n  }]);\n\n  return MetaSphere;\n}();\n\nexport { MetaSphere as default };","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/MetaSphere/MetaSphere.ts"],"names":["Vector2d","Color","defaultConfig","numberOfColumns","numberOfRows","p","shouldSlideDots","dotSize","constrain","val","min","max","Math","MetaSphere","width","height","config","_width","_height","_dots","i","floor","ctx","focusPoint","fillStyle","fillRect","forEach","dot","color","hsl","sqrt","pow","x","y","hex","beginPath","ellipse","PI","fill"],"mappings":"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","sourcesContent":["import Vector2d from \"../../Domain/Vector/Vector2d\";\nimport Color from \"color\";\n\ninterface Config {\n  numberOfColumns?: number;\n  numberOfRows?: number;\n  p?: number;\n  shouldSlideDots?: boolean;\n  dotSize?: number;\n}\n\nconst defaultConfig = {\n  numberOfColumns: 40,\n  numberOfRows: 40,\n  p: 0.0008,\n  shouldSlideDots: true,\n  dotSize: 3,\n};\n\nconst constrain = (val: number, min: number, max: number) =>\n  Math.max(Math.min(val, max), min);\n\nexport default class MetaSphere {\n  private _width: number;\n  private _height: number;\n  private _dots: Vector2d[];\n  public p: number;\n  public shouldSlideDots: boolean;\n  public dotSize: number;\n  public constructor(\n    width: number,\n    height: number,\n    config: Config = defaultConfig\n  ) {\n    this._width = width;\n    this._height = height;\n    this._dots = [];\n    this.p = typeof config.p !== \"undefined\" ? config.p : defaultConfig.p;\n    this.shouldSlideDots =\n      typeof config.shouldSlideDots !== \"undefined\"\n        ? config.shouldSlideDots\n        : defaultConfig.shouldSlideDots;\n\n    this.dotSize =\n      typeof config.dotSize !== \"undefined\"\n        ? config.dotSize\n        : defaultConfig.dotSize;\n\n    const numberOfColumns =\n      config.numberOfColumns || defaultConfig.numberOfColumns;\n    const numberOfRows = config.numberOfRows || defaultConfig.numberOfRows;\n\n    for (let i = 0; i < numberOfRows * numberOfColumns; i++) {\n      this._dots[i] = new Vector2d(\n        (width / numberOfRows) * (i % numberOfRows),\n        (height / numberOfColumns) * Math.floor(i / numberOfColumns)\n      );\n    }\n  }\n\n  public setup() {}\n\n  public draw(ctx: CanvasRenderingContext2D, focusPoint: Vector2d) {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, this._width, this._height);\n\n    // Draw each of the dots.\n    this._dots.forEach(dot => {\n      // Figure out the color of the dot.\n      const color = Color.hsl(\n        Math.sqrt(\n          Math.pow(this._width / 2 - dot.x, 2) +\n            Math.pow(this._height / 2 - dot.y, 2)\n        ),\n        50,\n        50\n      );\n      ctx.fillStyle = color.hex();\n\n      //Move the dots across the page\n      if (this.shouldSlideDots) {\n        if (focusPoint.x <= this._width / 2) {\n          dot.x = (dot.x + 1) % this._width;\n        } else {\n          dot.x -= 1;\n          if (dot.x <= 0) {\n            dot.x = this._width;\n          }\n        }\n      }\n\n      //Ok, I'm going to be honest with you, this was one of the first programs\n      //I made, and I coded it poorly and as a result.  I could fix most of it, but\n      //I have no idea how this part actually works.\n      ctx.beginPath();\n      ctx.ellipse(\n        constrain(\n          dot.x +\n            (constrain(focusPoint.x, 100, this._width - 100) - dot.x) *\n              Math.sqrt(\n                Math.pow(constrain(focusPoint.x, 300, 900) - dot.x, 2) +\n                  Math.pow(focusPoint.y - dot.y, 2)\n              ) *\n              this.p,\n          dot.x - 200,\n          dot.x + 200\n        ),\n        dot.y +\n          (focusPoint.y - dot.y) *\n            Math.sqrt(\n              Math.pow(focusPoint.x - dot.x, 2) +\n                Math.pow(focusPoint.y - dot.y, 2)\n            ) *\n            this.p,\n        this.dotSize,\n        this.dotSize,\n        0,\n        0,\n        Math.PI * 2\n      );\n\n      ctx.fill();\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}