{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vector2d from \"../Vector/Vector2d\";\n\n/**\n * Represents a square in two dimensional space.\n *\n */\nexport default class Square {\n  /**\n   *\n   * @param width the width of the square\n   * @param position the coordinates of the top-left point of the square\n   */\n  constructor(width, position) {\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_position\", void 0);\n\n    _defineProperty(this, \"_points\", void 0);\n\n    this._width = width;\n    this._position = this._copyPosition(position);\n    this._points = this._calcPoints();\n  }\n\n  clone() {\n    return new Square(this._width, this._position);\n  }\n\n  get center() {\n    return new Vector2d(this._position.x + this._width / 2, this._position.y - this._width / 2);\n  }\n\n  get width() {\n    return this._width;\n  }\n\n  set width(width) {\n    this._width = width;\n    this._points = this._calcPoints();\n  }\n  /**\n   * Point a is the top left corner\n   * Point b is the top right corner\n   * Point c is the bottom left corner\n   * Point d is the bottom right corner\n   */\n\n\n  get points() {\n    return this._copyPoints(this._points);\n  }\n\n  get pointsAsArray() {\n    return [this._copyPosition(this._points.a), this._copyPosition(this._points.b), this._copyPosition(this._points.d), this._copyPosition(this._points.c)];\n  }\n\n  get position() {\n    return this._copyPosition(this._position);\n  }\n\n  set position(position) {\n    this._position = position;\n    this._points = this._calcPoints();\n  }\n\n  _calcPoints() {\n    return {\n      a: this._position,\n      b: new Vector2d(this._position.x + this._width, this._position.y),\n      c: new Vector2d(this._position.x, this.position.y - this._width),\n      d: new Vector2d(this._position.x + this._width, this._position.y - this._width)\n    };\n  }\n\n  _copyPosition(pos) {\n    return pos.clone();\n  }\n\n  _copyPoints(points) {\n    return {\n      a: this._copyPosition(points.a),\n      b: this._copyPosition(points.b),\n      c: this._copyPosition(points.c),\n      d: this._copyPosition(points.d)\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Domain/Square/Square.ts"],"names":["Vector2d","Square","constructor","width","position","_width","_position","_copyPosition","_points","_calcPoints","clone","center","x","y","points","_copyPoints","pointsAsArray","a","b","d","c","pos"],"mappings":"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","sourcesContent":["import Vector2d from \"../Vector/Vector2d\";\n\ninterface Points {\n  a: Vector2d;\n  b: Vector2d;\n  c: Vector2d;\n  d: Vector2d;\n}\n\n/**\n * Represents a square in two dimensional space.\n *\n */\nexport default class Square {\n  private _width: number;\n  private _position: Vector2d;\n  private _points: Points;\n  /**\n   *\n   * @param width the width of the square\n   * @param position the coordinates of the top-left point of the square\n   */\n  public constructor(width: number, position: Vector2d) {\n    this._width = width;\n    this._position = this._copyPosition(position);\n    this._points = this._calcPoints();\n  }\n\n  public clone(): Square {\n    return new Square(this._width, this._position);\n  }\n\n  public get center(): Vector2d {\n    return new Vector2d(\n      this._position.x + this._width / 2,\n      this._position.y - this._width / 2\n    );\n  }\n\n  public get width(): number {\n    return this._width;\n  }\n\n  public set width(width: number) {\n    this._width = width;\n    this._points = this._calcPoints();\n  }\n\n  /**\n   * Point a is the top left corner\n   * Point b is the top right corner\n   * Point c is the bottom left corner\n   * Point d is the bottom right corner\n   */\n  public get points(): Points {\n    return this._copyPoints(this._points);\n  }\n\n  public get pointsAsArray(): [Vector2d, Vector2d, Vector2d, Vector2d] {\n    return [\n      this._copyPosition(this._points.a),\n      this._copyPosition(this._points.b),\n      this._copyPosition(this._points.d),\n      this._copyPosition(this._points.c),\n    ];\n  }\n\n  public get position(): Vector2d {\n    return this._copyPosition(this._position);\n  }\n  public set position(position: Vector2d) {\n    this._position = position;\n    this._points = this._calcPoints();\n  }\n\n  private _calcPoints(): Points {\n    return {\n      a: this._position,\n      b: new Vector2d(this._position.x + this._width, this._position.y),\n      c: new Vector2d(this._position.x, this.position.y - this._width),\n      d: new Vector2d(\n        this._position.x + this._width,\n        this._position.y - this._width\n      ),\n    };\n  }\n\n  private _copyPosition(pos: Vector2d): Vector2d {\n    return pos.clone();\n  }\n\n  private _copyPoints(points: Points): Points {\n    return {\n      a: this._copyPosition(points.a),\n      b: this._copyPosition(points.b),\n      c: this._copyPosition(points.c),\n      d: this._copyPosition(points.d),\n    };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}