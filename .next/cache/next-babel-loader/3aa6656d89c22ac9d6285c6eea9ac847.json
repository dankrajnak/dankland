{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  display: flex;\\n  width: 100%;\\n  height: 100vh;\\n  justify-content: center;\\n  align-items: center;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from \"react\";\nimport CanvasDrawer from \"../View/UI/CavnasDrawer/CanvasDrawer\";\nimport styled from \"styled-components\";\nimport FluidService from \"../Services/Fluid/Fluid.service\";\nvar WIDTH = 600;\nvar HEIGHT = 600;\nvar NUM_PARTICLES = 1000;\nvar FPS = 60;\nvar fluidService = new FluidService(NUM_PARTICLES, WIDTH, HEIGHT, 1000 / FPS / 500);\nvar CenterScreen = styled.div(_templateObject());\n\nvar FluidExperiment = function FluidExperiment() {\n  var artist = React.useMemo(function () {\n    return function (ctx) {\n      ctx.clearRect(0, 0, WIDTH, HEIGHT);\n      ctx.fillStyle = \"black\"; // Get next state.\n\n      for (var i = 0; i < NUM_PARTICLES; i++) {\n        var point = fluidService.state.getPoint(i);\n        ctx.beginPath();\n        ctx.ellipse(point.x + WIDTH / 2, point.y + HEIGHT / 2, 2, 2, 0, 0, Math.PI * 2);\n        ctx.closePath();\n        ctx.fill();\n      }\n\n      fluidService.next();\n    };\n  }, []);\n  return __jsx(CenterScreen, null, __jsx(CanvasDrawer, {\n    width: WIDTH,\n    height: HEIGHT,\n    artist: artist,\n    fps: FPS\n  }));\n};\n\nexport default FluidExperiment;","map":null,"metadata":{},"sourceType":"module"}