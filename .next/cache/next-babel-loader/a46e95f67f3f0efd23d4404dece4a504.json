{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Square from \"../../Domain/Square/Square\";\nexport default class PerspectiveSquare {\n  /**\n   * Depth of perspective\n   */\n\n  /**\n   * Max front square moves away from the vanishPoint.\n   */\n  constructor(square, depth = 100, maxSquareDisplacement = 60) {\n    _defineProperty(this, \"depth\", void 0);\n\n    _defineProperty(this, \"maxSquareDisplacement\", void 0);\n\n    _defineProperty(this, \"_squareCenter\", void 0);\n\n    _defineProperty(this, \"_square\", void 0);\n\n    this._squareCenter = square.center;\n    this._square = square.clone();\n    this.depth = depth;\n    this.maxSquareDisplacement = maxSquareDisplacement;\n  }\n\n  getSquares(vanishPoint) {\n    // Calculate first square\n    let displacementVector = this._squareCenter.minus(vanishPoint);\n\n    if (displacementVector.magnitude > this.maxSquareDisplacement) {\n      displacementVector = displacementVector.scaleTo(this.maxSquareDisplacement);\n    }\n\n    const squareOne = new Square(this._square.width, this._square.position.plus(displacementVector)); // Calculate second square\n\n    let squareTwo;\n\n    if (vanishPoint.minus(squareOne.points.a).magnitude < this.depth) {\n      squareTwo = new Square(0, vanishPoint);\n    } else {\n      // Let's break out some fucking math. Alright.\n      // Offset is a vector reprsenting the change in position from squareOne to squareTwo.\n      const offset = vanishPoint.minus(squareOne.position).scaleTo(this.depth); // To get squareTwo's position, we add offset to squareOne.\n\n      const squareTwoPosition = offset.plus(squareOne.position); // Then let's calculate the width.  This might not be the most efficient, but\n      // we can use similar triangles and compare the distance from the top left point\n      // of squareA to the vanishing point to the distance between squareTwo's position\n      // and the vanishing point and use that ratio to determine the width given the width of squareOne\n\n      const vanishPointDistance = squareOne.position.minus(vanishPoint).magnitude;\n      const squareTwoWidth = squareOne.width * (vanishPointDistance - this.depth) / vanishPointDistance;\n      squareTwo = new Square(squareTwoWidth, squareTwoPosition);\n    }\n\n    return [squareOne, squareTwo];\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}