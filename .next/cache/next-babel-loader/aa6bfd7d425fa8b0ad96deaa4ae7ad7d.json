{"ast":null,"code":"/**\n * Ok this might be a little confusing, but this type is a function that takes in a function f(x) where x is a Vector.\n * f returns a vector.  The function returns another function which takes in x and h and returns a vector.\n *\n * f(x) is a function in the form x' = f(x).  In other words, given a vector, it returns\n * the change (derivative) of that vector at that moment.  So, at time n, (x_n)' = f(x_n).  The method below returns a\n * function of the form x_(n+h) = g(x_n, h).  Notice that it's not the change in x, it's the actual value.\n *\n */\nvar multV = function multV(vector, n) {\n  return vector.map(function (value) {\n    return value * n;\n  });\n};\n\nvar vplusV = function vplusV(vector, vectorb) {\n  return vector.map(function (x, i) {\n    return x + (vectorb.get(i) || 0);\n  });\n};\n\nexport var RungeKutta = function RungeKutta(f) {\n  return function (x, h) {\n    var a = f(x);\n    var b = f(vplusV(x, multV(a, h / 2)));\n    var c = f(vplusV(x, multV(b, h / 2)));\n    var d = f(vplusV(x, multV(c, h))); // This next line is really confusing, but it amounts to\n    // x + h/6 * (a + 2b + 2c + d)\n\n    return vplusV(x, multV(vplusV(vplusV(vplusV(a, multV(b, 2)), multV(c, 2)), d), h / 6));\n  };\n};\nexport default RungeKutta;","map":null,"metadata":{},"sourceType":"module"}