{"ast":null,"code":"import * as React from \"react\";\nimport { SpringSystem } from \"rebound\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\n\nconst getCoordinatesFromMouseEvent = event => {\n  const bounds = event.currentTarget.getBoundingClientRect();\n  return new Vector2d(event.clientX - bounds.left, event.clientY - bounds.top);\n};\n\nconst randomPosition = (maxX, maxY) => new Vector2d(Math.random() * maxX, Math.random() * maxY);\n\nconst positionThreshold = 20;\n\nconst getNextPosition = (currentPosition, width, height) => {\n  let newPosition = randomPosition(width, height);\n\n  while (newPosition.minus(currentPosition).magnitude < positionThreshold) {\n    newPosition = randomPosition(width, height);\n  }\n\n  return newPosition;\n};\n\nconst useClickHoverWander = (width, height, initialFocusPoint = new Vector2d(0, 0)) => {\n  const xSpring = React.useRef(null);\n  const ySpring = React.useRef(null);\n  const [focusPoint, setFocusPoint] = React.useState(initialFocusPoint);\n  React.useEffect(() => {\n    const springSystem = new SpringSystem();\n    const springTension = 2;\n    const springFriction = 5;\n    xSpring.current = springSystem.createSpring(springTension, springFriction);\n    ySpring.current = springSystem.createSpring(springTension, springFriction);\n\n    const goToNextPosition = () => {\n      if (!xSpring.current || !ySpring.current) {\n        return;\n      }\n\n      const newPosition = getNextPosition(new Vector2d(xSpring.current.getCurrentValue(), ySpring.current.getCurrentValue()), width, height); // Not sure exactly why, but there's a bug if we set the endValue right away\n      // Somtimes the spring just doesn't move.\n\n      setTimeout(() => {\n        if (xSpring.current && ySpring.current) {\n          xSpring.current.setEndValue(newPosition.x);\n          ySpring.current.setEndValue(newPosition.y);\n        }\n      }, 0);\n    };\n\n    xSpring.current.addListener({\n      onSpringUpdate: spring => {\n        if (!ySpring.current) {\n          return;\n        }\n\n        setFocusPoint(new Vector2d(spring.getCurrentValue(), ySpring.current.getCurrentValue()));\n      },\n      onSpringAtRest: () => {\n        if (ySpring.current && ySpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      }\n    });\n    ySpring.current.addListener({\n      onSpringUpdate: spring => {\n        if (!xSpring.current) {\n          return;\n        }\n\n        if (xSpring.current.isAtRest()) {\n          setFocusPoint(new Vector2d(xSpring.current.getCurrentValue(), spring.getCurrentValue()));\n        }\n      },\n      onSpringAtRest: () => {\n        if (xSpring.current && xSpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      }\n    });\n    xSpring.current.setEndValue(Math.random() * width);\n    ySpring.current.setEndValue(Math.random() * height);\n    return () => {\n      xSpring.current && xSpring.current.destroy();\n      ySpring.current && ySpring.current.destroy();\n    };\n  }, [height, width]);\n  const onMouseMove = React.useMemo(() => throttle(event => {\n    const position = getCoordinatesFromMouseEvent(event);\n    xSpring.current && xSpring.current.setEndValue(position.x);\n    ySpring.current && ySpring.current.setEndValue(position.y);\n  }, 100), []);\n  const onClick = React.useMemo(() => event => {\n    const position = getCoordinatesFromMouseEvent(event);\n    xSpring.current && xSpring.current.setEndValue(position.x);\n    ySpring.current && ySpring.current.setEndValue(position.y);\n  }, []);\n  return [focusPoint, {\n    onClick,\n    onMouseMove\n  }];\n};\n\nexport default useClickHoverWander;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/Hooks/useClickHoverWander.ts"],"names":["React","SpringSystem","throttle","Vector2d","getCoordinatesFromMouseEvent","event","bounds","currentTarget","getBoundingClientRect","clientX","left","clientY","top","randomPosition","maxX","maxY","Math","random","positionThreshold","getNextPosition","currentPosition","width","height","newPosition","minus","magnitude","useClickHoverWander","initialFocusPoint","xSpring","useRef","ySpring","focusPoint","setFocusPoint","useState","useEffect","springSystem","springTension","springFriction","current","createSpring","goToNextPosition","getCurrentValue","setTimeout","setEndValue","x","y","addListener","onSpringUpdate","spring","onSpringAtRest","isAtRest","destroy","onMouseMove","useMemo","position","onClick"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { SpringSystem, Spring } from \"rebound\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\n\nconst getCoordinatesFromMouseEvent = (event: React.MouseEvent): Vector2d => {\n  const bounds = event.currentTarget.getBoundingClientRect();\n  return new Vector2d(event.clientX - bounds.left, event.clientY - bounds.top);\n};\n\nconst randomPosition = (maxX: number, maxY: number): Vector2d =>\n  new Vector2d(Math.random() * maxX, Math.random() * maxY);\n\nconst positionThreshold = 20;\nconst getNextPosition = (\n  currentPosition: Vector2d,\n  width: number,\n  height: number\n) => {\n  let newPosition = randomPosition(width, height);\n  while (newPosition.minus(currentPosition).magnitude < positionThreshold) {\n    newPosition = randomPosition(width, height);\n  }\n  return newPosition;\n};\n\nconst useClickHoverWander = (\n  width: number,\n  height: number,\n  initialFocusPoint: Vector2d = new Vector2d(0, 0)\n): [\n  Vector2d,\n  {\n    onClick: (e: React.MouseEvent) => void;\n    onMouseMove: (e: React.MouseEvent) => void;\n  }\n] => {\n  const xSpring = React.useRef<Spring | null>(null);\n  const ySpring = React.useRef<Spring | null>(null);\n  const [focusPoint, setFocusPoint] = React.useState<Vector2d>(\n    initialFocusPoint\n  );\n\n  React.useEffect(() => {\n    const springSystem = new SpringSystem();\n    const springTension = 2;\n    const springFriction = 5;\n    xSpring.current = springSystem.createSpring(springTension, springFriction);\n    ySpring.current = springSystem.createSpring(springTension, springFriction);\n\n    const goToNextPosition = () => {\n      if (!xSpring.current || !ySpring.current) {\n        return;\n      }\n      const newPosition = getNextPosition(\n        new Vector2d(\n          xSpring.current.getCurrentValue(),\n          ySpring.current.getCurrentValue()\n        ),\n        width,\n        height\n      );\n      // Not sure exactly why, but there's a bug if we set the endValue right away\n      // Somtimes the spring just doesn't move.\n      setTimeout(() => {\n        if (xSpring.current && ySpring.current) {\n          xSpring.current.setEndValue(newPosition.x);\n          ySpring.current.setEndValue(newPosition.y);\n        }\n      }, 0);\n    };\n\n    xSpring.current.addListener({\n      onSpringUpdate: spring => {\n        if (!ySpring.current) {\n          return;\n        }\n        setFocusPoint(\n          new Vector2d(\n            spring.getCurrentValue(),\n            ySpring.current.getCurrentValue()\n          )\n        );\n      },\n      onSpringAtRest: () => {\n        if (ySpring.current && ySpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      },\n    });\n    ySpring.current.addListener({\n      onSpringUpdate: spring => {\n        if (!xSpring.current) {\n          return;\n        }\n        if (xSpring.current.isAtRest()) {\n          setFocusPoint(\n            new Vector2d(\n              xSpring.current.getCurrentValue(),\n              spring.getCurrentValue()\n            )\n          );\n        }\n      },\n      onSpringAtRest: () => {\n        if (xSpring.current && xSpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      },\n    });\n\n    xSpring.current.setEndValue(Math.random() * width);\n    ySpring.current.setEndValue(Math.random() * height);\n\n    return () => {\n      xSpring.current && xSpring.current.destroy();\n      ySpring.current && ySpring.current.destroy();\n    };\n  }, [height, width]);\n\n  const onMouseMove = React.useMemo(\n    () =>\n      throttle((event: React.MouseEvent) => {\n        const position = getCoordinatesFromMouseEvent(event);\n        xSpring.current && xSpring.current.setEndValue(position.x);\n        ySpring.current && ySpring.current.setEndValue(position.y);\n      }, 100),\n    []\n  );\n\n  const onClick = React.useMemo(\n    () => (event: React.MouseEvent) => {\n      const position = getCoordinatesFromMouseEvent(event);\n      xSpring.current && xSpring.current.setEndValue(position.x);\n      ySpring.current && ySpring.current.setEndValue(position.y);\n    },\n    []\n  );\n\n  return [\n    focusPoint,\n    {\n      onClick,\n      onMouseMove,\n    },\n  ];\n};\n\nexport default useClickHoverWander;\n"]},"metadata":{},"sourceType":"module"}