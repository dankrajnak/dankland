{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/CavnasDrawer/CanvasDrawer.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\nimport Canvas from \"../Canvas\";\nimport useSafeWindow from \"../../Hooks/useSafeWindow\";\n\nconst CanvasDrawer = (_ref) => {\n  let {\n    width,\n    height,\n    initializeCanvas,\n    artist,\n    fps\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"initializeCanvas\", \"artist\", \"fps\"]);\n\n  const context = React.useRef(null);\n  const requestedFrame = React.useRef(null);\n  const getContext = React.useRef(c => context.current = c);\n  React.useEffect(() => {\n    const draw = context => {\n      let then = Date.now();\n\n      const renderFrame = () => {\n        requestedFrame.current = requestAnimationFrame(() => {\n          renderFrame();\n\n          if (!fps) {\n            artist(context);\n          } else {\n            const now = Date.now();\n            const delta = now - then;\n            const interval = 1000 / fps;\n\n            if (delta > interval) {\n              then = now - delta % interval;\n              artist(context);\n            }\n          }\n        });\n      };\n\n      renderFrame();\n    };\n\n    if (context.current) {\n      if (initializeCanvas) {\n        initializeCanvas(context.current);\n      }\n\n      draw(context.current);\n    }\n\n    return () => {\n      requestedFrame.current && cancelAnimationFrame(requestedFrame.current);\n    };\n  });\n  const flash = useSafeWindow()[1];\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(Canvas, _extends({\n    getContext: getContext.current,\n    width: width,\n    height: height\n  }, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(CanvasDrawer);","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/CavnasDrawer/CanvasDrawer.tsx"],"names":["React","Canvas","useSafeWindow","CanvasDrawer","width","height","initializeCanvas","artist","fps","otherProps","context","useRef","requestedFrame","getContext","c","current","useEffect","draw","then","Date","now","renderFrame","requestAnimationFrame","delta","interval","cancelAnimationFrame","flash","memo"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;AAUA,MAAMC,YAAY,GAAG,UAOR;AAAA,MAPS;AACpBC,IAAAA,KADoB;AAEpBC,IAAAA,MAFoB;AAGpBC,IAAAA,gBAHoB;AAIpBC,IAAAA,MAJoB;AAKpBC,IAAAA;AALoB,GAOT;AAAA,MADRC,UACQ;;AACX,QAAMC,OAAgE,GAAGV,KAAK,CAACW,MAAN,CACvE,IADuE,CAAzE;AAGA,QAAMC,cAAqD,GAAGZ,KAAK,CAACW,MAAN,CAC5D,IAD4D,CAA9D;AAIA,QAAME,UAAU,GAAGb,KAAK,CAACW,MAAN,CAChBG,CAAD,IAAkCJ,OAAO,CAACK,OAAR,GAAkBD,CADnC,CAAnB;AAGAd,EAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AACpB,UAAMC,IAAI,GAAIP,OAAD,IAAuC;AAClD,UAAIQ,IAAI,GAAGC,IAAI,CAACC,GAAL,EAAX;;AACA,YAAMC,WAAW,GAAG,MAAM;AACxBT,QAAAA,cAAc,CAACG,OAAf,GAAyBO,qBAAqB,CAAC,MAAM;AACnDD,UAAAA,WAAW;;AACX,cAAI,CAACb,GAAL,EAAU;AACRD,YAAAA,MAAM,CAACG,OAAD,CAAN;AACD,WAFD,MAEO;AACL,kBAAMU,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;AACA,kBAAMG,KAAK,GAAGH,GAAG,GAAGF,IAApB;AACA,kBAAMM,QAAQ,GAAG,OAAOhB,GAAxB;;AACA,gBAAIe,KAAK,GAAGC,QAAZ,EAAsB;AACpBN,cAAAA,IAAI,GAAGE,GAAG,GAAIG,KAAK,GAAGC,QAAtB;AACAjB,cAAAA,MAAM,CAACG,OAAD,CAAN;AACD;AACF;AACF,SAb6C,CAA9C;AAcD,OAfD;;AAgBAW,MAAAA,WAAW;AACZ,KAnBD;;AAqBA,QAAIX,OAAO,CAACK,OAAZ,EAAqB;AACnB,UAAIT,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,CAACI,OAAO,CAACK,OAAT,CAAhB;AACD;;AACDE,MAAAA,IAAI,CAACP,OAAO,CAACK,OAAT,CAAJ;AACD;;AACD,WAAO,MAAM;AACXH,MAAAA,cAAc,CAACG,OAAf,IAA0BU,oBAAoB,CAACb,cAAc,CAACG,OAAhB,CAA9C;AACD,KAFD;AAGD,GA/BD;AAiCA,QAAMW,KAAK,GAAGxB,aAAa,GAAG,CAAH,CAA3B;;AAEA,MAAIwB,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,UAAU,EAAEb,UAAU,CAACE,OADzB;AAEE,IAAA,KAAK,EAAEX,KAFT;AAGE,IAAA,MAAM,EAAEC;AAHV,KAIMI,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD,CAjED;;AAmEA,eAAeT,KAAK,CAAC2B,IAAN,CAAWxB,YAAX,CAAf","sourcesContent":["import * as React from \"react\";\nimport Canvas from \"../Canvas\";\nimport useSafeWindow from \"../../Hooks/useSafeWindow\";\n\ninterface Props {\n  width: number;\n  height: number;\n  initializeCanvas?: (context: CanvasRenderingContext2D) => void;\n  artist: (context: CanvasRenderingContext2D) => void;\n  fps?: number | null;\n}\n\nconst CanvasDrawer = ({\n  width,\n  height,\n  initializeCanvas,\n  artist,\n  fps,\n  ...otherProps\n}: Props) => {\n  const context: React.MutableRefObject<CanvasRenderingContext2D | null> = React.useRef(\n    null\n  );\n  const requestedFrame: React.MutableRefObject<number | null> = React.useRef(\n    null\n  );\n\n  const getContext = React.useRef(\n    (c: CanvasRenderingContext2D) => (context.current = c)\n  );\n  React.useEffect(() => {\n    const draw = (context: CanvasRenderingContext2D) => {\n      let then = Date.now();\n      const renderFrame = () => {\n        requestedFrame.current = requestAnimationFrame(() => {\n          renderFrame();\n          if (!fps) {\n            artist(context);\n          } else {\n            const now = Date.now();\n            const delta = now - then;\n            const interval = 1000 / fps;\n            if (delta > interval) {\n              then = now - (delta % interval);\n              artist(context);\n            }\n          }\n        });\n      };\n      renderFrame();\n    };\n\n    if (context.current) {\n      if (initializeCanvas) {\n        initializeCanvas(context.current);\n      }\n      draw(context.current);\n    }\n    return () => {\n      requestedFrame.current && cancelAnimationFrame(requestedFrame.current);\n    };\n  });\n\n  const flash = useSafeWindow()[1];\n\n  if (flash) {\n    return flash;\n  }\n\n  return (\n    <Canvas\n      getContext={getContext.current}\n      width={width}\n      height={height}\n      {...otherProps}\n    />\n  );\n};\n\nexport default React.memo(CanvasDrawer);\n"]},"metadata":{},"sourceType":"module"}