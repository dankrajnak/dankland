{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class OriginalPerspectiveSquareDrawer {\n  constructor(ctx, config = {}) {\n    _defineProperty(this, \"_ctx\", void 0);\n\n    _defineProperty(this, \"_lineWidth\", void 0);\n\n    _defineProperty(this, \"_lineColor\", void 0);\n\n    _defineProperty(this, \"_includeDashes\", void 0);\n\n    _defineProperty(this, \"_mapper\", void 0);\n\n    this._ctx = ctx;\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n\n    this._mapper = config.mapper || (v => v);\n\n    this._includeDashes = typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  setup() {// Do nothing.\n  }\n\n  draw(squares, focusPoint) {\n    this._ctx.strokeStyle = this._lineColor;\n    this._ctx.lineWidth = this._lineWidth;\n    const [squareOne, squareTwo] = squares;\n    const squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n    const squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper); // Draw dashed lines from vanish point to second square.\n\n    if (this._includeDashes) {\n      this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n\n      squareTwoPoints.forEach(point => {\n        this._ctx.beginPath();\n\n        this._ctx.moveTo(focusPoint.x, focusPoint.y);\n\n        this._ctx.lineTo(point.x, point.y);\n\n        this._ctx.stroke();\n\n        this._ctx.closePath();\n      });\n\n      this._ctx.setLineDash([]);\n    } // Draw second square.\n\n\n    this._drawSquare(squareTwo); // Draw lines between second square and first square\n\n\n    squareOnePoints.forEach((pointOne, index) => {\n      this._ctx.beginPath();\n\n      this._ctx.moveTo(pointOne.x, pointOne.y);\n\n      this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n\n      this._ctx.stroke();\n\n      this._ctx.closePath();\n    }); // Draw first square.\n\n    this._drawSquare(squareOne);\n  }\n\n  _drawSquare(square) {\n    const points = square.pointsAsArray.map(this._mapper);\n\n    this._ctx.beginPath();\n\n    const lastPoint = points[points.length - 1];\n\n    this._ctx.moveTo(lastPoint.x, lastPoint.y);\n\n    points.forEach(point => this._ctx.lineTo(point.x, point.y));\n\n    this._ctx.stroke();\n\n    this._ctx.closePath();\n  }\n\n}","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/PerspectiveSquare/Drawers/Original.service.ts"],"names":["OriginalPerspectiveSquareDrawer","constructor","ctx","config","_ctx","_lineColor","lineColor","_lineWidth","lineWidth","_mapper","mapper","v","_includeDashes","includeDashes","setup","draw","squares","focusPoint","strokeStyle","squareOne","squareTwo","squareOnePoints","pointsAsArray","map","squareTwoPoints","setLineDash","forEach","point","beginPath","moveTo","x","y","lineTo","stroke","closePath","_drawSquare","pointOne","index","square","points","lastPoint","length"],"mappings":"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","sourcesContent":["import PersepctiveSquareDrawer from \"./Drawer.interface\";\nimport Vector2d from \"../../../Domain/Vector/Vector2d\";\nimport Square from \"../../../Domain/Square/Square\";\n\ninterface Config {\n  lineWidth?: number;\n  lineColor?: string;\n  includeDashes?: boolean;\n  mapper?: (v: Vector2d) => Vector2d;\n}\nexport default class OriginalPerspectiveSquareDrawer\n  implements PersepctiveSquareDrawer {\n  private _ctx: CanvasRenderingContext2D;\n  private _lineWidth: number;\n  private _lineColor: string;\n  private _includeDashes: boolean;\n  private _mapper: (v: Vector2d) => Vector2d;\n  public constructor(ctx: CanvasRenderingContext2D, config: Config = {}) {\n    this._ctx = ctx;\n\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n    this._mapper = config.mapper || ((v: Vector2d) => v);\n    this._includeDashes =\n      typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  public setup() {\n    // Do nothing.\n  }\n\n  public draw(squares: [Square, Square], focusPoint: Vector2d) {\n    this._ctx.strokeStyle = this._lineColor;\n    this._ctx.lineWidth = this._lineWidth;\n    const [squareOne, squareTwo] = squares;\n    const squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n    const squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper);\n\n    // Draw dashed lines from vanish point to second square.\n    if (this._includeDashes) {\n      this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n      squareTwoPoints.forEach((point: Vector2d) => {\n        this._ctx.beginPath();\n        this._ctx.moveTo(focusPoint.x, focusPoint.y);\n        this._ctx.lineTo(point.x, point.y);\n        this._ctx.stroke();\n        this._ctx.closePath();\n      });\n      this._ctx.setLineDash([]);\n    }\n\n    // Draw second square.\n    this._drawSquare(squareTwo);\n\n    // Draw lines between second square and first square\n    squareOnePoints.forEach((pointOne, index) => {\n      this._ctx.beginPath();\n      this._ctx.moveTo(pointOne.x, pointOne.y);\n      this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n      this._ctx.stroke();\n      this._ctx.closePath();\n    });\n\n    // Draw first square.\n    this._drawSquare(squareOne);\n  }\n\n  private _drawSquare(square: Square) {\n    const points = square.pointsAsArray.map(this._mapper);\n    this._ctx.beginPath();\n    const lastPoint = points[points.length - 1];\n    this._ctx.moveTo(lastPoint.x, lastPoint.y);\n    points.forEach(point => this._ctx.lineTo(point.x, point.y));\n    this._ctx.stroke();\n    this._ctx.closePath();\n  }\n}\n"]},"metadata":{},"sourceType":"module"}