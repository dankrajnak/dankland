{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar TypeWriterService =\n/*#__PURE__*/\nfunction () {\n  function TypeWriterService() {\n    _classCallCheck(this, TypeWriterService);\n  }\n\n  _createClass(TypeWriterService, null, [{\n    key: \"getMistakeCharacter\",\n    value: function getMistakeCharacter(character) {\n      var keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n      var uppercase = character.toUpperCase() === character;\n      var isLetter = \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n      if (isLetter) {\n        /*With a 90% chance, if the character is uppercase, make the\n          mistake character the lowercase version of the uppercase.\n          If it's lowercase, reverse the probability.*/\n        var chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n\n        if (Math.random() <= chanceOfCaseMistake) {\n          return uppercase ? character.toLowerCase() : character.toUpperCase();\n        } //Otherwise make a big finger mistake\n\n\n        keyboard.forEach(function (keyRow) {\n          var index = keyRow.indexOf(character.toLowerCase());\n\n          if (index !== -1) {\n            switch (index) {\n              case 0:\n                return keyRow[1];\n\n              case keyRow.length - 1:\n                return keyRow.length - 2;\n\n              default:\n                return Math.random() <= 0.5 ? keyRow[index - 1] : keyRow[index + 1];\n            }\n          }\n        });\n      } //Handle special characters\n      //TODO: this doesn't handle ' ' (space) very well... or at all.\n\n\n      var specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n      var specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n      for (var i = 0; i < specialCharactersShift.length; i++) {\n        var shiftedIndex = specialCharactersShift[i].indexOf(character);\n\n        if (shiftedIndex !== -1) {\n          //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n          if (Math.random() <= 0.9) {\n            return specialCharacters[i][shiftedIndex];\n          }\n\n          switch (shiftedIndex) {\n            case 0:\n              return specialCharactersShift[i][1];\n\n            case specialCharactersShift[i].length - 1:\n              return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n            default:\n              return Math.random() <= 0.5 ? specialCharactersShift[i][shiftedIndex - 1] : specialCharactersShift[i][shiftedIndex + 1];\n          }\n        }\n      }\n\n      for (var _i = 0; _i < specialCharacters.length; _i++) {\n        var index = specialCharactersShift[_i].indexOf(character);\n\n        if (index !== -1) {\n          //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n          if (Math.random() <= 0.1) {\n            return specialCharactersShift[_i][index];\n          }\n\n          switch (index) {\n            case 0:\n              return specialCharactersShift[_i][1];\n\n            case specialCharactersShift[_i].length - 1:\n              return specialCharactersShift[_i][specialCharactersShift[_i].length - 2];\n\n            default:\n              return Math.random() <= 0.5 ? specialCharactersShift[_i][index - 1] : specialCharactersShift[_i][index + 1];\n          }\n        }\n      } //As a default, just return the given character.\n\n\n      return character;\n    }\n  }]);\n\n  return TypeWriterService;\n}();\n\nexport { TypeWriterService as default };","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Services/TypeWriter/TypeWriter.service.ts"],"names":["TypeWriterService","character","keyboard","uppercase","toUpperCase","isLetter","indexOf","toLowerCase","chanceOfCaseMistake","Math","random","forEach","keyRow","index","length","specialCharacters","specialCharactersShift","i","shiftedIndex"],"mappings":"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","sourcesContent":["export default class TypeWriterService {\n  public static getMistakeCharacter(character: string): string {\n    const keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n    const uppercase = character.toUpperCase() === character;\n    const isLetter =\n      \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n    if (isLetter) {\n      /*With a 90% chance, if the character is uppercase, make the\n        mistake character the lowercase version of the uppercase.\n        If it's lowercase, reverse the probability.*/\n      const chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n      if (Math.random() <= chanceOfCaseMistake) {\n        return uppercase ? character.toLowerCase() : character.toUpperCase();\n      }\n      //Otherwise make a big finger mistake\n      keyboard.forEach(keyRow => {\n        const index = keyRow.indexOf(character.toLowerCase());\n        if (index !== -1) {\n          switch (index) {\n            case 0:\n              return keyRow[1];\n\n            case keyRow.length - 1:\n              return keyRow.length - 2;\n\n            default:\n              return Math.random() <= 0.5\n                ? keyRow[index - 1]\n                : keyRow[index + 1];\n          }\n        }\n      });\n    }\n\n    //Handle special characters\n    //TODO: this doesn't handle ' ' (space) very well... or at all.\n    const specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n    const specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n    for (let i = 0; i < specialCharactersShift.length; i++) {\n      const shiftedIndex = specialCharactersShift[i].indexOf(character);\n      if (shiftedIndex !== -1) {\n        //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.9) {\n          return specialCharacters[i][shiftedIndex];\n        }\n        switch (shiftedIndex) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][\n              specialCharactersShift[i].length - 2\n            ];\n\n          default:\n            return Math.random() <= 0.5\n              ? specialCharactersShift[i][shiftedIndex - 1]\n              : specialCharactersShift[i][shiftedIndex + 1];\n        }\n      }\n    }\n\n    for (let i = 0; i < specialCharacters.length; i++) {\n      const index = specialCharactersShift[i].indexOf(character);\n      if (index !== -1) {\n        //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n        if (Math.random() <= 0.1) {\n          return specialCharactersShift[i][index];\n        }\n        switch (index) {\n          case 0:\n            return specialCharactersShift[i][1];\n\n          case specialCharactersShift[i].length - 1:\n            return specialCharactersShift[i][\n              specialCharactersShift[i].length - 2\n            ];\n\n          default:\n            return Math.random() <= 0.5\n              ? specialCharactersShift[i][index - 1]\n              : specialCharactersShift[i][index + 1];\n        }\n      }\n    }\n    //As a default, just return the given character.\n    return character;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}