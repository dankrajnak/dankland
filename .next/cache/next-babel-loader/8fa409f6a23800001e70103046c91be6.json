{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\nimport Color from \"color\";\nconst defaultConfig = {\n  numberOfColumns: 40,\n  numberOfRows: 40,\n  p: 0.0008,\n  shouldSlideDots: true,\n  dotSize: 3\n};\n\nconst constrain = (val, min, max) => Math.max(Math.min(val, max), min);\n\nexport default class MetaSphere {\n  constructor(width, height, config = defaultConfig) {\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"_dots\", void 0);\n\n    _defineProperty(this, \"p\", void 0);\n\n    _defineProperty(this, \"shouldSlideDots\", void 0);\n\n    _defineProperty(this, \"dotSize\", void 0);\n\n    this._width = width;\n    this._height = height;\n    this._dots = [];\n    this.p = typeof config.p !== \"undefined\" ? config.p : defaultConfig.p;\n    this.shouldSlideDots = typeof config.shouldSlideDots !== \"undefined\" ? config.shouldSlideDots : defaultConfig.shouldSlideDots;\n    this.dotSize = typeof config.dotSize !== \"undefined\" ? config.dotSize : defaultConfig.dotSize;\n    const numberOfColumns = config.numberOfColumns || defaultConfig.numberOfColumns;\n    const numberOfRows = config.numberOfRows || defaultConfig.numberOfRows;\n\n    for (let i = 0; i < numberOfRows * numberOfColumns; i++) {\n      this._dots[i] = new Vector2d(width / numberOfRows * (i % numberOfRows), height / numberOfColumns * Math.floor(i / numberOfColumns));\n    }\n  }\n\n  setup() {}\n\n  draw(ctx, focusPoint) {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, this._width, this._height); // Draw each of the dots.\n\n    this._dots.forEach(dot => {\n      // Figure out the color of the dot.\n      const color = Color.hsl(Math.sqrt(Math.pow(this._width / 2 - dot.x, 2) + Math.pow(this._height / 2 - dot.y, 2)), 50, 50);\n      ctx.fillStyle = color.hex(); //Move the dots across the page\n\n      if (this.shouldSlideDots) {\n        if (focusPoint.x <= this._width / 2) {\n          dot.x = (dot.x + 1) % this._width;\n        } else {\n          dot.x -= 1;\n\n          if (dot.x <= 0) {\n            dot.x = this._width;\n          }\n        }\n      } //Ok, I'm going to be honest with you, this was one of the first programs\n      //I made, and I coded it poorly and as a result.  I could fix most of it, but\n      //I have no idea how this part actually works.\n\n\n      ctx.beginPath();\n      ctx.ellipse(constrain(dot.x + (constrain(focusPoint.x, 100, this._width - 100) - dot.x) * Math.sqrt(Math.pow(constrain(focusPoint.x, 300, 900) - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * this.p, dot.x - 200, dot.x + 200), dot.y + (focusPoint.y - dot.y) * Math.sqrt(Math.pow(focusPoint.x - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * this.p, this.dotSize, this.dotSize, 0, 0, Math.PI * 2);\n      ctx.fill();\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}