{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar TypeWriterService =\n/*#__PURE__*/\nfunction () {\n  function TypeWriterService() {\n    _classCallCheck(this, TypeWriterService);\n  }\n\n  _createClass(TypeWriterService, null, [{\n    key: \"getMistakeCharacter\",\n    value: function getMistakeCharacter(character) {\n      var keyboard = [\"qwertyuiop[\", \"asdfghjkl;\", \"zxcvbnm,\"];\n      var uppercase = character.toUpperCase() === character;\n      var isLetter = \"abcdefghijklmnopqrstuvwxyz\".indexOf(character.toLowerCase()) !== -1;\n\n      if (isLetter) {\n        /*With a 90% chance, if the character is uppercase, make the\n          mistake character the lowercase version of the uppercase.\n          If it's lowercase, reverse the probability.*/\n        var chanceOfCaseMistake = uppercase ? 0.9 : 0.1;\n\n        if (Math.random() <= chanceOfCaseMistake) {\n          return uppercase ? character.toLowerCase() : character.toUpperCase();\n        } //Otherwise make a big finger mistake\n\n\n        keyboard.forEach(function (keyRow) {\n          var index = keyRow.indexOf(character.toLowerCase());\n\n          if (index !== -1) {\n            switch (index) {\n              case 0:\n                return keyRow[1];\n\n              case keyRow.length - 1:\n                return keyRow.length - 2;\n\n              default:\n                return Math.random() <= 0.5 ? keyRow[index - 1] : keyRow[index + 1];\n            }\n          }\n        });\n      } //Handle special characters\n      //TODO: this doesn't handle ' ' (space) very well... or at all.\n\n\n      var specialCharacters = [\"1234567890-=\", \"p[]\\\\\", \"l;'\", \"m,./\"];\n      var specialCharactersShift = [\"!@#$%^&*()_+\", \"P{}|\", 'L:\"', \"M<>?\"];\n\n      for (var i = 0; i < specialCharactersShift.length; i++) {\n        var shiftedIndex = specialCharactersShift[i].indexOf(character);\n\n        if (shiftedIndex !== -1) {\n          //It's shifted, so with a 90% chance, make a shift mistake.  Otherwise, big finger mistake.\n          if (Math.random() <= 0.9) {\n            return specialCharacters[i][shiftedIndex];\n          }\n\n          switch (shiftedIndex) {\n            case 0:\n              return specialCharactersShift[i][1];\n\n            case specialCharactersShift[i].length - 1:\n              return specialCharactersShift[i][specialCharactersShift[i].length - 2];\n\n            default:\n              return Math.random() <= 0.5 ? specialCharactersShift[i][shiftedIndex - 1] : specialCharactersShift[i][shiftedIndex + 1];\n          }\n        }\n      }\n\n      for (var _i = 0; _i < specialCharacters.length; _i++) {\n        var index = specialCharactersShift[_i].indexOf(character);\n\n        if (index !== -1) {\n          //It's not shifted, so with a 10% chance, make a shift mistake.  Otherwise, big finger mistake.\n          if (Math.random() <= 0.1) {\n            return specialCharactersShift[_i][index];\n          }\n\n          switch (index) {\n            case 0:\n              return specialCharactersShift[_i][1];\n\n            case specialCharactersShift[_i].length - 1:\n              return specialCharactersShift[_i][specialCharactersShift[_i].length - 2];\n\n            default:\n              return Math.random() <= 0.5 ? specialCharactersShift[_i][index - 1] : specialCharactersShift[_i][index + 1];\n          }\n        }\n      } //As a default, just return the given character.\n\n\n      return character;\n    }\n  }]);\n\n  return TypeWriterService;\n}();\n\nexport { TypeWriterService as default };","map":null,"metadata":{},"sourceType":"module"}