{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\nimport Canvas from \"../Canvas\";\nimport useSafeWindow from \"../../Hooks/useSafeWindow\";\n\nconst CanvasDrawer = (_ref) => {\n  let {\n    width,\n    height,\n    initializeCanvas,\n    artist,\n    fps\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"initializeCanvas\", \"artist\", \"fps\"]);\n\n  const context = React.useRef(null);\n  const requestedFrame = React.useRef(null);\n  const getContext = React.useRef(c => context.current = c);\n  React.useEffect(() => {\n    const draw = context => {\n      let then = Date.now();\n\n      const renderFrame = () => {\n        requestedFrame.current = requestAnimationFrame(() => {\n          renderFrame();\n\n          if (!fps) {\n            artist(context);\n          } else {\n            const now = Date.now();\n            const delta = now - then;\n            const interval = 1000 / fps;\n\n            if (delta > interval) {\n              then = now - delta % interval;\n              artist(context);\n            }\n          }\n        });\n      };\n\n      renderFrame();\n    };\n\n    if (context.current) {\n      if (initializeCanvas) {\n        initializeCanvas(context.current);\n      }\n\n      draw(context.current);\n    }\n\n    return () => {\n      requestedFrame.current && cancelAnimationFrame(requestedFrame.current);\n    };\n  });\n  const flash = useSafeWindow()[1];\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(Canvas, _extends({\n    getContext: getContext.current,\n    width: width,\n    height: height\n  }, otherProps));\n};\n\nexport default React.memo(CanvasDrawer);","map":null,"metadata":{},"sourceType":"module"}