{"ast":null,"code":"/**\n * Ok this might be a little confusing, but this type is a function that takes in a function f(x) where x is a Vector.\n * f returns a vector.  The function returns another function which takes in x and h and returns a vector.\n *\n * f(x) is a function in the form x' = f(x).  In other words, given a vector, it returns\n * the change (derivative) of that vector at that moment.  So, at time n, (x_n)' = f(x_n).  The method below returns a\n * function of the form x_(n+h) = g(x_n, h).  Notice that it's not the change in x, it's the actual value.\n *\n */\nconst multV = (vector, n) => vector.map(value => value * n);\n\nconst vplusV = (vector, vectorb) => vector.map((x, i) => x + (vectorb.get(i) || 0));\n\nexport const RungeKutta = f => (x, h) => {\n  const a = f(x);\n  const b = f(vplusV(x, multV(a, h / 2)));\n  const c = f(vplusV(x, multV(b, h / 2)));\n  const d = f(vplusV(x, multV(c, h))); // This next line is really confusing, but it amounts to\n  // x + h/6 * (a + 2b + 2c + d)\n\n  return vplusV(x, multV(vplusV(vplusV(vplusV(a, multV(b, 2)), multV(c, 2)), d), h / 6));\n};\nexport default RungeKutta;","map":null,"metadata":{},"sourceType":"module"}