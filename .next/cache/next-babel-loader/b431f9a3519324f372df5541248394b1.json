{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst clamp = (value, min, max) => Math.min(Math.max(value, min), max);\n/**\n * Copied (converted to Typescript) from Peeke on Github:\n * https://gist.github.com/peeke/e65e8c162a22b21ac9ac9de07a4afeac\n */\n\n\nclass SpatialHashMap {\n  constructor(width, height) {\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"grid\", void 0);\n\n    this.width = width;\n    this.height = height;\n    this.grid = new Array(width * height).fill(null).map(() => []);\n  }\n\n  clear() {\n    this.grid.forEach(cell => {\n      cell.splice(0);\n    });\n  }\n\n  add(x, y, data) {\n    x = clamp(Math.round(x), 0, this.width - 1);\n    y = clamp(Math.round(y), 0, this.height - 1);\n    const index = x + y * this.width;\n    this.grid[index].push(data);\n  }\n\n  query(x, y, radius) {\n    if (radius) {\n      return this.queryWithRadius(x, y, radius);\n    }\n\n    x = clamp(Math.round(x), 0, this.width - 1);\n    y = clamp(Math.round(y), 0, this.height - 1);\n    const index = x + y * this.width;\n    return this.grid[index];\n  }\n\n  queryWithRadius(x, y, radius) {\n    const left = Math.max(Math.round(x - radius), 0);\n    const right = Math.min(Math.round(x + radius), this.width - 1);\n    const bottom = Math.max(Math.round(y - radius), 0);\n    const top = Math.min(Math.round(y + radius), this.height - 1);\n    const result = [];\n\n    for (let i = left; i <= right; i++) {\n      for (let j = bottom; j <= top; j++) {\n        const query = this.query(i, j);\n\n        for (let k = 0; k < query.length; k++) {\n          result.push(query[k]);\n        }\n      }\n    }\n\n    return result;\n  }\n\n}\n\nexport default SpatialHashMap;","map":null,"metadata":{},"sourceType":"module"}