{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/CavnasDrawer/CanvasDrawer.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport Canvas from \"../Canvas\";\nimport useSafeWindow from \"../../Hooks/useSafeWindow\";\n\nvar CanvasDrawer = function CanvasDrawer(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      initializeCanvas = _ref.initializeCanvas,\n      artist = _ref.artist,\n      fps = _ref.fps,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"initializeCanvas\", \"artist\", \"fps\"]);\n\n  var context = React.useRef(null);\n  var requestedFrame = React.useRef(null);\n  var getContext = React.useRef(function (c) {\n    return context.current = c;\n  });\n  React.useEffect(function () {\n    var draw = function draw(context) {\n      var then = _Date$now();\n\n      var renderFrame = function renderFrame() {\n        requestedFrame.current = requestAnimationFrame(function () {\n          renderFrame();\n\n          if (!fps) {\n            artist(context);\n          } else {\n            var now = _Date$now();\n\n            var delta = now - then;\n            var interval = 1000 / fps;\n\n            if (delta > interval) {\n              then = now - delta % interval;\n              artist(context);\n            }\n          }\n        });\n      };\n\n      renderFrame();\n    };\n\n    if (context.current) {\n      if (initializeCanvas) {\n        initializeCanvas(context.current);\n      }\n\n      draw(context.current);\n    }\n\n    return function () {\n      requestedFrame.current && cancelAnimationFrame(requestedFrame.current);\n    };\n  });\n  var flash = useSafeWindow()[1];\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(Canvas, _extends({\n    getContext: getContext.current,\n    width: width,\n    height: height\n  }, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n};\n\nexport default React.memo(CanvasDrawer);","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/CavnasDrawer/CanvasDrawer.tsx"],"names":["React","Canvas","useSafeWindow","CanvasDrawer","width","height","initializeCanvas","artist","fps","otherProps","context","useRef","requestedFrame","getContext","c","current","useEffect","draw","then","renderFrame","requestAnimationFrame","now","delta","interval","cancelAnimationFrame","flash","memo"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;;AAUA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAOR;AAAA,MANXC,KAMW,QANXA,KAMW;AAAA,MALXC,MAKW,QALXA,MAKW;AAAA,MAJXC,gBAIW,QAJXA,gBAIW;AAAA,MAHXC,MAGW,QAHXA,MAGW;AAAA,MAFXC,GAEW,QAFXA,GAEW;AAAA,MADRC,UACQ;;AACX,MAAMC,OAAgE,GAAGV,KAAK,CAACW,MAAN,CACvE,IADuE,CAAzE;AAGA,MAAMC,cAAqD,GAAGZ,KAAK,CAACW,MAAN,CAC5D,IAD4D,CAA9D;AAIA,MAAME,UAAU,GAAGb,KAAK,CAACW,MAAN,CACjB,UAACG,CAAD;AAAA,WAAkCJ,OAAO,CAACK,OAAR,GAAkBD,CAApD;AAAA,GADiB,CAAnB;AAGAd,EAAAA,KAAK,CAACgB,SAAN,CAAgB,YAAM;AACpB,QAAMC,IAAI,GAAG,SAAPA,IAAO,CAACP,OAAD,EAAuC;AAClD,UAAIQ,IAAI,GAAG,WAAX;;AACA,UAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBP,QAAAA,cAAc,CAACG,OAAf,GAAyBK,qBAAqB,CAAC,YAAM;AACnDD,UAAAA,WAAW;;AACX,cAAI,CAACX,GAAL,EAAU;AACRD,YAAAA,MAAM,CAACG,OAAD,CAAN;AACD,WAFD,MAEO;AACL,gBAAMW,GAAG,GAAG,WAAZ;;AACA,gBAAMC,KAAK,GAAGD,GAAG,GAAGH,IAApB;AACA,gBAAMK,QAAQ,GAAG,OAAOf,GAAxB;;AACA,gBAAIc,KAAK,GAAGC,QAAZ,EAAsB;AACpBL,cAAAA,IAAI,GAAGG,GAAG,GAAIC,KAAK,GAAGC,QAAtB;AACAhB,cAAAA,MAAM,CAACG,OAAD,CAAN;AACD;AACF;AACF,SAb6C,CAA9C;AAcD,OAfD;;AAgBAS,MAAAA,WAAW;AACZ,KAnBD;;AAqBA,QAAIT,OAAO,CAACK,OAAZ,EAAqB;AACnB,UAAIT,gBAAJ,EAAsB;AACpBA,QAAAA,gBAAgB,CAACI,OAAO,CAACK,OAAT,CAAhB;AACD;;AACDE,MAAAA,IAAI,CAACP,OAAO,CAACK,OAAT,CAAJ;AACD;;AACD,WAAO,YAAM;AACXH,MAAAA,cAAc,CAACG,OAAf,IAA0BS,oBAAoB,CAACZ,cAAc,CAACG,OAAhB,CAA9C;AACD,KAFD;AAGD,GA/BD;AAiCA,MAAMU,KAAK,GAAGvB,aAAa,GAAG,CAAH,CAA3B;;AAEA,MAAIuB,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AAED,SACE,MAAC,MAAD;AACE,IAAA,UAAU,EAAEZ,UAAU,CAACE,OADzB;AAEE,IAAA,KAAK,EAAEX,KAFT;AAGE,IAAA,MAAM,EAAEC;AAHV,KAIMI,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD,CAjED;;AAmEA,eAAeT,KAAK,CAAC0B,IAAN,CAAWvB,YAAX,CAAf","sourcesContent":["import * as React from \"react\";\nimport Canvas from \"../Canvas\";\nimport useSafeWindow from \"../../Hooks/useSafeWindow\";\n\ninterface Props {\n  width: number;\n  height: number;\n  initializeCanvas?: (context: CanvasRenderingContext2D) => void;\n  artist: (context: CanvasRenderingContext2D) => void;\n  fps?: number | null;\n}\n\nconst CanvasDrawer = ({\n  width,\n  height,\n  initializeCanvas,\n  artist,\n  fps,\n  ...otherProps\n}: Props) => {\n  const context: React.MutableRefObject<CanvasRenderingContext2D | null> = React.useRef(\n    null\n  );\n  const requestedFrame: React.MutableRefObject<number | null> = React.useRef(\n    null\n  );\n\n  const getContext = React.useRef(\n    (c: CanvasRenderingContext2D) => (context.current = c)\n  );\n  React.useEffect(() => {\n    const draw = (context: CanvasRenderingContext2D) => {\n      let then = Date.now();\n      const renderFrame = () => {\n        requestedFrame.current = requestAnimationFrame(() => {\n          renderFrame();\n          if (!fps) {\n            artist(context);\n          } else {\n            const now = Date.now();\n            const delta = now - then;\n            const interval = 1000 / fps;\n            if (delta > interval) {\n              then = now - (delta % interval);\n              artist(context);\n            }\n          }\n        });\n      };\n      renderFrame();\n    };\n\n    if (context.current) {\n      if (initializeCanvas) {\n        initializeCanvas(context.current);\n      }\n      draw(context.current);\n    }\n    return () => {\n      requestedFrame.current && cancelAnimationFrame(requestedFrame.current);\n    };\n  });\n\n  const flash = useSafeWindow()[1];\n\n  if (flash) {\n    return flash;\n  }\n\n  return (\n    <Canvas\n      getContext={getContext.current}\n      width={width}\n      height={height}\n      {...otherProps}\n    />\n  );\n};\n\nexport default React.memo(CanvasDrawer);\n"]},"metadata":{},"sourceType":"module"}