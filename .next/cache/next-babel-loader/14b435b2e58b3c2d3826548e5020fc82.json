{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\nimport Color from \"color\";\nvar defaultConfig = {\n  numberOfColumns: 40,\n  numberOfRows: 40,\n  p: 0.0008,\n  shouldSlideDots: true,\n  dotSize: 3\n};\n\nvar constrain = function constrain(val, min, max) {\n  return Math.max(Math.min(val, max), min);\n};\n\nvar MetaSphere =\n/*#__PURE__*/\nfunction () {\n  function MetaSphere(width, height) {\n    var config = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultConfig;\n\n    _classCallCheck(this, MetaSphere);\n\n    _defineProperty(this, \"_width\", void 0);\n\n    _defineProperty(this, \"_height\", void 0);\n\n    _defineProperty(this, \"_dots\", void 0);\n\n    _defineProperty(this, \"p\", void 0);\n\n    _defineProperty(this, \"shouldSlideDots\", void 0);\n\n    _defineProperty(this, \"dotSize\", void 0);\n\n    this._width = width;\n    this._height = height;\n    this._dots = [];\n    this.p = typeof config.p !== \"undefined\" ? config.p : defaultConfig.p;\n    this.shouldSlideDots = typeof config.shouldSlideDots !== \"undefined\" ? config.shouldSlideDots : defaultConfig.shouldSlideDots;\n    this.dotSize = typeof config.dotSize !== \"undefined\" ? config.dotSize : defaultConfig.dotSize;\n    var numberOfColumns = config.numberOfColumns || defaultConfig.numberOfColumns;\n    var numberOfRows = config.numberOfRows || defaultConfig.numberOfRows;\n\n    for (var i = 0; i < numberOfRows * numberOfColumns; i++) {\n      this._dots[i] = new Vector2d(width / numberOfRows * (i % numberOfRows), height / numberOfColumns * Math.floor(i / numberOfColumns));\n    }\n  }\n\n  _createClass(MetaSphere, [{\n    key: \"setup\",\n    value: function setup() {}\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, focusPoint) {\n      var _this = this;\n\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, this._width, this._height); // Draw each of the dots.\n\n      this._dots.forEach(function (dot) {\n        // Figure out the color of the dot.\n        var color = Color.hsl(Math.sqrt(Math.pow(_this._width / 2 - dot.x, 2) + Math.pow(_this._height / 2 - dot.y, 2)), 50, 50);\n        ctx.fillStyle = color.hex(); //Move the dots across the page\n\n        if (_this.shouldSlideDots) {\n          if (focusPoint.x <= _this._width / 2) {\n            dot.x = (dot.x + 1) % _this._width;\n          } else {\n            dot.x -= 1;\n\n            if (dot.x <= 0) {\n              dot.x = _this._width;\n            }\n          }\n        } //Ok, I'm going to be honest with you, this was one of the first programs\n        //I made, and I coded it poorly and as a result.  I could fix most of it, but\n        //I have no idea how this part actually works.\n\n\n        ctx.beginPath();\n        ctx.ellipse(constrain(dot.x + (constrain(focusPoint.x, 100, _this._width - 100) - dot.x) * Math.sqrt(Math.pow(constrain(focusPoint.x, 300, 900) - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * _this.p, dot.x - 200, dot.x + 200), dot.y + (focusPoint.y - dot.y) * Math.sqrt(Math.pow(focusPoint.x - dot.x, 2) + Math.pow(focusPoint.y - dot.y, 2)) * _this.p, _this.dotSize, _this.dotSize, 0, 0, Math.PI * 2);\n        ctx.fill();\n      });\n    }\n  }]);\n\n  return MetaSphere;\n}();\n\nexport { MetaSphere as default };","map":null,"metadata":{},"sourceType":"module"}