{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/Canvas.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport useSafeWindow from \"../Hooks/useSafeWindow\";\n\n/**\n * A wrapper around the canvas element which prevents the canvas from\n * unmounting unless the width or height changes and provides a method\n * to get a rendering context.\n * @param {*} props\n * @param {*} ref\n */\nvar Canvas = function Canvas(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      getContext = _ref.getContext,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"getContext\"]);\n\n  var canvasRef = React.useRef(null);\n\n  var _useSafeWindow = useSafeWindow(),\n      _useSafeWindow2 = _slicedToArray(_useSafeWindow, 1),\n      window = _useSafeWindow2[0];\n\n  React.useEffect(function () {\n    var context = canvasRef.current && canvasRef.current.getContext(\"2d\");\n\n    if (context) {\n      getContext(context);\n    }\n  }, [getContext, window]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nexport default React.memo(Canvas);","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/Canvas.tsx"],"names":["React","useSafeWindow","Canvas","width","height","getContext","otherProps","canvasRef","useRef","window","useEffect","context","current","memo"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AAQA;;;;;;;AAOA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAAyD;AAAA,MAAtDC,KAAsD,QAAtDA,KAAsD;AAAA,MAA/CC,MAA+C,QAA/CA,MAA+C;AAAA,MAAvCC,UAAuC,QAAvCA,UAAuC;AAAA,MAAxBC,UAAwB;;AACtE,MAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAN,CAAuC,IAAvC,CAAlB;;AADsE,uBAErDP,aAAa,EAFwC;AAAA;AAAA,MAE/DQ,MAF+D;;AAGtET,EAAAA,KAAK,CAACU,SAAN,CAAgB,YAAM;AACpB,QAAMC,OAAO,GAAGJ,SAAS,CAACK,OAAV,IAAqBL,SAAS,CAACK,OAAV,CAAkBP,UAAlB,CAA6B,IAA7B,CAArC;;AACA,QAAIM,OAAJ,EAAa;AACXN,MAAAA,UAAU,CAACM,OAAD,CAAV;AACD;AACF,GALD,EAKG,CAACN,UAAD,EAAaI,MAAb,CALH;AAMA,SACE;AAAQ,IAAA,GAAG,EAAEF,SAAb;AAAwB,IAAA,KAAK,EAAEJ,KAA/B;AAAsC,IAAA,MAAM,EAAEC;AAA9C,KAA0DE,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD,CAZD,C,CAaA;;;AACA,eAAeN,KAAK,CAACa,IAAN,CAAWX,MAAX,CAAf","sourcesContent":["import * as React from \"react\";\nimport useSafeWindow from \"../Hooks/useSafeWindow\";\n\ntype Props = {\n  width: number;\n  height: number;\n  getContext: (context: CanvasRenderingContext2D) => void;\n} & React.HTMLAttributes<HTMLCanvasElement>;\n\n/**\n * A wrapper around the canvas element which prevents the canvas from\n * unmounting unless the width or height changes and provides a method\n * to get a rendering context.\n * @param {*} props\n * @param {*} ref\n */\nconst Canvas = ({ width, height, getContext, ...otherProps }: Props) => {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n  const [window] = useSafeWindow();\n  React.useEffect(() => {\n    const context = canvasRef.current && canvasRef.current.getContext(\"2d\");\n    if (context) {\n      getContext(context);\n    }\n  }, [getContext, window]);\n  return (\n    <canvas ref={canvasRef} width={width} height={height} {...otherProps} />\n  );\n};\n// @ts-ignore\nexport default React.memo(Canvas);\n"]},"metadata":{},"sourceType":"module"}