{"ast":null,"code":"// flow\nimport { useEffect, useRef } from \"react\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nexport var useScroll = function useScroll(listener) {\n  var throtleAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  useEffect(function () {\n    var throttledFunc = throttle(function (event) {\n      return listener(event.deltaY);\n    }, throtleAmount);\n    var wheelListener = window.addEventListener(\"wheel\", throttledFunc);\n    return function () {\n      return window.removeEventListener(\"wheel\", wheelListener);\n    };\n  }, [listener, throtleAmount]);\n};\nexport var useScrollThreshold = function useScrollThreshold(listener) {\n  var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;\n  var coolDown = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  var throttledListener = useRef(throttle(function (val) {\n    return listener(val);\n  }, coolDown));\n  var callback = useRef(function (val) {\n    if (val > threshold || val < -threshold) {\n      throttledListener.current(val);\n    }\n  });\n  useScroll(callback.current);\n};\nexport default useScrollThreshold;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/Hooks/useScrollTreshold.ts"],"names":["useEffect","useRef","throttle","useScroll","listener","throtleAmount","throttledFunc","event","deltaY","wheelListener","window","addEventListener","removeEventListener","useScrollThreshold","threshold","coolDown","throttledListener","val","callback","current"],"mappings":"AAAA;AACA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,0CAArB;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CACvBC,QADuB,EAGpB;AAAA,MADHC,aACG,uEADqB,GACrB;AACHL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,aAAa,GAAGJ,QAAQ,CAC5B,UAACK,KAAD;AAAA,aAAuBH,QAAQ,CAACG,KAAK,CAACC,MAAP,CAA/B;AAAA,KAD4B,EAE5BH,aAF4B,CAA9B;AAIA,QAAMI,aAAkB,GAAGC,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiCL,aAAjC,CAA3B;AAEA,WAAO;AAAA,aAAMI,MAAM,CAACE,mBAAP,CAA2B,OAA3B,EAAoCH,aAApC,CAAN;AAAA,KAAP;AACD,GARQ,EAQN,CAACL,QAAD,EAAWC,aAAX,CARM,CAAT;AASD,CAbM;AAeP,OAAO,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCT,QADgC,EAI7B;AAAA,MAFHU,SAEG,uEAFiB,GAEjB;AAAA,MADHC,QACG,uEADgB,IAChB;AACH,MAAMC,iBAAiB,GAAGf,MAAM,CAC9BC,QAAQ,CAAC,UAACe,GAAD;AAAA,WAAiBb,QAAQ,CAACa,GAAD,CAAzB;AAAA,GAAD,EAAiCF,QAAjC,CADsB,CAAhC;AAGA,MAAMG,QAAQ,GAAGjB,MAAM,CAAC,UAACgB,GAAD,EAAiB;AACvC,QAAIA,GAAG,GAAGH,SAAN,IAAmBG,GAAG,GAAG,CAACH,SAA9B,EAAyC;AACvCE,MAAAA,iBAAiB,CAACG,OAAlB,CAA0BF,GAA1B;AACD;AACF,GAJsB,CAAvB;AAMAd,EAAAA,SAAS,CAACe,QAAQ,CAACC,OAAV,CAAT;AACD,CAfM;AAiBP,eAAeN,kBAAf","sourcesContent":["// flow\nimport { useEffect, useRef } from \"react\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\n\nexport const useScroll = (\n  listener: (x0: number) => any,\n  throtleAmount: number = 300\n) => {\n  useEffect(() => {\n    const throttledFunc = throttle(\n      (event: WheelEvent) => listener(event.deltaY),\n      throtleAmount\n    );\n    const wheelListener: any = window.addEventListener(\"wheel\", throttledFunc);\n\n    return () => window.removeEventListener(\"wheel\", wheelListener);\n  }, [listener, throtleAmount]);\n};\n\nexport const useScrollThreshold = (\n  listener: (x0: number) => any,\n  threshold: number = 0.5,\n  coolDown: number = 1000\n) => {\n  const throttledListener = useRef<(val: number) => void>(\n    throttle((val: number) => listener(val), coolDown)\n  );\n  const callback = useRef((val: number) => {\n    if (val > threshold || val < -threshold) {\n      throttledListener.current(val);\n    }\n  });\n\n  useScroll(callback.current);\n};\n\nexport default useScrollThreshold;\n"]},"metadata":{},"sourceType":"module"}