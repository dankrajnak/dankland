{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/Utility/seo.tsx\";\nvar __jsx = React.createElement;\n\n/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\nimport * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nconst SEO = ({\n  description = \"\",\n  lang = \"en\",\n  meta = [],\n  keywords = [],\n  title\n}) => {\n  const {\n    site\n  } = useStaticQuery(graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `);\n  const metaDescription = description || site.siteMetadata.description;\n  return __jsx(Helmet, {\n    htmlAttributes: {\n      lang\n    },\n    title: title,\n    titleTemplate: `%s | ${site.siteMetadata.title}`,\n    meta: [{\n      name: `description`,\n      content: metaDescription\n    }, {\n      property: `og:title`,\n      content: title\n    }, {\n      property: `og:description`,\n      content: metaDescription\n    }, {\n      property: `og:type`,\n      content: `website`\n    }, {\n      name: `twitter:card`,\n      content: `summary`\n    }, {\n      name: `twitter:creator`,\n      content: site.siteMetadata.author\n    }, {\n      name: `twitter:title`,\n      content: title\n    }, {\n      name: `twitter:description`,\n      content: metaDescription\n    }].concat(keywords.length > 0 ? {\n      name: `keywords`,\n      content: keywords.join(`, `)\n    } : []).concat(meta),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  });\n};\n\nexport default SEO;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/Utility/seo.tsx"],"names":["React","Helmet","SEO","description","lang","meta","keywords","title","site","useStaticQuery","graphql","metaDescription","siteMetadata","name","content","property","author","concat","length","join"],"mappings":";;;AAAA;;;;;;AAOA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,cAAvB;;AAUA,MAAMC,GAAG,GAAG,CAAC;AACXC,EAAAA,WAAW,GAAG,EADH;AAEXC,EAAAA,IAAI,GAAG,IAFI;AAGXC,EAAAA,IAAI,GAAG,EAHI;AAIXC,EAAAA,QAAQ,GAAG,EAJA;AAKXC,EAAAA;AALW,CAAD,KAMC;AACX,QAAM;AAAEC,IAAAA;AAAF,MAAWC,cAAc,CAC7BC,OAAQ;;;;;;;;;;KADqB,CAA/B;AAcA,QAAMC,eAAe,GAAGR,WAAW,IAAIK,IAAI,CAACI,YAAL,CAAkBT,WAAzD;AAEA,SACE,MAAC,MAAD;AACE,IAAA,cAAc,EAAE;AACdC,MAAAA;AADc,KADlB;AAIE,IAAA,KAAK,EAAEG,KAJT;AAKE,IAAA,aAAa,EAAG,QAAOC,IAAI,CAACI,YAAL,CAAkBL,KAAM,EALjD;AAME,IAAA,IAAI,EAAE,CACJ;AACEM,MAAAA,IAAI,EAAG,aADT;AAEEC,MAAAA,OAAO,EAAEH;AAFX,KADI,EAKJ;AACEI,MAAAA,QAAQ,EAAG,UADb;AAEED,MAAAA,OAAO,EAAEP;AAFX,KALI,EASJ;AACEQ,MAAAA,QAAQ,EAAG,gBADb;AAEED,MAAAA,OAAO,EAAEH;AAFX,KATI,EAaJ;AACEI,MAAAA,QAAQ,EAAG,SADb;AAEED,MAAAA,OAAO,EAAG;AAFZ,KAbI,EAiBJ;AACED,MAAAA,IAAI,EAAG,cADT;AAEEC,MAAAA,OAAO,EAAG;AAFZ,KAjBI,EAqBJ;AACED,MAAAA,IAAI,EAAG,iBADT;AAEEC,MAAAA,OAAO,EAAEN,IAAI,CAACI,YAAL,CAAkBI;AAF7B,KArBI,EAyBJ;AACEH,MAAAA,IAAI,EAAG,eADT;AAEEC,MAAAA,OAAO,EAAEP;AAFX,KAzBI,EA6BJ;AACEM,MAAAA,IAAI,EAAG,qBADT;AAEEC,MAAAA,OAAO,EAAEH;AAFX,KA7BI,EAkCHM,MAlCG,CAmCFX,QAAQ,CAACY,MAAT,GAAkB,CAAlB,GACI;AACEL,MAAAA,IAAI,EAAG,UADT;AAEEC,MAAAA,OAAO,EAAER,QAAQ,CAACa,IAAT,CAAe,IAAf;AAFX,KADJ,GAKI,EAxCF,EA0CHF,MA1CG,CA0CIZ,IA1CJ,CANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAoDD,CA3ED;;AA6EA,eAAeH,GAAf","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from \"react\";\nimport { Helmet } from \"react-helmet\";\n\ninterface Props {\n  description?: string;\n  lang?: string;\n  meta?: [];\n  keywords?: string[];\n  title: string;\n}\n\nconst SEO = ({\n  description = \"\",\n  lang = \"en\",\n  meta = [],\n  keywords = [],\n  title,\n}: Props) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  );\n\n  const metaDescription = description || site.siteMetadata.description;\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  );\n};\n\nexport default SEO;\n"]},"metadata":{},"sourceType":"module"}