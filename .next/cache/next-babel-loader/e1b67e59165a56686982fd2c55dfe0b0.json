{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Private statics\nconst calcMagnitude = v => Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n\nconst INVERSE_SQUARE_ROOT_TWO = 1 / Math.sqrt(2);\nexport default class Vector2d {\n  constructor(x, y) {\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  get magnitudeSquared() {\n    return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n  }\n\n  get magnitude() {\n    return calcMagnitude(this);\n  }\n\n  get normalized() {\n    const magnitude = calcMagnitude(this);\n    return new Vector2d(this.x / magnitude, this.y / magnitude);\n  }\n\n  get abs() {\n    return new Vector2d(Math.abs(this.x), Math.abs(this.y));\n  }\n  /**\n   * More info here: https://www.h3xed.com/programming/fast-unit-vector-calculation-for-2d-games\n   */\n\n\n  get approxUnit() {\n    if (!this.x) {\n      if (!this.y) {\n        return new Vector2d(0, 0);\n      } else {\n        return new Vector2d(0, 1);\n      }\n    } else if (!this.y) {\n      return new Vector2d(1, 0);\n    }\n\n    const absVector = this.abs;\n    let ratio = 1 / Math.max(absVector.x, absVector.y);\n    ratio *= (1 - INVERSE_SQUARE_ROOT_TWO) * 10 - (absVector.x + absVector.y) * ratio * (1 - INVERSE_SQUARE_ROOT_TWO);\n    return new Vector2d(this.x * ratio, this.y * ratio);\n  }\n\n  plus(b) {\n    return new Vector2d(b.x + this.x, b.y + this.y);\n  }\n\n  minus(b) {\n    return new Vector2d(this.x - b.x, this.y - b.y);\n  }\n\n  dot(b) {\n    return this.x * b.x + this.y * b.y;\n  }\n\n  times(scalar) {\n    return new Vector2d(this.x * scalar, this.y * scalar);\n  }\n\n  scaleTo(magnitude) {\n    return this.normalized.times(magnitude);\n  }\n\n  transform(matrix) {\n    return new Vector2d(this.x * matrix[0] + this.y * matrix[1], this.x * matrix[2] + this.y * matrix[3]);\n  }\n\n  squaredDistanceTo(b) {\n    return Math.pow(this.x - b.x, 2) + Math.pow(this.y - b.y, 2);\n  }\n\n  distanceTo(b) {\n    return Math.sqrt(this.squaredDistanceTo(b));\n  }\n\n  clone() {\n    return new Vector2d(this.x, this.y);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}