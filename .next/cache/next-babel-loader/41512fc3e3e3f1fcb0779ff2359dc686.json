{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar OriginalPerspectiveSquareDrawer =\n/*#__PURE__*/\nfunction () {\n  function OriginalPerspectiveSquareDrawer(ctx) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, OriginalPerspectiveSquareDrawer);\n\n    _defineProperty(this, \"_ctx\", void 0);\n\n    _defineProperty(this, \"_lineWidth\", void 0);\n\n    _defineProperty(this, \"_lineColor\", void 0);\n\n    _defineProperty(this, \"_includeDashes\", void 0);\n\n    _defineProperty(this, \"_mapper\", void 0);\n\n    this._ctx = ctx;\n    this._lineColor = config.lineColor || \"black\";\n    this._lineWidth = config.lineWidth || 3;\n\n    this._mapper = config.mapper || function (v) {\n      return v;\n    };\n\n    this._includeDashes = typeof config.includeDashes === \"boolean\" ? config.includeDashes : true;\n  }\n\n  _createClass(OriginalPerspectiveSquareDrawer, [{\n    key: \"setup\",\n    value: function setup() {// Do nothing.\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(squares, focusPoint) {\n      var _this = this;\n\n      this._ctx.strokeStyle = this._lineColor;\n      this._ctx.lineWidth = this._lineWidth;\n\n      var _squares = _slicedToArray(squares, 2),\n          squareOne = _squares[0],\n          squareTwo = _squares[1];\n\n      var squareOnePoints = squareOne.pointsAsArray.map(this._mapper);\n      var squareTwoPoints = squareTwo.pointsAsArray.map(this._mapper); // Draw dashed lines from vanish point to second square.\n\n      if (this._includeDashes) {\n        this._ctx.setLineDash([0, 4, this._lineWidth, 4]);\n\n        squareTwoPoints.forEach(function (point) {\n          _this._ctx.beginPath();\n\n          _this._ctx.moveTo(focusPoint.x, focusPoint.y);\n\n          _this._ctx.lineTo(point.x, point.y);\n\n          _this._ctx.stroke();\n\n          _this._ctx.closePath();\n        });\n\n        this._ctx.setLineDash([]);\n      } // Draw second square.\n\n\n      this._drawSquare(squareTwo); // Draw lines between second square and first square\n\n\n      squareOnePoints.forEach(function (pointOne, index) {\n        _this._ctx.beginPath();\n\n        _this._ctx.moveTo(pointOne.x, pointOne.y);\n\n        _this._ctx.lineTo(squareTwoPoints[index].x, squareTwoPoints[index].y);\n\n        _this._ctx.stroke();\n\n        _this._ctx.closePath();\n      }); // Draw first square.\n\n      this._drawSquare(squareOne);\n    }\n  }, {\n    key: \"_drawSquare\",\n    value: function _drawSquare(square) {\n      var _this2 = this;\n\n      var points = square.pointsAsArray.map(this._mapper);\n\n      this._ctx.beginPath();\n\n      var lastPoint = points[points.length - 1];\n\n      this._ctx.moveTo(lastPoint.x, lastPoint.y);\n\n      points.forEach(function (point) {\n        return _this2._ctx.lineTo(point.x, point.y);\n      });\n\n      this._ctx.stroke();\n\n      this._ctx.closePath();\n    }\n  }]);\n\n  return OriginalPerspectiveSquareDrawer;\n}();\n\nexport { OriginalPerspectiveSquareDrawer as default };","map":null,"metadata":{},"sourceType":"module"}