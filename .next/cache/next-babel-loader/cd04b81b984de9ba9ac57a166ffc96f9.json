{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport * as React from \"react\";\nimport { SpringSystem } from \"rebound\";\nimport throttle from \"../../Services/Throttle/Throttle.service\";\nimport Vector2d from \"../../Domain/Vector/Vector2d\";\n\nvar getCoordinatesFromMouseEvent = function getCoordinatesFromMouseEvent(event) {\n  var bounds = event.currentTarget.getBoundingClientRect();\n  return new Vector2d(event.clientX - bounds.left, event.clientY - bounds.top);\n};\n\nvar randomPosition = function randomPosition(maxX, maxY) {\n  return new Vector2d(Math.random() * maxX, Math.random() * maxY);\n};\n\nvar positionThreshold = 20;\n\nvar getNextPosition = function getNextPosition(currentPosition, width, height) {\n  var newPosition = randomPosition(width, height);\n\n  while (newPosition.minus(currentPosition).magnitude < positionThreshold) {\n    newPosition = randomPosition(width, height);\n  }\n\n  return newPosition;\n};\n\nvar useClickHoverWander = function useClickHoverWander(width, height) {\n  var initialFocusPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Vector2d(0, 0);\n  var xSpring = React.useRef(null);\n  var ySpring = React.useRef(null);\n\n  var _React$useState = React.useState(initialFocusPoint),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      focusPoint = _React$useState2[0],\n      setFocusPoint = _React$useState2[1];\n\n  React.useEffect(function () {\n    var springSystem = new SpringSystem();\n    var springTension = 2;\n    var springFriction = 5;\n    xSpring.current = springSystem.createSpring(springTension, springFriction);\n    ySpring.current = springSystem.createSpring(springTension, springFriction);\n\n    var goToNextPosition = function goToNextPosition() {\n      if (!xSpring.current || !ySpring.current) {\n        return;\n      }\n\n      var newPosition = getNextPosition(new Vector2d(xSpring.current.getCurrentValue(), ySpring.current.getCurrentValue()), width, height); // Not sure exactly why, but there's a bug if we set the endValue right away\n      // Somtimes the spring just doesn't move.\n\n      setTimeout(function () {\n        if (xSpring.current && ySpring.current) {\n          xSpring.current.setEndValue(newPosition.x);\n          ySpring.current.setEndValue(newPosition.y);\n        }\n      }, 0);\n    };\n\n    xSpring.current.addListener({\n      onSpringUpdate: function onSpringUpdate(spring) {\n        if (!ySpring.current) {\n          return;\n        }\n\n        setFocusPoint(new Vector2d(spring.getCurrentValue(), ySpring.current.getCurrentValue()));\n      },\n      onSpringAtRest: function onSpringAtRest() {\n        if (ySpring.current && ySpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      }\n    });\n    ySpring.current.addListener({\n      onSpringUpdate: function onSpringUpdate(spring) {\n        if (!xSpring.current) {\n          return;\n        }\n\n        if (xSpring.current.isAtRest()) {\n          setFocusPoint(new Vector2d(xSpring.current.getCurrentValue(), spring.getCurrentValue()));\n        }\n      },\n      onSpringAtRest: function onSpringAtRest() {\n        if (xSpring.current && xSpring.current.isAtRest()) {\n          goToNextPosition();\n        }\n      }\n    });\n    xSpring.current.setEndValue(Math.random() * width);\n    ySpring.current.setEndValue(Math.random() * height);\n    return function () {\n      xSpring.current && xSpring.current.destroy();\n      ySpring.current && ySpring.current.destroy();\n    };\n  }, [height, width]);\n  var onMouseMove = React.useMemo(function () {\n    return throttle(function (event) {\n      var position = getCoordinatesFromMouseEvent(event);\n      xSpring.current && xSpring.current.setEndValue(position.x);\n      ySpring.current && ySpring.current.setEndValue(position.y);\n    }, 100);\n  }, []);\n  var onClick = React.useMemo(function () {\n    return function (event) {\n      var position = getCoordinatesFromMouseEvent(event);\n      xSpring.current && xSpring.current.setEndValue(position.x);\n      ySpring.current && ySpring.current.setEndValue(position.y);\n    };\n  }, []);\n  return [focusPoint, {\n    onClick: onClick,\n    onMouseMove: onMouseMove\n  }];\n};\n\nexport default useClickHoverWander;","map":null,"metadata":{},"sourceType":"module"}