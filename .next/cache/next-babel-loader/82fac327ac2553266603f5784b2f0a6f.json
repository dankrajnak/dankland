{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/CardMenu/index.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport useFullScreen from \"../../../Hooks/useFullScreen\";\nimport useScrollAmount from \"../../../Hooks/useScrollAmount\";\nimport CardDeck from \"./CardDeck/CardDeck\";\nconst ScrollMessage = styled.div.attrs(props => ({\n  style: {\n    opacity: props.opacity\n  }\n}))`\n  position: fixed;\n  bottom: 20px;\n  width: 100%;\n  text-align: center;\n  font-size: small;\n  color: #aaa;\n  z-index: 5000;\n`;\nconst AboutContainer = styled.div`\n  position: fixed;\n  top: 8%;\n  left: 8%;\n  width: 100%;\n  a {\n    text-decoration: none;\n    color: #222;\n    &:hover {\n      border-bottom: solid 1px #222;\n    }\n  }\n`;\n/**\n * Pages are represented as cards on a deck. As the user scrolls the cards roll off the deck\n * offscreen.  Known to be a little buggy on iphones.\n */\n\nconst CardMenu = ({\n  routeProps,\n  cards\n}) => {\n  const [width, height, flash] = useFullScreen();\n  const cardWidth = React.useMemo(() => Math.min(500, width * 0.9), [width]);\n  const cardHeight = React.useMemo(() => Math.min(500, height * 0.7), [height]);\n  const cardsWithDimensions = React.useMemo(() => cards.map(card => _objectSpread({}, card, {\n    background: __jsx(card.background, {\n      width: cardWidth,\n      height: cardHeight,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    })\n  })), [cardHeight, cardWidth, cards]);\n  const scrollToCard = React.useMemo(() => {\n    if (routeProps.location && routeProps.location.state && routeProps.location.state.prevPath) {\n      const prevLocation = routeProps.location.state.prevPath;\n      const index = cards.findIndex(card => card.link === prevLocation);\n      return index === -1 ? null : index;\n    }\n\n    return null;\n  }, [cards, routeProps.location]);\n  const scroll = useScrollAmount();\n\n  if (flash) {\n    return flash;\n  }\n\n  return __jsx(React.Fragment, null, __jsx(AboutContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Link, {\n    to: \"/about\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"About\")), __jsx(CardDeck, {\n    cards: cardsWithDimensions,\n    width: width,\n    cardsWidth: cardWidth,\n    cardsHeight: cardHeight,\n    scrollToCard: scrollToCard,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }), __jsx(ScrollMessage, {\n    opacity: (1 - scroll / height) * 2 || 0,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, \"Scroll Up\"));\n};\n\nexport default CardMenu;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/CardMenu/index.tsx"],"names":["React","styled","Link","useFullScreen","useScrollAmount","CardDeck","ScrollMessage","div","attrs","props","style","opacity","AboutContainer","CardMenu","routeProps","cards","width","height","flash","cardWidth","useMemo","Math","min","cardHeight","cardsWithDimensions","map","card","background","scrollToCard","location","state","prevPath","prevLocation","index","findIndex","link","scroll"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"gatsby\";\nimport { Menu } from \"../../../../Domain/Menu/Menu\";\nimport useFullScreen from \"../../../Hooks/useFullScreen\";\nimport useScrollAmount from \"../../../Hooks/useScrollAmount\";\nimport CardDeck from \"./CardDeck/CardDeck\";\n\nconst ScrollMessage = styled.div.attrs<{ opacity: number }>(props => ({\n  style: { opacity: props.opacity },\n}))`\n  position: fixed;\n  bottom: 20px;\n  width: 100%;\n  text-align: center;\n  font-size: small;\n  color: #aaa;\n  z-index: 5000;\n`;\n\nconst AboutContainer = styled.div`\n  position: fixed;\n  top: 8%;\n  left: 8%;\n  width: 100%;\n  a {\n    text-decoration: none;\n    color: #222;\n    &:hover {\n      border-bottom: solid 1px #222;\n    }\n  }\n`;\n\n/**\n * Pages are represented as cards on a deck. As the user scrolls the cards roll off the deck\n * offscreen.  Known to be a little buggy on iphones.\n */\nconst CardMenu: Menu = ({ routeProps, cards }) => {\n  const [width, height, flash] = useFullScreen();\n  const cardWidth = React.useMemo(() => Math.min(500, width * 0.9), [width]);\n  const cardHeight = React.useMemo(() => Math.min(500, height * 0.7), [height]);\n\n  const cardsWithDimensions = React.useMemo(\n    () =>\n      cards.map(card => ({\n        ...card,\n        background: <card.background width={cardWidth} height={cardHeight} />,\n      })),\n    [cardHeight, cardWidth, cards]\n  );\n  const scrollToCard = React.useMemo(() => {\n    if (\n      routeProps.location &&\n      routeProps.location.state &&\n      routeProps.location.state.prevPath\n    ) {\n      const prevLocation = routeProps.location.state.prevPath;\n      const index = cards.findIndex(card => card.link === prevLocation);\n      return index === -1 ? null : index;\n    }\n    return null;\n  }, [cards, routeProps.location]);\n  const scroll = useScrollAmount();\n  if (flash) {\n    return flash;\n  }\n  return (\n    <>\n      <AboutContainer>\n        <Link to={\"/about\"}>About</Link>\n      </AboutContainer>\n      <CardDeck\n        cards={cardsWithDimensions}\n        width={width}\n        cardsWidth={cardWidth}\n        cardsHeight={cardHeight}\n        scrollToCard={scrollToCard}\n      />\n      {/* \n        // @ts-ignore */}\n      <ScrollMessage opacity={(1 - scroll / height) * 2 || 0}>\n        Scroll Up\n      </ScrollMessage>\n    </>\n  );\n};\n\nexport default CardMenu;\n"]},"metadata":{},"sourceType":"module"}