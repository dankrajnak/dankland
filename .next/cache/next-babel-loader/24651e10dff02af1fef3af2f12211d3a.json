{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n// Private statics\nvar calcMagnitude = function calcMagnitude(v) {\n  return Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n};\n\nvar INVERSE_SQUARE_ROOT_TWO = 1 / Math.sqrt(2);\n\nvar Vector2d =\n/*#__PURE__*/\nfunction () {\n  function Vector2d(x, y) {\n    _classCallCheck(this, Vector2d);\n\n    _defineProperty(this, \"x\", void 0);\n\n    _defineProperty(this, \"y\", void 0);\n\n    this.x = x;\n    this.y = y;\n  }\n\n  _createClass(Vector2d, [{\n    key: \"plus\",\n    value: function plus(b) {\n      return new Vector2d(b.x + this.x, b.y + this.y);\n    }\n  }, {\n    key: \"minus\",\n    value: function minus(b) {\n      return new Vector2d(this.x - b.x, this.y - b.y);\n    }\n  }, {\n    key: \"dot\",\n    value: function dot(b) {\n      return this.x * b.x + this.y * b.y;\n    }\n  }, {\n    key: \"times\",\n    value: function times(scalar) {\n      return new Vector2d(this.x * scalar, this.y * scalar);\n    }\n  }, {\n    key: \"scaleTo\",\n    value: function scaleTo(magnitude) {\n      return this.normalized.times(magnitude);\n    }\n  }, {\n    key: \"transform\",\n    value: function transform(matrix) {\n      return new Vector2d(this.x * matrix[0] + this.y * matrix[1], this.x * matrix[2] + this.y * matrix[3]);\n    }\n  }, {\n    key: \"squaredDistanceTo\",\n    value: function squaredDistanceTo(b) {\n      return Math.pow(this.x - b.x, 2) + Math.pow(this.y - b.y, 2);\n    }\n  }, {\n    key: \"distanceTo\",\n    value: function distanceTo(b) {\n      return Math.sqrt(this.squaredDistanceTo(b));\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Vector2d(this.x, this.y);\n    }\n  }, {\n    key: \"magnitudeSquared\",\n    get: function get() {\n      return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n  }, {\n    key: \"magnitude\",\n    get: function get() {\n      return calcMagnitude(this);\n    }\n  }, {\n    key: \"normalized\",\n    get: function get() {\n      var magnitude = calcMagnitude(this);\n      return new Vector2d(this.x / magnitude, this.y / magnitude);\n    }\n  }, {\n    key: \"abs\",\n    get: function get() {\n      return new Vector2d(Math.abs(this.x), Math.abs(this.y));\n    }\n    /**\n     * More info here: https://www.h3xed.com/programming/fast-unit-vector-calculation-for-2d-games\n     */\n\n  }, {\n    key: \"approxUnit\",\n    get: function get() {\n      if (!this.x) {\n        if (!this.y) {\n          return new Vector2d(0, 0);\n        } else {\n          return new Vector2d(0, 1);\n        }\n      } else if (!this.y) {\n        return new Vector2d(1, 0);\n      }\n\n      var absVector = this.abs;\n      var ratio = 1 / Math.max(absVector.x, absVector.y);\n      ratio *= (1 - INVERSE_SQUARE_ROOT_TWO) * 10 - (absVector.x + absVector.y) * ratio * (1 - INVERSE_SQUARE_ROOT_TWO);\n      return new Vector2d(this.x * ratio, this.y * ratio);\n    }\n  }]);\n\n  return Vector2d;\n}();\n\nexport { Vector2d as default };","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/Domain/Vector/Vector2d.ts"],"names":["calcMagnitude","v","Math","sqrt","pow","x","y","INVERSE_SQUARE_ROOT_TWO","Vector2d","b","scalar","magnitude","normalized","times","matrix","squaredDistanceTo","abs","absVector","ratio","max"],"mappings":"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","sourcesContent":["// Private statics\nconst calcMagnitude = (v: Vector2d): number =>\n  Math.sqrt(Math.pow(v.x, 2) + Math.pow(v.y, 2));\n\nconst INVERSE_SQUARE_ROOT_TWO = 1 / Math.sqrt(2);\n\nexport default class Vector2d {\n  public x: number;\n  public y: number;\n\n  public constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  public get magnitudeSquared(): number {\n    return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n  }\n\n  public get magnitude() {\n    return calcMagnitude(this);\n  }\n\n  public get normalized(): Vector2d {\n    const magnitude = calcMagnitude(this);\n    return new Vector2d(this.x / magnitude, this.y / magnitude);\n  }\n\n  public get abs(): Vector2d {\n    return new Vector2d(Math.abs(this.x), Math.abs(this.y));\n  }\n\n  /**\n   * More info here: https://www.h3xed.com/programming/fast-unit-vector-calculation-for-2d-games\n   */\n  public get approxUnit(): Vector2d {\n    if (!this.x) {\n      if (!this.y) {\n        return new Vector2d(0, 0);\n      } else {\n        return new Vector2d(0, 1);\n      }\n    } else if (!this.y) {\n      return new Vector2d(1, 0);\n    }\n    const absVector = this.abs;\n    let ratio = 1 / Math.max(absVector.x, absVector.y);\n\n    ratio *=\n      (1 - INVERSE_SQUARE_ROOT_TWO) * 10 -\n      (absVector.x + absVector.y) * ratio * (1 - INVERSE_SQUARE_ROOT_TWO);\n\n    return new Vector2d(this.x * ratio, this.y * ratio);\n  }\n\n  public plus(b: Vector2d): Vector2d {\n    return new Vector2d(b.x + this.x, b.y + this.y);\n  }\n\n  public minus(b: Vector2d): Vector2d {\n    return new Vector2d(this.x - b.x, this.y - b.y);\n  }\n  public dot(b: Vector2d): number {\n    return this.x * b.x + this.y * b.y;\n  }\n\n  public times(scalar: number): Vector2d {\n    return new Vector2d(this.x * scalar, this.y * scalar);\n  }\n\n  public scaleTo(magnitude: number): Vector2d {\n    return this.normalized.times(magnitude);\n  }\n\n  public transform(matrix: [number, number, number, number]): Vector2d {\n    return new Vector2d(\n      this.x * matrix[0] + this.y * matrix[1],\n      this.x * matrix[2] + this.y * matrix[3]\n    );\n  }\n\n  public squaredDistanceTo(b: Vector2d): number {\n    return Math.pow(this.x - b.x, 2) + Math.pow(this.y - b.y, 2);\n  }\n\n  public distanceTo(b: Vector2d): number {\n    return Math.sqrt(this.squaredDistanceTo(b));\n  }\n\n  public clone(): Vector2d {\n    return new Vector2d(this.x, this.y);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}