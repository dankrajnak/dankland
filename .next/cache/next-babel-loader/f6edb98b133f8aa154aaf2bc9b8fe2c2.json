{"ast":null,"code":"import _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nvar clamp = function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n};\n/**\n * Copied (converted to Typescript) from Peeke on Github:\n * https://gist.github.com/peeke/e65e8c162a22b21ac9ac9de07a4afeac\n */\n\n\nvar SpatialHashMap =\n/*#__PURE__*/\nfunction () {\n  function SpatialHashMap(width, height) {\n    _classCallCheck(this, SpatialHashMap);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"grid\", void 0);\n\n    this.width = width;\n    this.height = height;\n    this.grid = new Array(width * height).fill(null).map(function () {\n      return [];\n    });\n  }\n\n  _createClass(SpatialHashMap, [{\n    key: \"clear\",\n    value: function clear() {\n      this.grid.forEach(function (cell) {\n        cell.splice(0);\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(x, y, data) {\n      x = clamp(Math.round(x), 0, this.width - 1);\n      y = clamp(Math.round(y), 0, this.height - 1);\n      var index = x + y * this.width;\n      this.grid[index].push(data);\n    }\n  }, {\n    key: \"query\",\n    value: function query(x, y, radius) {\n      if (radius) {\n        return this.queryWithRadius(x, y, radius);\n      }\n\n      x = clamp(Math.round(x), 0, this.width - 1);\n      y = clamp(Math.round(y), 0, this.height - 1);\n      var index = x + y * this.width;\n      return this.grid[index];\n    }\n  }, {\n    key: \"queryWithRadius\",\n    value: function queryWithRadius(x, y, radius) {\n      var left = Math.max(Math.round(x - radius), 0);\n      var right = Math.min(Math.round(x + radius), this.width - 1);\n      var bottom = Math.max(Math.round(y - radius), 0);\n      var top = Math.min(Math.round(y + radius), this.height - 1);\n      var result = [];\n\n      for (var i = left; i <= right; i++) {\n        for (var j = bottom; j <= top; j++) {\n          var query = this.query(i, j);\n\n          for (var k = 0; k < query.length; k++) {\n            result.push(query[k]);\n          }\n        }\n      }\n\n      return result;\n    }\n  }]);\n\n  return SpatialHashMap;\n}();\n\nexport default SpatialHashMap;","map":null,"metadata":{},"sourceType":"module"}