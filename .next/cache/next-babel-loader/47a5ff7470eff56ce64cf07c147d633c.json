{"ast":null,"code":"var _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/Canvas.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\nimport useSafeWindow from \"../Hooks/useSafeWindow\";\n\n/**\n * A wrapper around the canvas element which prevents the canvas from\n * unmounting unless the width or height changes and provides a method\n * to get a rendering context.\n * @param {*} props\n * @param {*} ref\n */\nconst Canvas = (_ref) => {\n  let {\n    width,\n    height,\n    getContext\n  } = _ref,\n      otherProps = _objectWithoutProperties(_ref, [\"width\", \"height\", \"getContext\"]);\n\n  const canvasRef = React.useRef(null);\n  const [window] = useSafeWindow();\n  React.useEffect(() => {\n    const context = canvasRef.current && canvasRef.current.getContext(\"2d\");\n\n    if (context) {\n      getContext(context);\n    }\n  }, [getContext, window]);\n  return __jsx(\"canvas\", _extends({\n    ref: canvasRef,\n    width: width,\n    height: height\n  }, otherProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }));\n}; // @ts-ignore\n\n\nexport default React.memo(Canvas);","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/UI/Canvas.tsx"],"names":["React","useSafeWindow","Canvas","width","height","getContext","otherProps","canvasRef","useRef","window","useEffect","context","current","memo"],"mappings":";;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,aAAP,MAA0B,wBAA1B;;AAQA;;;;;;;AAOA,MAAMC,MAAM,GAAG,UAAyD;AAAA,MAAxD;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,GAAwD;AAAA,MAAxBC,UAAwB;;AACtE,QAAMC,SAAS,GAAGP,KAAK,CAACQ,MAAN,CAAuC,IAAvC,CAAlB;AACA,QAAM,CAACC,MAAD,IAAWR,aAAa,EAA9B;AACAD,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,UAAMC,OAAO,GAAGJ,SAAS,CAACK,OAAV,IAAqBL,SAAS,CAACK,OAAV,CAAkBP,UAAlB,CAA6B,IAA7B,CAArC;;AACA,QAAIM,OAAJ,EAAa;AACXN,MAAAA,UAAU,CAACM,OAAD,CAAV;AACD;AACF,GALD,EAKG,CAACN,UAAD,EAAaI,MAAb,CALH;AAMA,SACE;AAAQ,IAAA,GAAG,EAAEF,SAAb;AAAwB,IAAA,KAAK,EAAEJ,KAA/B;AAAsC,IAAA,MAAM,EAAEC;AAA9C,KAA0DE,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD,CAZD,C,CAaA;;;AACA,eAAeN,KAAK,CAACa,IAAN,CAAWX,MAAX,CAAf","sourcesContent":["import * as React from \"react\";\nimport useSafeWindow from \"../Hooks/useSafeWindow\";\n\ntype Props = {\n  width: number;\n  height: number;\n  getContext: (context: CanvasRenderingContext2D) => void;\n} & React.HTMLAttributes<HTMLCanvasElement>;\n\n/**\n * A wrapper around the canvas element which prevents the canvas from\n * unmounting unless the width or height changes and provides a method\n * to get a rendering context.\n * @param {*} props\n * @param {*} ref\n */\nconst Canvas = ({ width, height, getContext, ...otherProps }: Props) => {\n  const canvasRef = React.useRef<HTMLCanvasElement | null>(null);\n  const [window] = useSafeWindow();\n  React.useEffect(() => {\n    const context = canvasRef.current && canvasRef.current.getContext(\"2d\");\n    if (context) {\n      getContext(context);\n    }\n  }, [getContext, window]);\n  return (\n    <canvas ref={canvasRef} width={width} height={height} {...otherProps} />\n  );\n};\n// @ts-ignore\nexport default React.memo(Canvas);\n"]},"metadata":{},"sourceType":"module"}