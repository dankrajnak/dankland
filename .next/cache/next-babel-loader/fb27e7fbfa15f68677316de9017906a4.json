{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/MetaSpherePreview.tsx\";\nvar __jsx = React.createElement;\nimport * as React from \"react\";\nimport MetaSphere from \"../../../Services/MetaSphere/MetaSphere\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nvar MetaSpherePreview = function MetaSpherePreview(props) {\n  var metaDrawer = React.useRef(null);\n\n  var _useClickHoverWander = useClickHoverWander(props.width, props.height),\n      _useClickHoverWander2 = _slicedToArray(_useClickHoverWander, 2),\n      focusPoint = _useClickHoverWander2[0],\n      mouseProps = _useClickHoverWander2[1];\n\n  React.useEffect(function () {\n    metaDrawer.current = new MetaSphere(props.width, props.height, {\n      dotSize: 2,\n      p: 0.002,\n      numberOfColumns: 20,\n      numberOfRows: 20,\n      shouldSlideDots: false\n    });\n  }, [props.height, props.width]);\n  var artist = React.useMemo(function () {\n    return function (ctx) {\n      metaDrawer.current && metaDrawer.current.draw(ctx, focusPoint);\n    };\n  }, [focusPoint]);\n  return __jsx(CanvasDrawer, _extends({\n    width: props.width,\n    height: props.height,\n    artist: artist\n  }, mouseProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n\nexport default MetaSpherePreview;","map":{"version":3,"sources":["/Users/danielkrajnak/Documents/Code/dankLand/src/View/PageComponents/Menu/MetaSpherePreview.tsx"],"names":["React","MetaSphere","useClickHoverWander","CanvasDrawer","MetaSpherePreview","props","metaDrawer","useRef","width","height","focusPoint","mouseProps","useEffect","current","dotSize","p","numberOfColumns","numberOfRows","shouldSlideDots","artist","useMemo","ctx","draw"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,mBAAP,MAAgC,iCAAhC;AACA,OAAOC,YAAP,MAAyB,oCAAzB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,KAAD,EAA8C;AACtE,MAAMC,UAAU,GAAGN,KAAK,CAACO,MAAN,CAAgC,IAAhC,CAAnB;;AADsE,6BAErCL,mBAAmB,CAClDG,KAAK,CAACG,KAD4C,EAElDH,KAAK,CAACI,MAF4C,CAFkB;AAAA;AAAA,MAE/DC,UAF+D;AAAA,MAEnDC,UAFmD;;AAMtEX,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAM;AACpBN,IAAAA,UAAU,CAACO,OAAX,GAAqB,IAAIZ,UAAJ,CAAeI,KAAK,CAACG,KAArB,EAA4BH,KAAK,CAACI,MAAlC,EAA0C;AAC7DK,MAAAA,OAAO,EAAE,CADoD;AAE7DC,MAAAA,CAAC,EAAE,KAF0D;AAG7DC,MAAAA,eAAe,EAAE,EAH4C;AAI7DC,MAAAA,YAAY,EAAE,EAJ+C;AAK7DC,MAAAA,eAAe,EAAE;AAL4C,KAA1C,CAArB;AAOD,GARD,EAQG,CAACb,KAAK,CAACI,MAAP,EAAeJ,KAAK,CAACG,KAArB,CARH;AAUA,MAAMW,MAAM,GAAGnB,KAAK,CAACoB,OAAN,CACb;AAAA,WAAM,UAACC,GAAD,EAAmC;AACvCf,MAAAA,UAAU,CAACO,OAAX,IAAsBP,UAAU,CAACO,OAAX,CAAmBS,IAAnB,CAAwBD,GAAxB,EAA6BX,UAA7B,CAAtB;AACD,KAFD;AAAA,GADa,EAIb,CAACA,UAAD,CAJa,CAAf;AAMA,SACE,MAAC,YAAD;AACE,IAAA,KAAK,EAAEL,KAAK,CAACG,KADf;AAEE,IAAA,MAAM,EAAEH,KAAK,CAACI,MAFhB;AAGE,IAAA,MAAM,EAAEU;AAHV,KAIMR,UAJN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAQD,CA9BD;;AAgCA,eAAeP,iBAAf","sourcesContent":["import * as React from \"react\";\nimport MetaSphere from \"../../../Services/MetaSphere/MetaSphere\";\nimport useClickHoverWander from \"../../Hooks/useClickHoverWander\";\nimport CanvasDrawer from \"../../UI/CavnasDrawer/CanvasDrawer\";\n\nconst MetaSpherePreview = (props: { width: number; height: number }) => {\n  const metaDrawer = React.useRef<MetaSphere | null>(null);\n  const [focusPoint, mouseProps] = useClickHoverWander(\n    props.width,\n    props.height\n  );\n  React.useEffect(() => {\n    metaDrawer.current = new MetaSphere(props.width, props.height, {\n      dotSize: 2,\n      p: 0.002,\n      numberOfColumns: 20,\n      numberOfRows: 20,\n      shouldSlideDots: false,\n    });\n  }, [props.height, props.width]);\n\n  const artist = React.useMemo(\n    () => (ctx: CanvasRenderingContext2D) => {\n      metaDrawer.current && metaDrawer.current.draw(ctx, focusPoint);\n    },\n    [focusPoint]\n  );\n  return (\n    <CanvasDrawer\n      width={props.width}\n      height={props.height}\n      artist={artist}\n      {...mouseProps}\n    />\n  );\n};\n\nexport default MetaSpherePreview;\n"]},"metadata":{},"sourceType":"module"}